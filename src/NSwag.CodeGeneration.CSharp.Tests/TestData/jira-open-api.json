{
  "openapi": "3.0.1",
  "info": {
    "title": "Jira Software Data Center REST API Reference",
    "description": "This is the reference document for the REST API and resources provided by Jira Software Data Center. The REST APIs are for developers who want to integrate Jira Data Center with other applications, and for administrators who want to script configuration interactions with Jira Data Center.\n\nJira Data Center is built upon the Jira platform.  As such there is a natural overlap in functionality between what is provided by Jira Data Center and what is provided by the Jira platform.  If you are after an introductory, high-level view of the Jira REST APIs, then the best place to start is the [Jira REST API home](https://developer.atlassian.com/server/jira/platform/rest-apis/).\n## Using the REST API\nNot familiar with the Jira Data Center REST APIs? Start with our [Guide to exploring the Jira Data Center domain model via the REST APIs](https://developer.atlassian.com/server/jira/platform/tutorials_and_guides/), which will help you get a conceptual understanding of the Jira Data Center REST APIs.\n\nIf you want instructions on how to use the REST APIs, check out the [Appendix](#appendix) at the end of this page (after the resources), where you'll find information on the following topics:\n* [Structure of the REST URIs](#structure)\n* [Authentication](#authentication)\n* [Pagination](#pagination)\n* [Expansion](#expansion)\n* [Special headers](#special-headers)\n* [Field input formats](#fieldformats)\n### Experimental methods\nMethods marked as `EXPERIMENTAL` may change without notice. We are looking for your feedback for these methods. To use experimental methods, you must set this header in your requests: `X-ExperimentalApi : true`. This indicates that you are opting into the experimental preview. Once a resource or method moves out of the experimental phase, then this header will no longer be required nor checked.\n",
    "termsOfService": "https://www.atlassian.com/legal/software-license-agreement",
    "version": "swagger-merged-template.yaml"
  },
  "servers": [
    {
      "url": "http://{baseurl}/rest",
      "variables": {
        "baseurl": {
          "default": "localhost:8090",
          "description": "Address of your Jira Data Center instance"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "basic": {
        "type": "http",
        "description": "In order to use basic authorization, provide username:password Base64 encoded in the 'Authorization' header.",
        "scheme": "basic"
      }
    },
    "schemas": {
      "BoardBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          },
          "name": {
            "type": "string",
            "example": "Scrum Board"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/agile/1.0/board/10001"
          },
          "type": {
            "type": "string",
            "example": "scrum"
          }
        },
        "example": null
      },
      "BoardConfigBean": {
        "type": "object",
        "properties": {
          "columnConfig": {
            "$ref": "#/components/schemas/ColumnConfigBean"
          },
          "estimation": {
            "$ref": "#/components/schemas/EstimationConfigBean"
          },
          "filter": {
            "$ref": "#/components/schemas/RelationBean"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          },
          "name": {
            "type": "string",
            "example": "Scrum"
          },
          "ranking": {
            "$ref": "#/components/schemas/RankingConfigBean"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/agile/1.0/board/10001"
          },
          "subQuery": {
            "$ref": "#/components/schemas/SubqueryBean"
          },
          "type": {
            "type": "string",
            "example": "scrum"
          }
        },
        "example": null
      },
      "BoardCreateBean": {
        "type": "object",
        "properties": {
          "filterId": {
            "type": "integer",
            "format": "int64",
            "example": 10040
          },
          "name": {
            "type": "string",
            "example": "scrum board"
          },
          "type": {
            "type": "string",
            "example": "scrum"
          }
        },
        "example": null
      },
      "BooleanSettingBean": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null
      },
      "ChangeHistoryBean": {
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserJsonBean"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "historyMetadata": {
            "$ref": "#/components/schemas/HistoryMetadata"
          },
          "id": {
            "type": "string",
            "example": null
          },
          "items": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ChangeItemBean"
            }
          }
        },
        "example": null
      },
      "ChangeItemBean": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "example": null
          },
          "fieldtype": {
            "type": "string",
            "example": null
          },
          "from": {
            "type": "string",
            "example": null
          },
          "fromString": {
            "type": "string",
            "example": null
          },
          "to": {
            "type": "string",
            "example": null
          },
          "toString": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "ChangelogBean": {
        "type": "object",
        "properties": {
          "histories": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ChangeHistoryBean"
            }
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "startAt": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": null
          }
        },
        "example": null
      },
      "ColorBean": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "ghx-label-1",
            "enum": [
              "color_1",
              "color_2",
              "color_3",
              "color_4",
              "color_5",
              "color_6",
              "color_7",
              "color_8",
              "color_9",
              "color_10",
              "color_11",
              "color_12",
              "color_13",
              "color_14"
            ]
          }
        },
        "example": "color_6"
      },
      "ColumnBean": {
        "type": "object",
        "properties": {
          "max": {
            "type": "integer",
            "format": "int32",
            "example": 4
          },
          "min": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "name": {
            "type": "string",
            "example": "To Do"
          },
          "statuses": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/RelationBean"
            }
          }
        },
        "example": null
      },
      "ColumnConfigBean": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ColumnBean"
            }
          },
          "constraintType": {
            "type": "string",
            "example": "issueCount"
          }
        },
        "example": null
      },
      "EditMetaBean": {
        "type": "object",
        "example": null
      },
      "EntityPropertiesKeysBean": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/EntityPropertyKeyBean"
            }
          }
        },
        "example": null
      },
      "EntityPropertyBean": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "issue.support"
          },
          "value": {
            "type": "string",
            "example": "{\"hipchat.room.id\":\"support-123\",\"support.time\":\"1m\"}"
          }
        },
        "example": null
      },
      "EntityPropertyKeyBean": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "issue.support"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/issue/EX-2/properties/issue.support"
          }
        },
        "example": null
      },
      "Entry": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "example": [
              "JIRA Agile cannot execute the rank operation at this time. Please try again later."
            ],
            "items": {
              "type": "string",
              "example": "[\"JIRA Agile cannot execute the rank operation at this time. Please try again later.\"]"
            }
          },
          "issueId": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "issueKey": {
            "type": "string",
            "example": "PR-1"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 200
          }
        },
        "example": null
      },
      "EpicBean": {
        "type": "object",
        "properties": {
          "color": {
            "$ref": "#/components/schemas/ColorBean"
          },
          "done": {
            "type": "boolean",
            "example": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "key": {
            "type": "string",
            "example": "PR-1"
          },
          "name": {
            "type": "string",
            "example": "Epic 1"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/issue/10000"
          },
          "summary": {
            "type": "string",
            "example": "Epic 1 summary"
          }
        },
        "example": null
      },
      "EpicRankRequestBean": {
        "type": "object",
        "properties": {
          "rankAfterEpic": {
            "type": "string",
            "example": "10001"
          },
          "rankBeforeEpic": {
            "type": "string",
            "example": "10000"
          },
          "rankCustomFieldId": {
            "type": "integer",
            "format": "int64",
            "example": 10521
          }
        },
        "example": null
      },
      "EpicUpdateBean": {
        "type": "object",
        "properties": {
          "color": {
            "$ref": "#/components/schemas/ColorBean"
          },
          "done": {
            "type": "boolean",
            "example": true
          },
          "name": {
            "type": "string",
            "example": "Epic 1"
          },
          "summary": {
            "type": "string",
            "example": "Epic 1 summary"
          }
        },
        "example": null
      },
      "EstimationConfigBean": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/EstimationFieldBean"
          },
          "type": {
            "type": "string",
            "example": "field"
          }
        },
        "example": null
      },
      "EstimationFieldBean": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "example": "Story Points"
          },
          "fieldId": {
            "type": "string",
            "example": "customfield_10002"
          }
        },
        "example": null
      },
      "FieldEditBean": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "example": "8.0"
          }
        },
        "example": null
      },
      "FieldMetaBean": {
        "type": "object",
        "properties": {
          "allowedValues": {
            "type": "array",
            "example": [
              "red",
              "blue",
              "default value"
            ],
            "items": {
              "type": "object",
              "example": [
                "red",
                "blue",
                "default value"
              ]
            }
          },
          "autoCompleteUrl": {
            "type": "string",
            "example": "/rest/api/2/customFieldOption/10000"
          },
          "defaultValue": {
            "type": "object",
            "example": null
          },
          "fieldId": {
            "type": "string",
            "example": "customfield_10000"
          },
          "hasDefaultValue": {
            "type": "boolean",
            "example": true
          },
          "name": {
            "type": "string",
            "example": "My Multi Select"
          },
          "operations": {
            "type": "array",
            "example": [
              "set",
              "add"
            ],
            "items": {
              "type": "string",
              "example": "[\"set\",\"add\"]"
            }
          },
          "required": {
            "type": "boolean",
            "example": true
          },
          "schema": {
            "$ref": "#/components/schemas/JsonTypeBean"
          }
        },
        "example": null
      },
      "FieldValueBean": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string",
            "example": "customfield_12532"
          },
          "value": {
            "type": "object",
            "example": 8
          }
        },
        "example": null
      },
      "HistoryMetadata": {
        "type": "object",
        "properties": {
          "activityDescription": {
            "type": "string",
            "example": "text description"
          },
          "activityDescriptionKey": {
            "type": "string",
            "example": "plugin.activity.i18.key"
          },
          "actor": {
            "$ref": "#/components/schemas/HistoryMetadataParticipant"
          },
          "cause": {
            "$ref": "#/components/schemas/HistoryMetadataParticipant"
          },
          "description": {
            "type": "string",
            "example": "The issue was created."
          },
          "descriptionKey": {
            "type": "string",
            "example": "plugin.changereason.i18.key"
          },
          "emailDescription": {
            "type": "string",
            "example": "email description"
          },
          "emailDescriptionKey": {
            "type": "string",
            "example": "plugin.email.i18.key"
          },
          "extraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{\"keyvalue\":\"extra data\",\"goes\":\"here\"}"
            },
            "example": {
              "keyvalue": "extra data",
              "goes": "here"
            }
          },
          "generator": {
            "$ref": "#/components/schemas/HistoryMetadataParticipant"
          },
          "type": {
            "type": "string",
            "example": "myplugin:type"
          }
        },
        "example": null
      },
      "HistoryMetadataParticipant": {
        "type": "object",
        "properties": {
          "avatarUrl": {
            "type": "string",
            "example": "http://mysystem.com/avatar/tony.jpg"
          },
          "displayName": {
            "type": "string",
            "example": "Tony"
          },
          "displayNameKey": {
            "type": "string",
            "example": "tony"
          },
          "id": {
            "type": "string",
            "example": "tony"
          },
          "type": {
            "type": "string",
            "example": "mysystem-user"
          },
          "url": {
            "type": "string",
            "example": "http://mysystem.com/user/tony"
          }
        },
        "example": null
      },
      "IncludedFields": {
        "type": "object",
        "properties": {
          "included": {
            "uniqueItems": true,
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          }
        },
        "example": null
      },
      "IssueAssignRequestBean": {
        "type": "object",
        "properties": {
          "issues": {
            "uniqueItems": true,
            "type": "array",
            "example": "['ISSUE-1', 'ISSUE-2']",
            "items": {
              "type": "string",
              "example": "['ISSUE-1', 'ISSUE-2']"
            }
          }
        },
        "example": null
      },
      "IssueBean": {
        "type": "object",
        "properties": {
          "changelog": {
            "$ref": "#/components/schemas/ChangelogBean"
          },
          "editmeta": {
            "$ref": "#/components/schemas/EditMetaBean"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "example": {
                "watcher": {
                  "self": "http://www.example.com/jira/rest/api/2/issue/EX-1/watchers",
                  "isWatching": false,
                  "watchCount": 1,
                  "watchers": [
                    {
                      "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                      "name": "fred",
                      "displayName": "Fred F. User",
                      "active": false
                    }
                  ]
                },
                "attachment": [
                  {
                    "self": "http://www.example.com/jira/rest/api/2.0/attachments/10000",
                    "filename": "picture.jpg",
                    "author": {
                      "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                      "key": "JIRAUSER10100",
                      "name": "fred",
                      "emailAddress": "fred@example.com",
                      "avatarUrls": {
                        "48x48": "http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred",
                        "24x24": "http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred",
                        "16x16": "http://www.example.com/jira/secure/useravatar?size=xsmall&ownerId=fred",
                        "32x32": "http://www.example.com/jira/secure/useravatar?size=medium&ownerId=fred"
                      },
                      "displayName": "Fred F. User",
                      "active": true,
                      "deleted": false,
                      "timeZone": "Australia/Sydney",
                      "locale": "en_AU",
                      "lastLoginTime": "2023-08-30T16:37:01+1000"
                    },
                    "created": "2024-05-23T14:47:28.592+0000",
                    "size": 23123,
                    "mimeType": "image/jpeg",
                    "content": "http://www.example.com/jira/attachments/10000",
                    "thumbnail": "http://www.example.com/jira/secure/thumbnail/10000"
                  }
                ],
                "sub-tasks": [
                  {
                    "id": "10000",
                    "type": {
                      "id": "10000",
                      "name": "",
                      "inward": "Parent",
                      "outward": "Sub-task"
                    },
                    "outwardIssue": {
                      "id": "10003",
                      "key": "EX-2",
                      "self": "http://www.example.com/jira/rest/api/2/issue/EX-2",
                      "fields": {
                        "status": {
                          "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
                          "name": "Open"
                        }
                      }
                    }
                  }
                ],
                "description": "example bug report",
                "project": {
                  "self": "http://www.example.com/jira/rest/api/2/project/EX",
                  "id": "10000",
                  "key": "EX",
                  "name": "Example",
                  "avatarUrls": {
                    "48x48": "http://www.example.com/jira/secure/projectavatar?size=large&pid=10000",
                    "24x24": "http://www.example.com/jira/secure/projectavatar?size=small&pid=10000",
                    "16x16": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000",
                    "32x32": "http://www.example.com/jira/secure/projectavatar?size=medium&pid=10000"
                  },
                  "projectCategory": {
                    "self": "http://www.example.com/jira/rest/api/2/projectCategory/10000",
                    "id": "10000",
                    "name": "FIRST",
                    "description": "First Project Category"
                  }
                },
                "comment": [
                  {
                    "self": "http://www.example.com/jira/rest/api/2/issue/10010/comment/10000",
                    "id": "10000",
                    "author": {
                      "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                      "name": "fred",
                      "displayName": "Fred F. User",
                      "active": false
                    },
                    "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.",
                    "updateAuthor": {
                      "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                      "name": "fred",
                      "displayName": "Fred F. User",
                      "active": false
                    },
                    "created": "2024-05-23T14:47:28.538+0000",
                    "updated": "2024-05-23T14:47:28.538+0000",
                    "visibility": {
                      "type": "role",
                      "value": "Administrators"
                    }
                  }
                ],
                "issuelinks": [
                  {
                    "id": "10001",
                    "type": {
                      "id": "10000",
                      "name": "Dependent",
                      "inward": "depends on",
                      "outward": "is depended by"
                    },
                    "outwardIssue": {
                      "id": "10004L",
                      "key": "PRJ-2",
                      "self": "http://www.example.com/jira/rest/api/2/issue/PRJ-2",
                      "fields": {
                        "status": {
                          "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
                          "name": "Open"
                        }
                      }
                    }
                  },
                  {
                    "id": "10002",
                    "type": {
                      "id": "10000",
                      "name": "Dependent",
                      "inward": "depends on",
                      "outward": "is depended by"
                    },
                    "inwardIssue": {
                      "id": "10004",
                      "key": "PRJ-3",
                      "self": "http://www.example.com/jira/rest/api/2/issue/PRJ-3",
                      "fields": {
                        "status": {
                          "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
                          "name": "Open"
                        }
                      }
                    }
                  }
                ],
                "worklog": [
                  {
                    "self": "http://www.example.com/jira/rest/api/2/issue/10010/worklog/10000",
                    "author": {
                      "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                      "name": "fred",
                      "displayName": "Fred F. User",
                      "active": false
                    },
                    "updateAuthor": {
                      "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                      "name": "fred",
                      "displayName": "Fred F. User",
                      "active": false
                    },
                    "comment": "I did some work here.",
                    "updated": "2024-05-23T14:47:28.599+0000",
                    "visibility": {
                      "type": "group",
                      "value": "jira-developers"
                    },
                    "started": "2024-05-23T14:47:28.598+0000",
                    "timeSpent": "3h 20m",
                    "timeSpentSeconds": 12000,
                    "id": "100028",
                    "issueId": "10002"
                  }
                ],
                "updated": 1,
                "timetracking": {
                  "originalEstimate": "10m",
                  "remainingEstimate": "3m",
                  "timeSpent": "6m",
                  "originalEstimateSeconds": 600,
                  "remainingEstimateSeconds": 200,
                  "timeSpentSeconds": 400
                }
              }
            },
            "example": {
              "watcher": {
                "self": "http://www.example.com/jira/rest/api/2/issue/EX-1/watchers",
                "isWatching": false,
                "watchCount": 1,
                "watchers": [
                  {
                    "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                    "name": "fred",
                    "displayName": "Fred F. User",
                    "active": false
                  }
                ]
              },
              "attachment": [
                {
                  "self": "http://www.example.com/jira/rest/api/2.0/attachments/10000",
                  "filename": "picture.jpg",
                  "author": {
                    "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                    "key": "JIRAUSER10100",
                    "name": "fred",
                    "emailAddress": "fred@example.com",
                    "avatarUrls": {
                      "48x48": "http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred",
                      "24x24": "http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred",
                      "16x16": "http://www.example.com/jira/secure/useravatar?size=xsmall&ownerId=fred",
                      "32x32": "http://www.example.com/jira/secure/useravatar?size=medium&ownerId=fred"
                    },
                    "displayName": "Fred F. User",
                    "active": true,
                    "deleted": false,
                    "timeZone": "Australia/Sydney",
                    "locale": "en_AU",
                    "lastLoginTime": "2023-08-30T16:37:01+1000"
                  },
                  "created": "2024-05-23T14:47:28.592+0000",
                  "size": 23123,
                  "mimeType": "image/jpeg",
                  "content": "http://www.example.com/jira/attachments/10000",
                  "thumbnail": "http://www.example.com/jira/secure/thumbnail/10000"
                }
              ],
              "sub-tasks": [
                {
                  "id": "10000",
                  "type": {
                    "id": "10000",
                    "name": "",
                    "inward": "Parent",
                    "outward": "Sub-task"
                  },
                  "outwardIssue": {
                    "id": "10003",
                    "key": "EX-2",
                    "self": "http://www.example.com/jira/rest/api/2/issue/EX-2",
                    "fields": {
                      "status": {
                        "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
                        "name": "Open"
                      }
                    }
                  }
                }
              ],
              "description": "example bug report",
              "project": {
                "self": "http://www.example.com/jira/rest/api/2/project/EX",
                "id": "10000",
                "key": "EX",
                "name": "Example",
                "avatarUrls": {
                  "48x48": "http://www.example.com/jira/secure/projectavatar?size=large&pid=10000",
                  "24x24": "http://www.example.com/jira/secure/projectavatar?size=small&pid=10000",
                  "16x16": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000",
                  "32x32": "http://www.example.com/jira/secure/projectavatar?size=medium&pid=10000"
                },
                "projectCategory": {
                  "self": "http://www.example.com/jira/rest/api/2/projectCategory/10000",
                  "id": "10000",
                  "name": "FIRST",
                  "description": "First Project Category"
                }
              },
              "comment": [
                {
                  "self": "http://www.example.com/jira/rest/api/2/issue/10010/comment/10000",
                  "id": "10000",
                  "author": {
                    "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                    "name": "fred",
                    "displayName": "Fred F. User",
                    "active": false
                  },
                  "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.",
                  "updateAuthor": {
                    "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                    "name": "fred",
                    "displayName": "Fred F. User",
                    "active": false
                  },
                  "created": "2024-05-23T14:47:28.538+0000",
                  "updated": "2024-05-23T14:47:28.538+0000",
                  "visibility": {
                    "type": "role",
                    "value": "Administrators"
                  }
                }
              ],
              "issuelinks": [
                {
                  "id": "10001",
                  "type": {
                    "id": "10000",
                    "name": "Dependent",
                    "inward": "depends on",
                    "outward": "is depended by"
                  },
                  "outwardIssue": {
                    "id": "10004L",
                    "key": "PRJ-2",
                    "self": "http://www.example.com/jira/rest/api/2/issue/PRJ-2",
                    "fields": {
                      "status": {
                        "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
                        "name": "Open"
                      }
                    }
                  }
                },
                {
                  "id": "10002",
                  "type": {
                    "id": "10000",
                    "name": "Dependent",
                    "inward": "depends on",
                    "outward": "is depended by"
                  },
                  "inwardIssue": {
                    "id": "10004",
                    "key": "PRJ-3",
                    "self": "http://www.example.com/jira/rest/api/2/issue/PRJ-3",
                    "fields": {
                      "status": {
                        "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
                        "name": "Open"
                      }
                    }
                  }
                }
              ],
              "worklog": [
                {
                  "self": "http://www.example.com/jira/rest/api/2/issue/10010/worklog/10000",
                  "author": {
                    "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                    "name": "fred",
                    "displayName": "Fred F. User",
                    "active": false
                  },
                  "updateAuthor": {
                    "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
                    "name": "fred",
                    "displayName": "Fred F. User",
                    "active": false
                  },
                  "comment": "I did some work here.",
                  "updated": "2024-05-23T14:47:28.599+0000",
                  "visibility": {
                    "type": "group",
                    "value": "jira-developers"
                  },
                  "started": "2024-05-23T14:47:28.598+0000",
                  "timeSpent": "3h 20m",
                  "timeSpentSeconds": 12000,
                  "id": "100028",
                  "issueId": "10002"
                }
              ],
              "updated": 1,
              "timetracking": {
                "originalEstimate": "10m",
                "remainingEstimate": "3m",
                "timeSpent": "6m",
                "originalEstimateSeconds": 600,
                "remainingEstimateSeconds": 200,
                "timeSpentSeconds": 400
              }
            }
          },
          "fieldsToInclude": {
            "$ref": "#/components/schemas/IncludedFields"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "key": {
            "type": "string",
            "example": "HSP-1"
          },
          "names": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": null
            },
            "example": null
          },
          "operations": {
            "$ref": "#/components/schemas/OpsbarBean"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertiesBean"
          },
          "renderedFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "example": null
            },
            "example": null
          },
          "schema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonTypeBean"
            },
            "example": null
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "https://jira.atlassian.com/rest/api/2/issue/10000"
          },
          "transitionBeans": {
            "type": "array",
            "writeOnly": true,
            "example": null,
            "items": {
              "$ref": "#/components/schemas/TransitionBean"
            }
          },
          "transitions": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/TransitionBean"
            }
          },
          "versionedRepresentations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "example": null
              },
              "example": null
            },
            "example": null
          }
        },
        "example": null,
        "xml": {
          "name": "issue"
        }
      },
      "IssueRankRequestBean": {
        "type": "object",
        "properties": {
          "issues": {
            "type": "array",
            "example": [
              "PR-1",
              "10001",
              "PR-3"
            ],
            "items": {
              "type": "string",
              "example": "[\"PR-1\",\"10001\",\"PR-3\"]"
            }
          },
          "rankAfterIssue": {
            "type": "string",
            "example": "PR-4"
          },
          "rankBeforeIssue": {
            "type": "string",
            "example": "PR-4"
          },
          "rankCustomFieldId": {
            "type": "integer",
            "format": "int64",
            "example": 10521
          }
        },
        "example": null
      },
      "JsonTypeBean": {
        "type": "object",
        "properties": {
          "custom": {
            "type": "string",
            "example": "null"
          },
          "customId": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "items": {
            "type": "string",
            "example": "null"
          },
          "system": {
            "type": "string",
            "example": "summary"
          },
          "type": {
            "type": "string",
            "example": "string"
          }
        },
        "example": {}
      },
      "LinkGroupBean": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/LinkGroupBean"
            }
          },
          "header": {
            "$ref": "#/components/schemas/SimpleLinkBean"
          },
          "id": {
            "type": "string",
            "example": null
          },
          "links": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/SimpleLinkBean"
            }
          },
          "styleClass": {
            "type": "string",
            "example": null
          },
          "weight": {
            "type": "integer",
            "format": "int32",
            "example": null
          }
        },
        "example": null
      },
      "OpsbarBean": {
        "type": "object",
        "properties": {
          "linkGroups": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/LinkGroupBean"
            }
          }
        },
        "example": null
      },
      "PartialSuccessBean": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/Entry"
            }
          }
        },
        "example": null
      },
      "ProjectCategoryJsonBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "This is a project category"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "name": {
            "type": "string",
            "example": "My Project Category"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/projectCategory/10000"
          }
        },
        "example": null
      },
      "ProjectJsonBean": {
        "type": "object",
        "properties": {
          "avatarUrls": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": null
            },
            "example": null
          },
          "id": {
            "type": "string",
            "example": null
          },
          "key": {
            "type": "string",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "projectCategory": {
            "$ref": "#/components/schemas/ProjectCategoryJsonBean"
          },
          "projectTypeKey": {
            "type": "string",
            "example": null
          },
          "self": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "PropertiesBean": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": null
            },
            "example": null
          }
        },
        "example": null
      },
      "RankingConfigBean": {
        "type": "object",
        "properties": {
          "rankCustomFieldId": {
            "type": "integer",
            "format": "int64",
            "example": 10020
          }
        },
        "example": null
      },
      "RelationBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1001"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/agile/1.0/filter/1001"
          }
        },
        "example": null
      },
      "SearchResultsBean": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "string",
            "example": "0"
          },
          "issues": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssueBean"
            }
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": 50
          },
          "names": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{}"
            },
            "example": {}
          },
          "schema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonTypeBean"
            },
            "example": {}
          },
          "startAt": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "warningMessages": {
            "uniqueItems": true,
            "type": "array",
            "example": [],
            "items": {
              "type": "string",
              "example": "[]"
            }
          }
        },
        "example": null
      },
      "SimpleLinkBean": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "example": "/secure/EditIssue!default.jspa?id=10000"
          },
          "iconClass": {
            "type": "string",
            "example": "aui-icon aui-icon-small aui-iconfont-edit"
          },
          "id": {
            "type": "string",
            "example": "edit-issue"
          },
          "label": {
            "type": "string",
            "example": "Edit"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{'iconClass':'aui-icon aui-icon-small aui-iconfont-edit'}"
            },
            "example": "{'iconClass':'aui-icon aui-icon-small aui-iconfont-edit'}"
          },
          "styleClass": {
            "type": "string",
            "example": "edit-cls"
          },
          "title": {
            "type": "string",
            "example": "Click to Edit the Issue"
          },
          "weight": {
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        },
        "example": null,
        "xml": {
          "name": "link"
        }
      },
      "SprintBean": {
        "type": "object",
        "properties": {
          "activatedDate": {
            "type": "string",
            "example": "2015-04-11T15:22:00.000+10:00"
          },
          "autoStartStop": {
            "type": "boolean",
            "example": true
          },
          "completeDate": {
            "type": "string",
            "example": "2015-04-20T11:04:00.000+10:00"
          },
          "endDate": {
            "type": "string",
            "example": "2015-04-20T01:22:00.000+10:00"
          },
          "goal": {
            "type": "string",
            "example": "Goal for the sprint"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          },
          "incompleteIssuesDestinationId": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          },
          "name": {
            "type": "string",
            "example": "Sprint 1"
          },
          "originBoardId": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/agile/1.0/sprint/10001"
          },
          "startDate": {
            "type": "string",
            "example": "2015-04-11T15:22:00.000+10:00"
          },
          "state": {
            "type": "string",
            "example": "active"
          },
          "synced": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null
      },
      "SprintCreateBean": {
        "type": "object",
        "properties": {
          "autoStartStop": {
            "type": "boolean",
            "example": true
          },
          "endDate": {
            "type": "string",
            "example": "2015-04-20T01:22:00.000+10:00"
          },
          "goal": {
            "type": "string",
            "example": "Goal for the sprint"
          },
          "incompleteIssuesDestinationId": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          },
          "name": {
            "type": "string",
            "example": "Sprint 1"
          },
          "originBoardId": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "startDate": {
            "type": "string",
            "example": "2015-04-11T15:22:00.000+10:00"
          },
          "synced": {
            "type": "boolean",
            "example": true
          },
          "userProfileTimeZone": {
            "type": "string",
            "example": "Australia/Sydney"
          }
        },
        "example": null
      },
      "SprintSwapBean": {
        "type": "object",
        "properties": {
          "sprintToSwapWith": {
            "type": "integer",
            "format": "int64",
            "example": 3
          },
          "swap": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true,
            "example": null
          }
        },
        "example": null
      },
      "StatusCategoryJsonBean": {
        "type": "object",
        "properties": {
          "colorName": {
            "type": "string",
            "example": "blue-gray"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "key": {
            "type": "string",
            "example": "new"
          },
          "name": {
            "type": "string",
            "example": "To Do"
          },
          "self": {
            "type": "string",
            "example": "http://localhost:8090/jira/rest/api/2.0/statuscategory/1"
          }
        },
        "example": null
      },
      "StatusJsonBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "The issue is currently being worked on."
          },
          "iconUrl": {
            "type": "string",
            "example": "http://localhost:8090/jira/images/icons/progress.gif"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "name": {
            "type": "string",
            "example": "In Progress"
          },
          "self": {
            "type": "string",
            "example": "http://localhost:8090/jira/rest/api/2.0/status/10000"
          },
          "statusCategory": {
            "$ref": "#/components/schemas/StatusCategoryJsonBean"
          },
          "statusColor": {
            "type": "string",
            "example": "green"
          }
        },
        "example": null
      },
      "StringList": {
        "type": "object",
        "example": null
      },
      "SubqueryBean": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "example": "project = HSP"
          }
        },
        "example": null
      },
      "TransitionBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Close the issue."
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldMetaBean"
            },
            "example": null
          },
          "id": {
            "type": "string",
            "example": "2"
          },
          "name": {
            "type": "string",
            "example": "Close Issue"
          },
          "opsbarSequence": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "to": {
            "$ref": "#/components/schemas/StatusJsonBean"
          }
        },
        "example": null
      },
      "UnmapSprintsBean": {
        "type": "object",
        "properties": {
          "sprintIds": {
            "type": "array",
            "example": [
              10001,
              10004,
              10005
            ],
            "items": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        },
        "example": null
      },
      "UserJsonBean": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "example": true
          },
          "avatarUrls": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000"
            },
            "example": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000"
          },
          "displayName": {
            "type": "string",
            "example": "Fred F. User"
          },
          "emailAddress": {
            "type": "string",
            "example": "fred@example.com"
          },
          "key": {
            "type": "string",
            "example": "fred"
          },
          "name": {
            "type": "string",
            "example": "Fred"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/user?username=fred"
          },
          "timeZone": {
            "type": "string",
            "example": "Australia/Sydney"
          }
        },
        "example": null
      },
      "VersionBean": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean",
            "example": false
          },
          "description": {
            "type": "string",
            "example": "An excellent version"
          },
          "expand": {
            "type": "string",
            "example": "10000",
            "xml": {
              "attribute": true
            }
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "moveUnfixedIssuesTo": {
            "type": "string",
            "format": "uri",
            "example": "http://localhost:8090/jira/rest/api/2/version/10000/move"
          },
          "name": {
            "type": "string",
            "example": "New Version 1"
          },
          "overdue": {
            "type": "boolean",
            "example": true
          },
          "project": {
            "type": "string",
            "example": "PXA"
          },
          "projectId": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "releaseDate": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "releaseDateSet": {
            "type": "boolean",
            "example": false
          },
          "released": {
            "type": "boolean",
            "example": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://localhost:8090/jira/rest/api/2/version/10000"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "startDateSet": {
            "type": "boolean",
            "example": false
          },
          "userReleaseDate": {
            "type": "string",
            "example": "2012-09-15T21:11:01.834+0000"
          },
          "userStartDate": {
            "type": "string",
            "example": "2012-08-15T21:11:01.834+0000"
          }
        },
        "example": null,
        "xml": {
          "name": "version"
        }
      },
      "AppTypeBean": {
        "type": "object",
        "properties": {
          "i18nKey": {
            "type": "string",
            "example": null
          },
          "iconUrl": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "BlogBean": {
        "type": "object",
        "example": null,
        "xml": {
          "name": "blog"
        }
      },
      "CreateIndexBean": {
        "type": "object",
        "properties": {
          "entityName": {
            "type": "string",
            "example": null
          },
          "fieldNameToColumnName": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": null
            },
            "example": null
          },
          "indexName": {
            "type": "string",
            "example": null
          },
          "tableName": {
            "type": "string",
            "example": null
          },
          "unique": {
            "type": "boolean",
            "example": null
          }
        },
        "example": null
      },
      "EntityList": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/EntityRefBean"
            }
          }
        },
        "example": null
      },
      "EntityRefBean": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "type": {
            "$ref": "#/components/schemas/EntityTypeBean"
          }
        },
        "example": null
      },
      "EntityTypeBean": {
        "type": "object",
        "properties": {
          "applicationTypeClassName": {
            "type": "string",
            "example": null
          },
          "i18nKey": {
            "type": "string",
            "example": null
          },
          "iconUrl": {
            "type": "string",
            "example": null
          },
          "pluralizedI18nKey": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "EntityVersionBean": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "example": null
          },
          "entityId": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "entityType": {
            "type": "string",
            "example": null
          },
          "entityVersion": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "hasVersion": {
            "type": "boolean",
            "example": null
          },
          "parentIssueId": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "updateTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          }
        },
        "example": null
      },
      "JobBean": {
        "type": "object",
        "properties": {
          "cronExpression": {
            "type": "string",
            "example": null
          },
          "firstRunTime": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "intervalInMillis": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "jobId": {
            "type": "string",
            "example": null
          },
          "jobRunnerKey": {
            "type": "string",
            "example": null
          },
          "nextRunTime": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "runMode": {
            "type": "string",
            "example": null
          },
          "runnable": {
            "type": "boolean",
            "example": null
          },
          "scheduleType": {
            "type": "string",
            "example": null
          },
          "timeZoneId": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "JobRunBean": {
        "type": "object",
        "properties": {
          "durationInMillis": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "message": {
            "type": "string",
            "example": null
          },
          "runOutcome": {
            "type": "string",
            "example": null
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          }
        },
        "example": null
      },
      "PatternRepresentation": {
        "type": "object",
        "properties": {
          "delay": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "enabled": {
            "type": "boolean",
            "example": null
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "pattern": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "PermissionBean": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "example": null
          },
          "permType": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "PrioritySchemeResponse": {
        "type": "object",
        "properties": {
          "defaultPriority": {
            "type": "string",
            "example": null
          },
          "description": {
            "type": "string",
            "example": null
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "priorities": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          }
        },
        "example": null
      },
      "ProductLicenseTO": {
        "type": "object",
        "properties": {
          "isUnlimitedNumberOfUsers": {
            "type": "boolean",
            "example": null
          },
          "licenseKey": {
            "type": "string",
            "example": null
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string",
                "example": null
              },
              "displayCountry": {
                "type": "string",
                "example": null
              },
              "displayLanguage": {
                "type": "string",
                "example": null
              },
              "displayName": {
                "type": "string",
                "example": null
              },
              "displayScript": {
                "type": "string",
                "example": null
              },
              "displayVariant": {
                "type": "string",
                "example": null
              },
              "extensionKeys": {
                "uniqueItems": true,
                "type": "array",
                "example": null,
                "items": {
                  "type": "string",
                  "example": null
                }
              },
              "iso3Country": {
                "type": "string",
                "example": null
              },
              "iso3Language": {
                "type": "string",
                "example": null
              },
              "language": {
                "type": "string",
                "example": null
              },
              "script": {
                "type": "string",
                "example": null
              },
              "unicodeLocaleAttributes": {
                "uniqueItems": true,
                "type": "array",
                "example": null,
                "items": {
                  "type": "string",
                  "example": null
                }
              },
              "unicodeLocaleKeys": {
                "uniqueItems": true,
                "type": "array",
                "example": null,
                "items": {
                  "type": "string",
                  "example": null
                }
              },
              "variant": {
                "type": "string",
                "example": null
              }
            },
            "example": null
          },
          "numberOfUsers": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "productDisplayName": {
            "type": "string",
            "example": null
          },
          "productKey": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "ProjectInputBean": {
        "type": "object",
        "properties": {
          "assigneeType": {
            "type": "string",
            "example": "PROJECT_LEAD",
            "enum": [
              "PROJECT_LEAD",
              "UNASSIGNED"
            ]
          },
          "avatarId": {
            "type": "integer",
            "format": "int64",
            "example": 10200
          },
          "categoryId": {
            "type": "integer",
            "format": "int64",
            "example": 10120
          },
          "description": {
            "type": "string",
            "example": "Example Project description"
          },
          "issueSecurityScheme": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          },
          "key": {
            "type": "string",
            "example": "EX"
          },
          "lead": {
            "type": "string",
            "example": "Charlie"
          },
          "name": {
            "type": "string",
            "example": "Example"
          },
          "notificationScheme": {
            "type": "integer",
            "format": "int64",
            "example": 10021
          },
          "permissionScheme": {
            "type": "integer",
            "format": "int64",
            "example": 10011
          },
          "projectTemplateKey": {
            "type": "string",
            "example": "com.atlassian.jira-core-project-templates:jira-core-project-management"
          },
          "projectTypeKey": {
            "type": "string",
            "example": "business"
          },
          "url": {
            "type": "string",
            "example": "http://atlassian.com"
          },
          "workflowSchemeId": {
            "type": "integer",
            "format": "int64",
            "example": 10031
          }
        },
        "example": null
      },
      "RegisterItemHolder": {
        "type": "object",
        "properties": {
          "isLocked": {
            "type": "boolean",
            "example": null
          },
          "isManaged": {
            "type": "boolean",
            "example": null
          }
        },
        "example": null
      },
      "Gadget": {
        "type": "object",
        "properties": {
          "filterId": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "filterName": {
            "type": "string",
            "example": null
          },
          "gadgetUri": {
            "type": "string",
            "format": "uri",
            "example": null
          },
          "jql": {
            "type": "string",
            "example": null
          },
          "portalId": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "userPrefs": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": null
            },
            "example": null
          }
        },
        "example": null
      },
      "Tooltip": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "TypeParameter": {
        "type": "object",
        "example": null
      },
      "AssignIssueTypesRequest": {
        "type": "object",
        "properties": {
          "issueTypes": {
            "type": "array",
            "writeOnly": true,
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "name": {
            "type": "string",
            "writeOnly": true,
            "example": null
          },
          "valid": {
            "type": "boolean",
            "example": null
          }
        },
        "example": null
      },
      "IssueContextParam": {
        "type": "object",
        "properties": {
          "issueTypeId": {
            "type": "string",
            "example": null
          },
          "projectId": {
            "type": "integer",
            "format": "int64",
            "example": null
          }
        },
        "example": null
      },
      "Option": {
        "type": "object",
        "properties": {
          "childOptions": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/Option"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "optionId": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "value": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "OptionsSettings": {
        "type": "object",
        "properties": {
          "issueContext": {
            "$ref": "#/components/schemas/IssueContextParam"
          },
          "options": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/Option"
            }
          }
        },
        "example": null
      },
      "RemoveWorkflowRequest": {
        "type": "object",
        "properties": {
          "nextDefaultWorkflow": {
            "type": "string",
            "example": null
          },
          "workflow": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "WorkflowSchemeRequest": {
        "type": "object",
        "properties": {
          "defaultWorkflow": {
            "type": "boolean",
            "example": null
          },
          "issueTypes": {
            "uniqueItems": true,
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "workflow": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "ShareBean": {
        "type": "object",
        "properties": {
          "emails": {
            "uniqueItems": true,
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "jql": {
            "type": "string",
            "example": null
          },
          "message": {
            "type": "string",
            "example": null
          },
          "usernames": {
            "uniqueItems": true,
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          }
        },
        "example": null,
        "xml": {
          "name": "share-search"
        }
      },
      "RestInvocationHistory": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean",
            "example": null
          }
        },
        "additionalProperties": {
          "type": "object",
          "example": null
        },
        "example": null
      },
      "RestWebhook": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "example": null
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": null
            },
            "example": null
          },
          "credentials": {
            "$ref": "#/components/schemas/RestWebhookCredentials"
          },
          "empty": {
            "type": "boolean",
            "example": null
          },
          "events": {
            "uniqueItems": true,
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "name": {
            "type": "string",
            "example": null
          },
          "scopeType": {
            "type": "string",
            "example": null
          },
          "sslVerificationRequired": {
            "type": "boolean",
            "example": null
          },
          "statistics": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean",
                "example": null
              }
            },
            "additionalProperties": {
              "type": "object",
              "example": null
            },
            "writeOnly": true,
            "example": null
          },
          "url": {
            "type": "string",
            "example": null
          }
        },
        "additionalProperties": {
          "type": "object",
          "example": null
        },
        "example": null
      },
      "RestWebhookCredentials": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean",
            "example": null
          },
          "password": {
            "type": "string",
            "example": null
          },
          "username": {
            "type": "string",
            "example": null
          }
        },
        "additionalProperties": {
          "type": "object",
          "example": null
        },
        "example": null
      },
      "A11yPersonalSettingBean": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": null
          },
          "key": {
            "type": "string",
            "example": "a11y-setting-underlined-links"
          }
        },
        "example": null
      },
      "ActiveCategory": {
        "type": "object",
        "properties": {
          "current": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "ActorInputBean": {
        "type": "object",
        "properties": {
          "group": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "user": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          }
        },
        "example": null
      },
      "ActorsMap": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean",
            "example": null
          }
        },
        "additionalProperties": {
          "type": "array",
          "example": null,
          "items": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "AddFieldBean": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string",
            "example": "summary"
          }
        },
        "example": null
      },
      "AddGroupBean": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "AddReactionRequestBean": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "emojiId": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "AdminHistoryLink": {
        "type": "object",
        "example": null
      },
      "AffectedEntityBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "User Profile"
          },
          "numberOfOccurrences": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "type": "string",
            "example": "ANONYMIZE",
            "enum": [
              "ANONYMIZE",
              "TRANSFER_OWNERSHIP",
              "REMOVE",
              "MANUAL"
            ]
          },
          "uri": {
            "type": "string",
            "example": "/jira/secure/ViewProfile.jspa?name=fred"
          },
          "uriDisplayName": {
            "type": "string",
            "example": "User Profile"
          }
        },
        "example": null
      },
      "AppMonitoringRestEntity": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": null
          }
        },
        "example": null
      },
      "Application": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My Acme Tracker"
          },
          "type": {
            "type": "string",
            "example": "com.acme.tracker"
          }
        },
        "example": null
      },
      "ApplicationPropertyBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "jira.home"
          },
          "value": {
            "type": "string",
            "example": "/var/jira/jira-home"
          }
        },
        "example": null,
        "xml": {
          "name": "applicationProperty"
        }
      },
      "ApplicationRoleBean": {
        "type": "object",
        "properties": {
          "defaultGroups": {
            "uniqueItems": true,
            "type": "array",
            "example": [
              "jira-software-users"
            ],
            "items": {
              "type": "string",
              "example": "[\"jira-software-users\"]"
            }
          },
          "defined": {
            "type": "boolean",
            "example": false
          },
          "groups": {
            "uniqueItems": true,
            "type": "array",
            "example": [
              "jira-software-users",
              "jira-testers"
            ],
            "items": {
              "type": "string",
              "example": "[\"jira-software-users\",\"jira-testers\"]"
            }
          },
          "hasUnlimitedSeats": {
            "type": "boolean",
            "example": false
          },
          "key": {
            "type": "string",
            "example": "jira-software"
          },
          "name": {
            "type": "string",
            "example": "Jira Software"
          },
          "numberOfSeats": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "platform": {
            "type": "boolean",
            "example": false
          },
          "remainingSeats": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "selectedByDefault": {
            "type": "boolean",
            "example": false
          },
          "userCount": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "userCountDescription": {
            "type": "string",
            "example": "5 developers"
          }
        },
        "example": null
      },
      "AssociateProjectsBean": {
        "type": "object",
        "properties": {
          "idsOrKeys": {
            "type": "array",
            "example": [
              "100034",
              "13543",
              "FOOPROJ",
              "BAZZPROJ"
            ],
            "items": {
              "type": "string",
              "example": "[\"100034\",\"13543\",\"FOOPROJ\",\"BAZZPROJ\"]"
            }
          }
        },
        "example": null
      },
      "AttachmentArchiveEntry": {
        "type": "object",
        "properties": {
          "abbreviatedName": {
            "type": "string",
            "example": null
          },
          "entryIndex": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "mediaType": {
            "type": "string",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "example": null
          }
        },
        "example": [
          {
            "entryIndex": 0,
            "name": "Allegro from Duet in C Major.mp3",
            "size": 1430174,
            "mediaType": "audio/mpeg"
          },
          {
            "entryIndex": 1,
            "name": "lrm.rtf",
            "size": 331,
            "mediaType": "text/rtf"
          }
        ]
      },
      "AttachmentArchiveImpl": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "example": [
              {
                "entryIndex": 0,
                "name": "Allegro from Duet in C Major.mp3",
                "size": 1430174,
                "mediaType": "audio/mpeg"
              },
              {
                "entryIndex": 1,
                "name": "lrm.rtf",
                "size": 331,
                "mediaType": "text/rtf"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AttachmentArchiveEntry"
            }
          },
          "totalEntryCount": {
            "type": "integer",
            "description": "Total number of entries available (can be larger that what was asked for)",
            "format": "int32",
            "example": 24
          }
        },
        "example": null
      },
      "AttachmentBean": {
        "type": "object",
        "example": null,
        "xml": {
          "name": "attachment"
        }
      },
      "AttachmentJsonBean": {
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserJsonBean"
          },
          "content": {
            "type": "string",
            "example": null
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "filename": {
            "type": "string",
            "example": null
          },
          "id": {
            "type": "string",
            "example": null
          },
          "mimeType": {
            "type": "string",
            "example": null
          },
          "self": {
            "type": "string",
            "example": null
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "thumbnail": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "AttachmentMetaBean": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "uploadLimit": {
            "type": "integer",
            "description": "Upload limit in bytes",
            "format": "int64",
            "example": 1000000
          }
        },
        "example": null
      },
      "AuthParams": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": null
          },
          "username": {
            "type": "string",
            "example": null
          }
        },
        "example": null,
        "xml": {
          "name": "session"
        }
      },
      "AuthSuccess": {
        "type": "object",
        "properties": {
          "loginInfo": {
            "$ref": "#/components/schemas/LoginInfo"
          },
          "session": {
            "$ref": "#/components/schemas/SessionInfo"
          }
        },
        "example": null,
        "xml": {
          "name": "authSuccess"
        }
      },
      "AutoCompleteResponseBean": {
        "type": "object",
        "properties": {
          "jqlReservedWords": {
            "type": "array",
            "example": [
              "empty",
              "and",
              "or",
              "in",
              "distinct"
            ],
            "items": {
              "type": "string",
              "example": "[\"empty\",\"and\",\"or\",\"in\",\"distinct\"]"
            }
          },
          "visibleFieldNames": {
            "type": "array",
            "example": [
              {
                "value": "affectedVersion",
                "displayName": "affectedVersion",
                "auto": "true",
                "orderable": "true",
                "searchable": "true",
                "operators": [
                  "=",
                  "!=",
                  "in",
                  "not in",
                  "is",
                  "is not",
                  "<",
                  "<=",
                  ">",
                  ">="
                ],
                "types": [
                  "com.atlassian.crowd.embedded.api.User"
                ]
              },
              {
                "value": "assignee",
                "displayName": "assignee",
                "auto": "true",
                "orderable": "true",
                "searchable": "true",
                "operators": [
                  "!=",
                  "was not in",
                  "not in",
                  "was not",
                  "is",
                  "was in",
                  "was",
                  "=",
                  "in",
                  "changed",
                  "is not"
                ],
                "types": [
                  "com.atlassian.crowd.embedded.api.User"
                ]
              }
            ],
            "items": {
              "type": "string",
              "example": "[{\"value\":\"affectedVersion\",\"displayName\":\"affectedVersion\",\"auto\":\"true\",\"orderable\":\"true\",\"searchable\":\"true\",\"operators\":[\"=\",\"!=\",\"in\",\"not in\",\"is\",\"is not\",\"<\",\"<=\",\">\",\">=\"],\"types\":[\"com.atlassian.crowd.embedded.api.User\"]},{\"value\":\"assignee\",\"displayName\":\"assignee\",\"auto\":\"true\",\"orderable\":\"true\",\"searchable\":\"true\",\"operators\":[\"!=\",\"was not in\",\"not in\",\"was not\",\"is\",\"was in\",\"was\",\"=\",\"in\",\"changed\",\"is not\"],\"types\":[\"com.atlassian.crowd.embedded.api.User\"]}]"
            }
          },
          "visibleFunctionNames": {
            "type": "array",
            "example": [
              {
                "value": "currentLogin()",
                "displayName": "currentLogin()",
                "types": [
                  "java.util.Date"
                ]
              },
              {
                "value": "currentUser()",
                "displayName": "currentUser()",
                "types": [
                  "com.atlassian.crowd.embedded.api.User"
                ]
              }
            ],
            "items": {
              "type": "string",
              "example": "[{\"value\":\"currentLogin()\",\"displayName\":\"currentLogin()\",\"types\":[\"java.util.Date\"]},{\"value\":\"currentUser()\",\"displayName\":\"currentUser()\",\"types\":[\"com.atlassian.crowd.embedded.api.User\"]}]"
            }
          }
        },
        "example": null
      },
      "AutoCompleteResultWrapper": {
        "type": "object",
        "example": null
      },
      "AvailableIssueTypesRequestBean": {
        "type": "object",
        "properties": {
          "ignoredIssueTypeIds": {
            "uniqueItems": true,
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          }
        },
        "example": null
      },
      "AvailableProjectsPaginatedBean": {
        "type": "object",
        "properties": {
          "results": {
            "$ref": "#/components/schemas/PageBeanProjectBean"
          }
        },
        "example": null
      },
      "AvailableProjectsRequestBean": {
        "type": "object",
        "properties": {
          "ignoredProjectIds": {
            "uniqueItems": true,
            "type": "array",
            "example": [
              "10000"
            ],
            "items": {
              "type": "string",
              "example": "[\"10000\"]"
            }
          }
        },
        "example": null
      },
      "AvatarBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1000"
          },
          "owner": {
            "type": "string",
            "example": "fred"
          },
          "selected": {
            "type": "boolean",
            "example": null
          }
        },
        "example": null,
        "xml": {
          "name": "avatar"
        }
      },
      "AvatarCroppingBean": {
        "type": "object",
        "properties": {
          "cropperOffsetX": {
            "type": "integer",
            "format": "int32",
            "example": 50
          },
          "cropperOffsetY": {
            "type": "integer",
            "format": "int32",
            "example": 50
          },
          "cropperWidth": {
            "type": "integer",
            "format": "int32",
            "example": 120
          },
          "needsCropping": {
            "type": "boolean",
            "example": true
          },
          "url": {
            "type": "string",
            "example": "http://example.com/jira/secure/temporaryavatar?cropped=true"
          }
        },
        "example": null
      },
      "BulkDeleteResponseBean": {
        "type": "object",
        "properties": {
          "deletedCustomFields": {
            "type": "array",
            "example": [
              "customfield_10000"
            ],
            "items": {
              "type": "string",
              "example": "[\"customfield_10000\"]"
            }
          },
          "message": {
            "type": "string",
            "example": "Custom fields bulk delete operation finished."
          },
          "notDeletedCustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{\"customfield_10001\":\"Validation for custom field deletion failed.\"}"
            },
            "example": {
              "customfield_10001": "Validation for custom field deletion failed."
            }
          }
        },
        "example": null,
        "xml": {
          "name": "customFields"
        }
      },
      "BulkOperationErrorResult": {
        "type": "object",
        "properties": {
          "elementErrors": {
            "$ref": "#/components/schemas/ErrorCollection"
          },
          "failedElementNumber": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "example": null
          }
        },
        "example": null
      },
      "ClusterLockStatusBean": {
        "type": "object",
        "properties": {
          "holdingLockSec": {
            "type": "string",
            "example": null
          },
          "lockName": {
            "type": "string",
            "example": null
          },
          "lockedByNode": {
            "type": "string",
            "example": null
          },
          "updateTime": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "ClusterLockStatusesBean": {
        "type": "object",
        "properties": {
          "clusterLocks": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ClusterLockStatusBean"
            }
          }
        },
        "example": null
      },
      "ClusterState": {
        "type": "object",
        "properties": {
          "build": {
            "$ref": "#/components/schemas/NodeBuildInfo"
          },
          "state": {
            "type": "string",
            "example": "UPGRADE_IN_PROGRESS",
            "enum": [
              "STABLE",
              "READY_TO_UPGRADE",
              "MIXED",
              "READY_TO_RUN_UPGRADE_TASKS",
              "RUNNING_UPGRADE_TASKS",
              "UPGRADE_TASKS_FAILED"
            ]
          }
        },
        "example": null
      },
      "ColumnLayout": {
        "type": "object",
        "properties": {
          "columnConfig": {
            "type": "string",
            "example": null,
            "enum": [
              "SYSTEM",
              "EXPLICIT",
              "FILTER",
              "USER",
              "NONE"
            ]
          },
          "columnLayoutItems": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ColumnLayoutItem"
            }
          }
        },
        "example": null
      },
      "ColumnLayoutItem": {
        "type": "object",
        "properties": {
          "columnHeadingKey": {
            "type": "string",
            "example": null
          },
          "id": {
            "type": "string",
            "example": null
          },
          "navigableField": {
            "$ref": "#/components/schemas/NavigableField"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "example": null
          }
        },
        "example": null
      },
      "ColumnOptions": {
        "type": "object",
        "example": null
      },
      "ColumnsBean": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          }
        },
        "example": null
      },
      "CommentJsonBean": {
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserJsonBean"
          },
          "body": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."
          },
          "created": {
            "type": "string",
            "example": "2012-07-06T18:30:00.000+0000"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "properties": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/EntityPropertyBean"
            }
          },
          "renderedBody": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/issue/10010/comment/10000"
          },
          "updateAuthor": {
            "$ref": "#/components/schemas/UserJsonBean"
          },
          "updated": {
            "type": "string",
            "example": "2012-07-06T18:30:00.000+0000"
          },
          "visibility": {
            "$ref": "#/components/schemas/VisibilityJsonBean"
          }
        },
        "example": null
      },
      "CommentsWithPaginationJsonBean": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/CommentJsonBean"
            }
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": 50
          },
          "startAt": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        },
        "example": null
      },
      "ComponentBean": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean",
            "example": false
          },
          "assigneeType": {
            "type": "string",
            "example": "PROJECT_LEAD",
            "enum": [
              "PROJECT_DEFAULT",
              "COMPONENT_LEAD",
              "PROJECT_LEAD",
              "UNASSIGNED"
            ]
          },
          "deleted": {
            "type": "boolean",
            "example": false
          },
          "description": {
            "type": "string",
            "example": "This is a Jira component"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "lead": {
            "$ref": "#/components/schemas/UserBean"
          },
          "leadUserName": {
            "type": "string",
            "example": "fred"
          },
          "name": {
            "type": "string",
            "example": "Component 1"
          },
          "project": {
            "type": "string",
            "example": "HSP"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/component/10000"
          }
        },
        "example": null,
        "xml": {
          "name": "component"
        }
      },
      "ComponentIssueCountsBean": {
        "type": "object",
        "properties": {
          "issueCount": {
            "type": "integer",
            "format": "int64",
            "example": 23
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/component/10000"
          }
        },
        "example": null,
        "xml": {
          "name": "component"
        }
      },
      "ConfigurationBean": {
        "type": "object",
        "properties": {
          "attachmentsEnabled": {
            "type": "boolean",
            "example": true
          },
          "issueLinkingEnabled": {
            "type": "boolean",
            "example": true
          },
          "subTasksEnabled": {
            "type": "boolean",
            "example": false
          },
          "timeTrackingConfiguration": {
            "$ref": "#/components/schemas/TimeTrackingConfigurationBean"
          },
          "timeTrackingEnabled": {
            "type": "boolean",
            "example": true
          },
          "unassignedIssuesAllowed": {
            "type": "boolean",
            "example": false
          },
          "votingEnabled": {
            "type": "boolean",
            "example": true
          },
          "watchingEnabled": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null
      },
      "ContentToRender": {
        "type": "object",
        "example": null
      },
      "CreateMetaIssueTypeBean": {
        "type": "object",
        "properties": {
          "avatarId": {
            "type": "integer",
            "format": "int64",
            "example": 10002
          },
          "description": {
            "type": "string",
            "example": "A problem which impairs or prevents the functions of the product."
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldMetaBean"
            },
            "writeOnly": true,
            "example": null
          },
          "iconUrl": {
            "type": "string",
            "example": "http://www.example.com/jira/images/icons/issuetypes/bug.png"
          },
          "id": {
            "type": "string",
            "example": "1"
          },
          "name": {
            "type": "string",
            "example": "Bug"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/issuetype/1"
          },
          "subtask": {
            "type": "boolean",
            "example": false
          }
        },
        "example": null
      },
      "CreateUpdateRoleRequestBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "role description"
          },
          "name": {
            "type": "string",
            "example": "MyRole"
          }
        },
        "example": null
      },
      "CurrentUser": {
        "type": "object",
        "example": null,
        "xml": {
          "name": "currentUser"
        }
      },
      "CustomFieldBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Custom field for picking groups"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "isAllProjects": {
            "type": "boolean",
            "example": false
          },
          "isLocked": {
            "type": "boolean",
            "example": false
          },
          "isManaged": {
            "type": "boolean",
            "example": false
          },
          "isTrusted": {
            "type": "boolean",
            "example": true
          },
          "issueTypeIds": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "issuesWithValue": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "lastValueUpdate": {
            "type": "string",
            "format": "date-time",
            "example": "2018-11-01T12:00:00Z"
          },
          "name": {
            "type": "string",
            "example": "New custom field"
          },
          "numericId": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "projectIds": {
            "type": "array",
            "example": [
              10000,
              10001
            ],
            "items": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          "projectsCount": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "screensCount": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "searcherKey": {
            "type": "string",
            "example": "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://localhost:8090/jira/rest/api/2.0/customField/10000"
          },
          "type": {
            "type": "string",
            "example": "com.atlassian.jira.plugin.system.customfieldtypes:grouppicker"
          }
        },
        "example": null,
        "xml": {
          "name": "customField"
        }
      },
      "CustomFieldDefinitionJsonBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Custom field for picking groups"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "issueTypeIds": {
            "type": "array",
            "example": [
              "1",
              "2"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\"]"
            }
          },
          "name": {
            "type": "string",
            "example": "New custom field"
          },
          "projectIds": {
            "type": "array",
            "example": [
              10000,
              10001
            ],
            "items": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          "searcherKey": {
            "type": "string",
            "example": "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://localhost:8090/jira/rest/api/2.0/customField/10000"
          },
          "type": {
            "type": "string",
            "example": "com.atlassian.jira.plugin.system.customfieldtypes:grouppicker"
          }
        },
        "example": null
      },
      "CustomFieldOptionBean": {
        "type": "object",
        "properties": {
          "childrenIds": {
            "type": "array",
            "example": [
              4,
              5
            ],
            "items": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          "disabled": {
            "type": "boolean",
            "example": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 3
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://localhost:8090/jira/rest/api/2.0/customFieldOption/3"
          },
          "value": {
            "type": "string",
            "example": "Blue"
          }
        },
        "example": null,
        "xml": {
          "name": "customFieldOption"
        }
      },
      "CustomFieldOptionsBean": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/CustomFieldOptionBean"
            }
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        },
        "example": null
      },
      "CustomFieldReplacement": {
        "type": "object",
        "properties": {
          "customFieldId": {
            "type": "integer",
            "format": "int64",
            "example": 2002
          },
          "moveTo": {
            "type": "integer",
            "format": "int64",
            "example": 10003
          }
        },
        "example": null
      },
      "DarkFeaturePropertyBean": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": null
          }
        },
        "example": null,
        "xml": {
          "name": "darkFeatureProperty"
        }
      },
      "DarkFeaturesBean": {
        "type": "object",
        "properties": {
          "siteFeatures": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DarkFeaturePropertyBean"
            },
            "example": null
          },
          "systemFeatures": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DarkFeaturePropertyBean"
            },
            "example": null
          }
        },
        "example": null
      },
      "DashboardBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "10000"
          },
          "name": {
            "type": "string",
            "example": "System Dashboard"
          },
          "self": {
            "type": "string",
            "example": "http://localhost:8090/jira/rest/api/2.0/dashboard/10000"
          },
          "view": {
            "type": "string",
            "example": "http://localhost:8090/jira/secure/Dashboard.jspa?selectPageId=10000"
          }
        },
        "example": null
      },
      "DashboardsBean": {
        "type": "object",
        "properties": {
          "dashboards": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/DashboardBean"
            }
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "next": {
            "type": "string",
            "example": "http://localhost:8090/jira/rest/api/2.0/dashboard?startAt=10"
          },
          "prev": {
            "type": "string",
            "example": "http://localhost:8090/jira/rest/api/2.0/dashboard?startAt=0"
          },
          "startAt": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": 143
          }
        },
        "example": null
      },
      "DefaultBean": {
        "type": "object",
        "properties": {
          "updateDraftIfNeeded": {
            "type": "boolean",
            "example": null
          },
          "workflow": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "DefaultShareScopeBean": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "example": "AUTHENTICATED",
            "enum": [
              "GLOBAL",
              "AUTHENTICATED",
              "PRIVATE"
            ]
          }
        },
        "example": null,
        "xml": {
          "name": "defaultShareScope"
        }
      },
      "DeleteAndReplaceVersionBean": {
        "type": "object",
        "properties": {
          "customFieldReplacementList": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/CustomFieldReplacement"
            }
          },
          "moveAffectedIssuesTo": {
            "type": "integer",
            "format": "int64",
            "example": 10002
          },
          "moveFixIssuesTo": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          }
        },
        "example": null
      },
      "EditorMarkupParameters": {
        "required": [
          "fieldId"
        ],
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string",
            "example": null
          },
          "fieldName": {
            "type": "string",
            "example": null
          },
          "issueKey": {
            "type": "string",
            "example": null
          },
          "value": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "ErrorCollection": {
        "type": "object",
        "properties": {
          "errorMessages": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": null
            },
            "example": null
          }
        },
        "example": null
      },
      "FieldBean": {
        "type": "object",
        "properties": {
          "clauseNames": {
            "uniqueItems": true,
            "type": "array",
            "example": "[description]",
            "items": {
              "type": "string",
              "example": "[description]"
            }
          },
          "custom": {
            "type": "boolean",
            "example": false
          },
          "id": {
            "type": "string",
            "example": "description"
          },
          "name": {
            "type": "string",
            "example": "Description"
          },
          "navigable": {
            "type": "boolean",
            "example": true
          },
          "orderable": {
            "type": "boolean",
            "example": true
          },
          "schema": {
            "$ref": "#/components/schemas/JsonTypeBean"
          },
          "searchable": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null,
        "xml": {
          "name": "field"
        }
      },
      "FieldComparatorSource": {
        "type": "object",
        "example": null
      },
      "FieldConfigSchemeBean": {
        "type": "object",
        "properties": {
          "allIssueTypes": {
            "type": "boolean",
            "example": false
          },
          "allProjects": {
            "type": "boolean",
            "example": false
          },
          "defaultValue": {
            "type": "object",
            "example": null
          },
          "description": {
            "type": "string",
            "example": "A context for Bug and Task issue type"
          },
          "field": {
            "$ref": "#/components/schemas/FieldBean"
          },
          "fieldConfigIds": {
            "type": "array",
            "example": [
              10050,
              10051
            ],
            "items": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10050
          },
          "issueTypes": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssueTypeJsonBean"
            }
          },
          "name": {
            "type": "string",
            "example": "Context for Bugs and Tasks"
          },
          "projects": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ProjectBean"
            }
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/field/description/configschemes/10050"
          }
        },
        "example": null
      },
      "FieldOperation": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "example": "set"
          },
          "value": {
            "type": "object",
            "example": "bob"
          }
        },
        "example": "\"comment\": [\n    {\n        \"add\": {\n            \"body\": \"Bug has been fixed.\"\n        }\n    }\n]"
      },
      "FieldValueLoader": {
        "type": "object",
        "properties": {
          "comparator": {
            "type": "object",
            "example": null
          }
        },
        "example": null
      },
      "Fields": {
        "type": "object",
        "properties": {
          "issuetype": {
            "$ref": "#/components/schemas/IssueTypeJsonBean"
          },
          "priority": {
            "$ref": "#/components/schemas/PriorityJsonBean"
          },
          "status": {
            "$ref": "#/components/schemas/StatusJsonBean"
          },
          "summary": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "FilePart": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "example": null
          },
          "formField": {
            "type": "boolean",
            "example": null
          },
          "inputStream": {
            "type": "object",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "value": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "FilterBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Lists all open bugs"
          },
          "editable": {
            "type": "boolean",
            "example": false
          },
          "favourite": {
            "type": "boolean",
            "example": true
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "jql": {
            "type": "string",
            "example": "type = Bug and resolution is empty"
          },
          "name": {
            "type": "string",
            "example": "All Open Bugs"
          },
          "owner": {
            "$ref": "#/components/schemas/UserBean"
          },
          "searchUrl": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/filter/10000"
          },
          "sharePermissions": {
            "type": "array",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/FilterPermissionBean"
            }
          },
          "sharedUsers": {
            "$ref": "#/components/schemas/UserBeanListWrapper"
          },
          "viewUrl": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/issues/?filter=10000"
          }
        },
        "example": null,
        "xml": {
          "name": "filter"
        }
      },
      "FilterPermissionBean": {
        "type": "object",
        "properties": {
          "edit": {
            "type": "boolean",
            "example": false
          },
          "group": {
            "$ref": "#/components/schemas/GroupJsonBean"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "project": {
            "$ref": "#/components/schemas/ProjectBean"
          },
          "role": {
            "$ref": "#/components/schemas/ProjectRoleBean"
          },
          "type": {
            "type": "string",
            "example": "global"
          },
          "user": {
            "$ref": "#/components/schemas/UserBean"
          },
          "view": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null,
        "xml": {
          "name": "filter"
        }
      },
      "GetReactionsRequestBean": {
        "type": "object",
        "properties": {
          "commentIds": {
            "type": "array",
            "example": null,
            "items": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        },
        "example": null
      },
      "GrantToPermissionInputBean": {
        "type": "object",
        "properties": {
          "securityType": {
            "type": "string",
            "example": null
          },
          "value": {
            "$ref": "#/components/schemas/OptionString"
          }
        },
        "example": null
      },
      "GroupBean": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "jira-administrators"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/group?groupname=jira-administrators"
          },
          "users": {
            "$ref": "#/components/schemas/PagedListWrapperUserJsonBeanApplicationUser"
          }
        },
        "example": null
      },
      "GroupJsonBean": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "jira-administrators"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/group?groupname=jira-administrators"
          }
        },
        "example": null
      },
      "GroupLabelBean": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "example": "jdog-developers"
          },
          "title": {
            "type": "string",
            "example": "Developers"
          },
          "type": {
            "type": "string",
            "example": "SINGLE",
            "enum": [
              "ADMIN",
              "SINGLE",
              "MULTIPLE"
            ]
          }
        },
        "example": null,
        "xml": {
          "name": "grouplabel"
        }
      },
      "GroupSuggestionBean": {
        "type": "object",
        "properties": {
          "html": {
            "type": "string",
            "example": "<b>j</b>dog-developers"
          },
          "labels": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/GroupLabelBean"
            }
          },
          "name": {
            "type": "string",
            "example": "jdog-developers"
          }
        },
        "example": null,
        "xml": {
          "name": "group"
        }
      },
      "GroupSuggestionsBean": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/GroupSuggestionBean"
            }
          },
          "header": {
            "type": "string",
            "example": "Showing 20 of 25 matching groups"
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": 25
          }
        },
        "example": null,
        "xml": {
          "name": "groupsuggestions"
        }
      },
      "HumanReadableArchive": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "object",
            "example": null
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 7237823
          },
          "mediaType": {
            "type": "string",
            "example": "application/zip"
          },
          "name": {
            "type": "string",
            "example": "images.zip"
          },
          "totalEntryCount": {
            "type": "integer",
            "format": "int64",
            "example": 39
          }
        },
        "example": null
      },
      "Icon": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "example": "http://www.mycompany.com/support/resolved.png"
          },
          "title": {
            "type": "string",
            "example": "Support Ticket"
          },
          "url16x16": {
            "type": "string",
            "example": "http://www.mycompany.com/support/ticket.png"
          }
        },
        "example": "http://www.mycompany.com/support/resolved.png"
      },
      "IdBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          }
        },
        "example": null
      },
      "IndexReplicationQueueEntryBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 16822
          },
          "replicationTime": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-08T00:49:07.842Z"
          }
        },
        "example": null
      },
      "IndexReplicationQueueSummaryBean": {
        "type": "object",
        "properties": {
          "lastConsumedOperation": {
            "$ref": "#/components/schemas/IndexReplicationQueueEntryBean"
          },
          "lastOperationInQueue": {
            "$ref": "#/components/schemas/IndexReplicationQueueEntryBean"
          },
          "queueSize": {
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        },
        "example": null
      },
      "IndexSnapshotBean": {
        "type": "object",
        "properties": {
          "absolutePath": {
            "type": "string",
            "example": "/var/atlassian/application-data/jira/caches/indexesV1/issue"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "example": 1612345678900
          }
        },
        "example": null
      },
      "IndexSnapshotPromiseBean": {
        "type": "object",
        "properties": {
          "futureAbsolutePath": {
            "type": "string",
            "example": "/home/atlassian/shared-home/export/indexsnapshots/IndexSnapshot_2021-Jul-21--2142-34-601.tar.sz"
          }
        },
        "example": null
      },
      "IndexSnapshotStatusBean": {
        "type": "object",
        "properties": {
          "running": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null
      },
      "IndexSummaryBean": {
        "type": "object",
        "properties": {
          "issueIndex": {
            "$ref": "#/components/schemas/IssueIndexSummaryBean"
          },
          "nodeId": {
            "type": "string",
            "example": "node1"
          },
          "replicationQueues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/IndexReplicationQueueSummaryBean"
            },
            "example": null
          },
          "reportTime": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-08T01:46:16.94Z"
          }
        },
        "example": null
      },
      "IpdMonitoringRestEntity": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": null
          }
        },
        "example": null
      },
      "IssueCreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": null
          },
          "key": {
            "type": "string",
            "example": null
          },
          "self": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "IssueIndexSummaryBean": {
        "type": "object",
        "properties": {
          "countInArchive": {
            "type": "integer",
            "format": "int64",
            "example": 2000
          },
          "countInDatabase": {
            "type": "integer",
            "format": "int64",
            "example": 12072
          },
          "countInIndex": {
            "type": "integer",
            "format": "int64",
            "example": 10072
          },
          "indexReadable": {
            "type": "boolean",
            "example": true
          },
          "lastUpdatedInDatabase": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-08T01:46:16.94Z"
          },
          "lastUpdatedInIndex": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-08T00:48:53Z"
          }
        },
        "example": null
      },
      "IssueInvolvementBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "assignee"
          },
          "label": {
            "type": "string",
            "example": "Assignee"
          }
        },
        "example": null,
        "xml": {
          "name": "user"
        }
      },
      "IssueLinkTypeJsonBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "10000"
          },
          "inward": {
            "type": "string",
            "example": "is duplicated by"
          },
          "name": {
            "type": "string",
            "example": "Duplicate"
          },
          "outward": {
            "type": "string",
            "example": "duplicates"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/issueLinkType/10000"
          }
        },
        "example": null
      },
      "IssueLinkTypeOrderUpdateRequest": {
        "type": "object",
        "properties": {
          "newPosition": {
            "type": "integer",
            "format": "int64",
            "example": null
          }
        },
        "example": null
      },
      "IssueLinkTypeResetOrderRequest": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "IssueLinkTypesBean": {
        "type": "object",
        "example": null,
        "xml": {
          "name": "issueLinkTypes"
        }
      },
      "IssuePickerIssue": {
        "type": "object",
        "properties": {
          "img": {
            "type": "string",
            "example": "img"
          },
          "key": {
            "type": "string",
            "example": "issueKey"
          },
          "keyHtml": {
            "type": "string",
            "example": "issueKeyHtml"
          },
          "summary": {
            "type": "string",
            "example": "summary"
          },
          "summaryText": {
            "type": "string",
            "example": "summaryText"
          }
        },
        "example": null
      },
      "IssuePickerResult": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssueSection"
            }
          }
        },
        "example": null
      },
      "IssueRefJsonBean": {
        "type": "object",
        "properties": {
          "fields": {
            "$ref": "#/components/schemas/Fields"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "key": {
            "type": "string",
            "example": "HSP-1"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/issue/10000"
          }
        },
        "example": null
      },
      "IssueSection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "id"
          },
          "issues": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssuePickerIssue"
            }
          },
          "label": {
            "type": "string",
            "example": "section"
          },
          "msg": {
            "type": "string",
            "example": "msg"
          },
          "sub": {
            "type": "string",
            "example": "sub"
          }
        },
        "example": null
      },
      "IssueSubTaskMovePositionBean": {
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "original": {
            "type": "integer",
            "format": "int64",
            "example": null
          }
        },
        "example": null
      },
      "IssueTypeCreateBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "type": {
            "type": "string",
            "example": null,
            "enum": [
              "subtask",
              "standard"
            ]
          }
        },
        "example": null
      },
      "IssueTypeJsonBean": {
        "type": "object",
        "properties": {
          "avatarId": {
            "type": "integer",
            "format": "int64",
            "example": 10002
          },
          "description": {
            "type": "string",
            "example": "A problem which impairs or prevents the functions of the product."
          },
          "iconUrl": {
            "type": "string",
            "example": "http://www.example.com/jira/images/icons/issuetypes/bug.png"
          },
          "id": {
            "type": "string",
            "example": "1"
          },
          "name": {
            "type": "string",
            "example": "Bug"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/issuetype/1"
          },
          "subtask": {
            "type": "boolean",
            "example": false
          }
        },
        "example": null
      },
      "IssueTypeMappingBean": {
        "type": "object",
        "properties": {
          "issueType": {
            "type": "string",
            "example": "10000"
          },
          "updateDraftIfNeeded": {
            "type": "boolean",
            "example": false
          },
          "workflow": {
            "type": "string",
            "example": "My Workflow"
          }
        },
        "example": null
      },
      "IssueTypeSchemeBean": {
        "type": "object",
        "properties": {
          "defaultIssueType": {
            "$ref": "#/components/schemas/IssueTypeJsonBean"
          },
          "description": {
            "type": "string",
            "example": "A brief explanation of this issue type scheme."
          },
          "expand": {
            "type": "string",
            "example": "issueTypes",
            "xml": {
              "attribute": true
            }
          },
          "id": {
            "type": "string",
            "example": "10100"
          },
          "issueTypes": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssueTypeJsonBean"
            }
          },
          "name": {
            "type": "string",
            "example": "Some grouping of issue types for the greater good."
          },
          "self": {
            "type": "string",
            "example": "http://localhost:8090/jira/rest/api/2/issuetypescheme/10100"
          }
        },
        "example": null
      },
      "IssueTypeSchemeCreateUpdateBean": {
        "type": "object",
        "properties": {
          "defaultIssueTypeId": {
            "type": "string",
            "example": "3"
          },
          "description": {
            "type": "string",
            "example": "some new description of the scheme"
          },
          "issueTypeIDs": {
            "type": "array",
            "writeOnly": true,
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "issueTypeIds": {
            "type": "array",
            "example": [
              "1",
              "4",
              "3"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"4\",\"3\"]"
            }
          },
          "name": {
            "type": "string",
            "example": "new name"
          }
        },
        "example": null
      },
      "IssueTypeSchemeListBean": {
        "type": "object",
        "properties": {
          "schemes": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssueTypeSchemeBean"
            }
          }
        },
        "example": null
      },
      "IssueTypeUpdateBean": {
        "type": "object",
        "properties": {
          "avatarId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "name": {
            "type": "string",
            "example": "name"
          }
        },
        "example": null
      },
      "IssueTypeWithStatusJsonBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "name": {
            "type": "string",
            "example": "Bug"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/issuetype/1"
          },
          "statuses": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/StatusJsonBean"
            }
          },
          "subtask": {
            "type": "boolean",
            "example": false
          }
        },
        "example": null
      },
      "IssueUpdateBean": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "example": "{\n\"assignee\": {\n    \"name\": \"bob\"\n},\n\"resolution\": {\n    \"name\": \"Fixed\"\n}"
            },
            "example": "{\n\"assignee\": {\n    \"name\": \"bob\"\n},\n\"resolution\": {\n    \"name\": \"Fixed\"\n}"
          },
          "historyMetadata": {
            "$ref": "#/components/schemas/HistoryMetadata"
          },
          "properties": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/EntityPropertyBean"
            }
          },
          "transition": {
            "$ref": "#/components/schemas/TransitionBean"
          },
          "update": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "example": "\"comment\": [\n    {\n        \"add\": {\n            \"body\": \"Bug has been fixed.\"\n        }\n    }\n]",
              "items": {
                "$ref": "#/components/schemas/FieldOperation"
              }
            },
            "example": "\"comment\": [\n    {\n        \"add\": {\n            \"body\": \"Bug has been fixed.\"\n        }\n    }\n]"
          }
        },
        "example": null
      },
      "IssuesCreateResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/BulkOperationErrorResult"
            }
          },
          "issues": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssueCreateResponse"
            }
          }
        },
        "example": null
      },
      "IssuesUpdateBean": {
        "type": "object",
        "properties": {
          "issueUpdates": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssueUpdateBean"
            }
          }
        },
        "example": null
      },
      "LicenseValidationResults": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": null
            },
            "example": null
          },
          "licenseString": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "LinkIssueRequestJsonBean": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/CommentJsonBean"
          },
          "inwardIssue": {
            "$ref": "#/components/schemas/IssueRefJsonBean"
          },
          "outwardIssue": {
            "$ref": "#/components/schemas/IssueRefJsonBean"
          },
          "type": {
            "$ref": "#/components/schemas/IssueLinkTypeJsonBean"
          }
        },
        "example": null
      },
      "ListWrapperCallbackApplicationRoleBean": {
        "type": "object",
        "example": null
      },
      "ListWrapperCallbackGroupJsonBean": {
        "type": "object",
        "example": null
      },
      "ListWrapperCallbackUserBean": {
        "type": "object",
        "example": null
      },
      "ListWrapperCallbackUserJsonBean": {
        "type": "object",
        "example": null
      },
      "LoginInfo": {
        "type": "object",
        "properties": {
          "failedLoginCount": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "lastFailedLoginTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "loginCount": {
            "type": "integer",
            "format": "int64",
            "example": 127
          },
          "previousLoginTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          }
        },
        "example": null,
        "xml": {
          "name": "loginInfo"
        }
      },
      "LuceneFieldSorter": {
        "type": "object",
        "properties": {
          "comparator": {
            "type": "object",
            "example": null
          },
          "documentConstant": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "MoveFieldBean": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "format": "uri",
            "example": null
          },
          "position": {
            "type": "string",
            "example": null,
            "enum": [
              "Earlier",
              "Later",
              "First",
              "Last"
            ]
          }
        },
        "example": null
      },
      "NavigableField": {
        "type": "object",
        "properties": {
          "columnCssClass": {
            "type": "string",
            "example": null
          },
          "columnHeadingKey": {
            "type": "string",
            "example": null
          },
          "defaultSortOrder": {
            "type": "string",
            "example": null
          },
          "hiddenFieldId": {
            "type": "string",
            "example": null
          },
          "id": {
            "type": "string",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "nameKey": {
            "type": "string",
            "example": null
          },
          "sortComparatorSource": {
            "$ref": "#/components/schemas/FieldComparatorSource"
          },
          "sorter": {
            "$ref": "#/components/schemas/LuceneFieldSorter"
          },
          "valueLoader": {
            "$ref": "#/components/schemas/FieldValueLoader"
          }
        },
        "example": null
      },
      "NodeBean": {
        "type": "object",
        "properties": {
          "alive": {
            "type": "boolean",
            "example": null
          },
          "cacheListenerPort": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "ip": {
            "type": "string",
            "example": null
          },
          "lastStateChangeTimestamp": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "nodeBuildNumber": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "nodeId": {
            "type": "string",
            "example": null
          },
          "nodeVersion": {
            "type": "string",
            "example": null
          },
          "state": {
            "type": "string",
            "example": null,
            "enum": [
              "ACTIVE",
              "PASSIVE",
              "ACTIVATING",
              "PASSIVATING",
              "OFFLINE"
            ]
          }
        },
        "example": null
      },
      "NodeBuildInfo": {
        "type": "object",
        "properties": {
          "buildNumber": {
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "version": {
            "type": "string",
            "example": "8.0.0"
          }
        },
        "example": null
      },
      "NotificationJsonBean": {
        "type": "object",
        "properties": {
          "htmlBody": {
            "type": "string",
            "example": "Lorem ipsum <strong>dolor</strong> sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."
          },
          "restrict": {
            "$ref": "#/components/schemas/RestrictJsonBean"
          },
          "subject": {
            "type": "string",
            "example": "Duis eu justo eget augue iaculis fermentum."
          },
          "textBody": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."
          },
          "to": {
            "$ref": "#/components/schemas/ToJsonBean"
          }
        },
        "example": null
      },
      "NotificationSchemeBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "description"
          },
          "expand": {
            "type": "string",
            "example": null
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10100
          },
          "name": {
            "type": "string",
            "example": "notification scheme name"
          },
          "notificationSchemeEvents": {
            "type": "object",
            "example": null
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/notificationscheme/10100"
          }
        },
        "example": null
      },
      "OptionString": {
        "type": "object",
        "properties": {
          "defined": {
            "type": "boolean",
            "example": null
          },
          "empty": {
            "type": "boolean",
            "example": null
          },
          "orNull": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "OrderByPreferences": {
        "type": "object",
        "properties": {
          "orderByOption": {
            "type": "string",
            "example": null
          },
          "projectId": {
            "type": "integer",
            "format": "int64",
            "example": null
          }
        },
        "example": null
      },
      "OriginalOrder": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "example": null,
            "items": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        },
        "example": null
      },
      "PageBean": {
        "type": "object",
        "properties": {
          "isLast": {
            "type": "boolean",
            "example": null
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "nextPage": {
            "type": "string",
            "format": "uri",
            "example": null
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": null
          },
          "startAt": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "values": {
            "type": "array",
            "example": null,
            "items": {
              "type": "object",
              "example": null
            }
          }
        },
        "example": null
      },
      "PageBeanProjectBean": {
        "type": "object",
        "properties": {
          "isLast": {
            "type": "boolean",
            "example": null
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "nextPage": {
            "type": "string",
            "format": "uri",
            "example": null
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": null
          },
          "startAt": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "values": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ProjectBean"
            }
          }
        },
        "example": null
      },
      "PagedListWrapperUserJsonBeanApplicationUser": {
        "type": "object",
        "properties": {
          "backingListSize": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "callback": {
            "$ref": "#/components/schemas/ListWrapperCallbackUserJsonBean"
          },
          "items": {
            "type": "array",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/UserJsonBean"
            }
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": 50,
            "xml": {
              "name": "max-results",
              "attribute": true
            }
          },
          "pagingCallback": {
            "$ref": "#/components/schemas/ListWrapperCallbackUserJsonBean"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": 50,
            "xml": {
              "attribute": true
            }
          }
        },
        "example": null
      },
      "PasswordBean": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "example": "current password"
          },
          "password": {
            "type": "string",
            "example": "new password"
          }
        },
        "example": null
      },
      "PasswordPolicyCreateUserBean": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "example": "Fred Normal"
          },
          "emailAddress": {
            "type": "string",
            "example": "fred@example.com"
          },
          "password": {
            "type": "string",
            "example": "secret"
          },
          "username": {
            "type": "string",
            "example": "fred"
          }
        },
        "example": null
      },
      "PasswordPolicyUpdateUserBean": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "example": "correcthorsebatterystaple"
          },
          "oldPassword": {
            "type": "string",
            "example": "secret"
          },
          "username": {
            "type": "string",
            "example": "fred"
          }
        },
        "example": null
      },
      "PermissionGrantBean": {
        "type": "object",
        "properties": {
          "holder": {
            "$ref": "#/components/schemas/PermissionHolderBean"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10100
          },
          "permission": {
            "type": "string",
            "example": "permission scheme name"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/permissionscheme/10100"
          }
        },
        "example": null
      },
      "PermissionGrantsBean": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "string",
            "example": null
          },
          "permissions": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/PermissionGrantBean"
            }
          }
        },
        "example": null
      },
      "PermissionHolderBean": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FieldBean"
          },
          "group": {
            "$ref": "#/components/schemas/GroupJsonBean"
          },
          "parameter": {
            "type": "string",
            "example": "admin"
          },
          "projectRole": {
            "$ref": "#/components/schemas/ProjectRoleBean"
          },
          "type": {
            "type": "string",
            "example": "user"
          },
          "user": {
            "$ref": "#/components/schemas/UserJsonBean"
          }
        },
        "example": null
      },
      "PermissionJsonBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": null
          },
          "id": {
            "type": "string",
            "example": null
          },
          "key": {
            "type": "string",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "type": {
            "type": "string",
            "example": null,
            "enum": [
              "GLOBAL",
              "PROJECT"
            ]
          }
        },
        "description": "A map of permission keys to permission objects.",
        "example": {
          "EDIT_ISSUE": {
            "id": "EDIT_ISSUE",
            "type": "USER",
            "description": "Ability to edit issues.",
            "name": "Edit Issues",
            "havePermission": true
          }
        }
      },
      "PermissionSchemeAttributeBean": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": null
          },
          "value": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "PermissionSchemeBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "description"
          },
          "expand": {
            "type": "string",
            "example": null
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10100
          },
          "name": {
            "type": "string",
            "example": "permission scheme name"
          },
          "permissions": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/PermissionGrantBean"
            }
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/permissionscheme/10100"
          }
        },
        "example": null
      },
      "PermissionSchemesBean": {
        "type": "object",
        "properties": {
          "permissionSchemes": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/PermissionSchemeBean"
            }
          }
        },
        "example": null
      },
      "PermissionsInputBean": {
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/GrantToPermissionInputBean"
            }
          },
          "permissionKeys": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          }
        },
        "example": null
      },
      "PermissionsJsonBean": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PermissionJsonBean"
            },
            "description": "A map of permission keys to permission objects.",
            "example": {
              "EDIT_ISSUE": {
                "id": "EDIT_ISSUE",
                "type": "USER",
                "description": "Ability to edit issues.",
                "name": "Edit Issues",
                "havePermission": true
              }
            }
          }
        },
        "example": null
      },
      "PinnedCommentJsonBean": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/CommentJsonBean"
          },
          "pinnedBy": {
            "type": "string",
            "example": "admin"
          },
          "pinnedDate": {
            "type": "string",
            "example": "2021-06-01T12:00:00.000+0000"
          }
        },
        "example": null
      },
      "PriorityJsonBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "This is a description of the priority"
          },
          "iconUrl": {
            "type": "string",
            "example": "http://www.example.com/jira/images/icons/priorities/major.png"
          },
          "id": {
            "type": "string",
            "example": "1"
          },
          "name": {
            "type": "string",
            "example": "Major"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/priority/1"
          },
          "statusColor": {
            "type": "string",
            "example": "red"
          }
        },
        "example": null
      },
      "PrioritySchemeBean": {
        "type": "object",
        "properties": {
          "defaultOptionId": {
            "type": "string",
            "example": null
          },
          "defaultScheme": {
            "type": "boolean",
            "example": null
          },
          "description": {
            "type": "string",
            "example": null
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "name": {
            "type": "string",
            "example": null
          },
          "optionIds": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "projectKeys": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": null
          }
        },
        "example": null
      },
      "PrioritySchemeListBean": {
        "type": "object",
        "properties": {
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "schemes": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/PrioritySchemeBean"
            }
          },
          "startAt": {
            "type": "integer",
            "format": "int64",
            "example": null
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": null
          }
        },
        "example": null
      },
      "PrioritySchemeUpdateBean": {
        "type": "object",
        "properties": {
          "defaultOptionId": {
            "type": "string",
            "example": "3"
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10100
          },
          "name": {
            "type": "string",
            "example": "priority scheme name"
          },
          "optionIds": {
            "type": "array",
            "example": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ],
            "items": {
              "type": "string",
              "example": "[\"1\",\"2\",\"3\",\"4\",\"5\"]"
            }
          }
        },
        "example": null
      },
      "ProjectBean": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean",
            "example": false
          },
          "avatarUrls": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000"
            },
            "example": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000"
          },
          "description": {
            "type": "string",
            "example": "Example"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "key": {
            "type": "string",
            "example": "EX"
          },
          "name": {
            "type": "string",
            "example": "Example"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/project/EX"
          }
        },
        "example": null,
        "xml": {
          "name": "project"
        }
      },
      "ProjectCategoryBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "First Project Category"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "name": {
            "type": "string",
            "example": "FIRST"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/projectCategory/10000"
          }
        },
        "example": null
      },
      "ProjectDeleteInstructionsBean": {
        "type": "object",
        "properties": {
          "grantsToDelete": {
            "type": "array",
            "example": null,
            "items": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        },
        "example": null
      },
      "ProjectIdentity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10010
          },
          "key": {
            "type": "string",
            "example": "EX"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://example/jira/rest/api/2/project/10042"
          }
        },
        "example": null
      },
      "ProjectPickerItem": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "example": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000"
          },
          "html": {
            "type": "string",
            "example": "Example <strong>pro</strong>ject name (EXAM)"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "key": {
            "type": "string",
            "example": "EXAM"
          },
          "name": {
            "type": "string",
            "example": "Example project name"
          }
        },
        "example": null
      },
      "ProjectPickerResultWrapper": {
        "type": "object",
        "properties": {
          "header": {
            "type": "string",
            "example": "Showing 2 of 5 matching projects"
          },
          "projects": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ProjectPickerItem"
            }
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": 5
          }
        },
        "example": null
      },
      "ProjectRoleActorsBean": {
        "type": "object",
        "properties": {
          "actors": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/RoleActorBean"
            }
          }
        },
        "example": null
      },
      "ProjectRoleActorsUpdateBean": {
        "type": "object",
        "properties": {
          "categorisedActors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "example": {
                "atlassian-user-role-actor": [
                  "admin"
                ],
                "atlassian-group-role-actor": [
                  "jira-developers"
                ]
              },
              "items": {
                "type": "string",
                "example": "{\"atlassian-user-role-actor\":[\"admin\"],\"atlassian-group-role-actor\":[\"jira-developers\"]}"
              }
            },
            "example": {
              "atlassian-user-role-actor": [
                "admin"
              ],
              "atlassian-group-role-actor": [
                "jira-developers"
              ]
            }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10360
          }
        },
        "example": null,
        "xml": {
          "name": "actor"
        }
      },
      "ProjectRoleBean": {
        "type": "object",
        "properties": {
          "actors": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/RoleActorBean"
            }
          },
          "description": {
            "type": "string",
            "example": "A project role that represents developers in a project"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10360
          },
          "name": {
            "type": "string",
            "example": "Developers"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/project/MKY/role/10360"
          }
        },
        "example": null,
        "xml": {
          "name": "projectRole"
        }
      },
      "ProjectTypeBean": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "example": "#FFFFFF"
          },
          "descriptionI18nKey": {
            "type": "string",
            "example": "Project type for software projects"
          },
          "formattedKey": {
            "type": "string",
            "example": "Software"
          },
          "icon": {
            "type": "string",
            "example": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+"
          },
          "key": {
            "type": "string",
            "example": "software"
          }
        },
        "example": null
      },
      "ProjectUpdateBean": {
        "type": "object",
        "properties": {
          "assigneeType": {
            "type": "string",
            "example": "PROJECT_LEAD",
            "enum": [
              "PROJECT_LEAD",
              "UNASSIGNED"
            ]
          },
          "avatarId": {
            "type": "integer",
            "format": "int64",
            "example": 10200
          },
          "categoryId": {
            "type": "integer",
            "format": "int64",
            "example": 10120
          },
          "description": {
            "type": "string",
            "example": "Example Project description"
          },
          "issueSecurityScheme": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          },
          "key": {
            "type": "string",
            "example": "EX"
          },
          "lead": {
            "type": "string",
            "example": "Charlie"
          },
          "name": {
            "type": "string",
            "example": "Example"
          },
          "notificationScheme": {
            "type": "integer",
            "format": "int64",
            "example": 10021
          },
          "permissionScheme": {
            "type": "integer",
            "format": "int64",
            "example": 10011
          },
          "projectTemplateKey": {
            "type": "string",
            "example": "com.atlassian.jira-core-project-templates:jira-core-project-management"
          },
          "projectTypeKey": {
            "type": "string",
            "example": "business"
          },
          "url": {
            "type": "string",
            "example": "http://atlassian.com"
          }
        },
        "example": null
      },
      "Property": {
        "type": "object",
        "properties": {
          "example": {
            "type": "string",
            "example": null
          },
          "key": {
            "type": "string",
            "example": null
          },
          "value": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "PropertyBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": null
          },
          "key": {
            "type": "string",
            "example": null
          },
          "value": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "ReindexBean": {
        "type": "object",
        "properties": {
          "currentProgress": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "currentSubTask": {
            "type": "string",
            "example": "Currently reindexing Change History"
          },
          "finishTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "progressUrl": {
            "type": "string",
            "example": "http://localhost:8080/jira"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "submittedTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "type": {
            "type": "string",
            "example": "FOREGROUND",
            "enum": [
              "FOREGROUND",
              "BACKGROUND",
              "BACKGROUND_PREFFERED",
              "BACKGROUND_PREFERRED"
            ]
          }
        },
        "example": null
      },
      "ReindexRequestBean": {
        "type": "object",
        "properties": {
          "completionTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10500
          },
          "requestTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          },
          "status": {
            "type": "string",
            "example": "PENDING",
            "enum": [
              "PENDING",
              "ACTIVE",
              "RUNNING",
              "FAILED",
              "COMPLETE"
            ]
          },
          "type": {
            "type": "string",
            "example": "IMMEDIATE",
            "enum": [
              "IMMEDIATE",
              "DELAYED"
            ]
          }
        },
        "example": null
      },
      "RemoteEntityLinkJsonBean": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "example": "{\"rel\":\"issue\",\"url\":\"http://www.example.com/jira/rest/api/2/issue/10000\"}"
          },
          "name": {
            "type": "string",
            "example": "Issue 10000"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/issue/10000"
          }
        },
        "example": null
      },
      "RemoteEntityLinksJsonBean": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/RemoteEntityLinkJsonBean"
            }
          }
        },
        "example": null
      },
      "RemoteIssueLinkBean": {
        "type": "object",
        "example": null,
        "xml": {
          "name": "remotelink"
        }
      },
      "RemoteIssueLinkCreateOrUpdateRequest": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/Application"
          },
          "globalId": {
            "type": "string",
            "example": "system=http://www.mycompany.com/support&id=1"
          },
          "object": {
            "$ref": "#/components/schemas/RemoteObject"
          },
          "relationship": {
            "type": "string",
            "example": "causes"
          }
        },
        "example": null
      },
      "RemoteObject": {
        "type": "object",
        "properties": {
          "icon": {
            "$ref": "#/components/schemas/Icon"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "summary": {
            "type": "string",
            "example": "Crazy customer support issue"
          },
          "title": {
            "type": "string",
            "example": "TSTSUP-111"
          },
          "url": {
            "type": "string",
            "example": "http://www.mycompany.com/support?id=1"
          }
        },
        "example": null
      },
      "ResolutionBean": {
        "type": "object",
        "example": null,
        "xml": {
          "name": "resolution"
        }
      },
      "ResolutionJsonBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Fixed"
          },
          "iconUrl": {
            "type": "string",
            "example": "http://www.example.com/jira/images/icons/statuses/resolved.png"
          },
          "id": {
            "type": "string",
            "example": "1"
          },
          "name": {
            "type": "string",
            "example": "Fixed"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/resolution/1"
          }
        },
        "example": null
      },
      "RestrictJsonBean": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/GroupJsonBean"
            }
          },
          "permissions": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/PermissionJsonBean"
            }
          }
        },
        "example": null
      },
      "RoleActorBean": {
        "type": "object",
        "properties": {
          "avatarUrl": {
            "type": "string",
            "format": "uri",
            "writeOnly": true,
            "example": null
          },
          "name": {
            "type": "string",
            "example": "jira-developers"
          }
        },
        "example": null,
        "xml": {
          "name": "projectRoleActor"
        }
      },
      "ScreenableFieldBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "summary"
          },
          "name": {
            "type": "string",
            "example": "Summary"
          },
          "showWhenEmpty": {
            "type": "boolean",
            "example": false
          },
          "type": {
            "type": "string",
            "example": "The type of the field. One of: 'system', 'custom', 'jira'."
          }
        },
        "example": null
      },
      "ScreenableTabBean": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "name": {
            "type": "string",
            "example": "Fields Tab"
          }
        },
        "example": null
      },
      "SearchRequestBean": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "array",
            "example": [
              "transitions",
              "changelog",
              "operations",
              "editmeta",
              "versionedRepresentations",
              "renderedFields"
            ],
            "items": {
              "type": "string",
              "example": "[\"transitions\",\"changelog\",\"operations\",\"editmeta\",\"versionedRepresentations\",\"renderedFields\"]"
            }
          },
          "fields": {
            "type": "array",
            "example": [
              "summary",
              "status",
              "assignee"
            ],
            "items": {
              "type": "string",
              "example": "[\"summary\",\"status\",\"assignee\"]"
            }
          },
          "jql": {
            "type": "string",
            "example": "project = HSP"
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "startAt": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "validateQuery": {
            "type": "boolean",
            "example": false
          }
        },
        "example": null
      },
      "SecurityLevelJsonBean": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "This is a security level"
          },
          "id": {
            "type": "string",
            "example": "10000"
          },
          "name": {
            "type": "string",
            "example": "My Security Level"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/securitylevel/10000"
          }
        },
        "example": null
      },
      "SecurityListLevelJsonBean": {
        "type": "object",
        "properties": {
          "levels": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/SecurityLevelJsonBean"
            }
          }
        },
        "example": null
      },
      "SecuritySchemeJsonBean": {
        "type": "object",
        "properties": {
          "defaultSecurityLevelId": {
            "type": "integer",
            "format": "int64",
            "example": 10001
          },
          "description": {
            "type": "string",
            "example": "This is a security scheme"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "levels": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/SecurityLevelJsonBean"
            }
          },
          "name": {
            "type": "string",
            "example": "My Security Scheme"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/issuesecurityschemes/10000"
          }
        },
        "example": null
      },
      "SecuritySchemesJsonBean": {
        "type": "object",
        "properties": {
          "issueSecuritySchemes": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/SecuritySchemeJsonBean"
            }
          }
        },
        "example": null
      },
      "ServerInfoBean": {
        "type": "object",
        "example": null
      },
      "SessionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "JSESSIONID"
          },
          "value": {
            "type": "string",
            "example": "12345678901234567890"
          }
        },
        "example": null,
        "xml": {
          "name": "session"
        }
      },
      "SharePermissionInputBean": {
        "type": "object",
        "properties": {
          "edit": {
            "type": "boolean",
            "example": null
          },
          "groupname": {
            "type": "string",
            "example": null
          },
          "projectId": {
            "type": "string",
            "example": null
          },
          "projectRoleId": {
            "type": "string",
            "example": null
          },
          "type": {
            "type": "string",
            "example": null
          },
          "userKey": {
            "type": "string",
            "example": null
          },
          "view": {
            "type": "boolean",
            "example": null
          }
        },
        "example": null
      },
      "SimpleListWrapperApplicationRoleBean": {
        "type": "object",
        "properties": {
          "callback": {
            "$ref": "#/components/schemas/ListWrapperCallbackApplicationRoleBean"
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": null,
            "xml": {
              "name": "max-results",
              "attribute": true
            }
          },
          "pagingCallback": {
            "$ref": "#/components/schemas/ListWrapperCallbackApplicationRoleBean"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": null,
            "xml": {
              "attribute": true
            }
          }
        },
        "example": [
          "jira-core",
          "jira-admin",
          "important"
        ],
        "xml": {
          "name": "list"
        }
      },
      "SimpleListWrapperGroupJsonBean": {
        "type": "object",
        "properties": {
          "callback": {
            "$ref": "#/components/schemas/ListWrapperCallbackGroupJsonBean"
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": null,
            "xml": {
              "name": "max-results",
              "attribute": true
            }
          },
          "pagingCallback": {
            "$ref": "#/components/schemas/ListWrapperCallbackGroupJsonBean"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": null,
            "xml": {
              "attribute": true
            }
          }
        },
        "example": null,
        "xml": {
          "name": "list"
        }
      },
      "Status": {
        "type": "object",
        "properties": {
          "icon": {
            "$ref": "#/components/schemas/Icon"
          },
          "resolved": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null
      },
      "TerminologyRequestBean": {
        "type": "object",
        "properties": {
          "newName": {
            "type": "string",
            "example": "Theme"
          },
          "newNamePlural": {
            "type": "string",
            "example": "Themes"
          },
          "originalName": {
            "type": "string",
            "example": "Epic"
          }
        },
        "example": null
      },
      "TerminologyResponseBean": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean",
            "example": null
          },
          "newName": {
            "type": "string",
            "example": null
          },
          "newNamePlural": {
            "type": "string",
            "example": null
          },
          "originalName": {
            "type": "string",
            "example": null
          },
          "originalNamePlural": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "TimeTrackingConfigurationBean": {
        "type": "object",
        "properties": {
          "defaultUnit": {
            "type": "string",
            "example": "day",
            "enum": [
              "minute",
              "hour",
              "day",
              "week"
            ]
          },
          "timeFormat": {
            "type": "string",
            "example": "pretty",
            "enum": [
              "pretty",
              "days",
              "hours"
            ]
          },
          "workingDaysPerWeek": {
            "type": "number",
            "format": "double",
            "example": 5
          },
          "workingHoursPerDay": {
            "type": "number",
            "format": "double",
            "example": 8
          }
        },
        "example": null
      },
      "ToJsonBean": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "boolean",
            "example": true
          },
          "groups": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/GroupJsonBean"
            }
          },
          "reporter": {
            "type": "boolean",
            "example": true
          },
          "users": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/UserJsonBean"
            }
          },
          "voters": {
            "type": "boolean",
            "example": true
          },
          "watchers": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null
      },
      "TransitionsMetaBean": {
        "type": "object",
        "properties": {
          "transitions": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/TransitionBean"
            }
          }
        },
        "example": null
      },
      "UpdateUserToGroupBean": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "charlie"
          }
        },
        "example": null
      },
      "UpgradeResultBean": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "format": "int64",
            "example": 2001
          },
          "message": {
            "type": "string",
            "example": null
          },
          "outcome": {
            "type": "string",
            "example": "SUCCESS"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": null
          }
        },
        "example": null
      },
      "UserAnonymizationRequestBean": {
        "type": "object",
        "properties": {
          "newOwnerKey": {
            "type": "string",
            "example": "admin"
          },
          "userKey": {
            "type": "string",
            "example": "JIRAUSER10100"
          }
        },
        "example": null
      },
      "UserAnonymizationRerunRequestBean": {
        "type": "object",
        "properties": {
          "newOwnerKey": {
            "type": "string",
            "example": "admin"
          },
          "oldUserKey": {
            "type": "string",
            "example": null
          },
          "oldUserName": {
            "type": "string",
            "example": null
          },
          "userKey": {
            "type": "string",
            "example": "JIRAUSER10100"
          }
        },
        "example": null
      },
      "UserAnonymizationValidationBean": {
        "type": "object",
        "properties": {
          "affectedEntities": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/AffectedEntityBean"
              }
            },
            "example": null
          },
          "businessLogicValidationFailed": {
            "type": "boolean",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "example": false
          },
          "displayName": {
            "type": "string",
            "example": "Fred Flinston"
          },
          "email": {
            "type": "string",
            "example": "fred@example.com"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorCollection"
            },
            "example": null
          },
          "expand": {
            "type": "string",
            "example": null,
            "xml": {
              "attribute": true
            }
          },
          "operations": {
            "uniqueItems": true,
            "type": "array",
            "example": [
              "USER_TRANSFER_OWNERSHIP_PLUGIN_POINTS",
              "USER_DISABLE",
              "USER_KEY_CHANGE_PLUGIN_POINTS",
              "USER_KEY_CHANGE",
              "USER_NAME_CHANGE_PLUGIN_POINTS",
              "USER_NAME_CHANGE",
              "USER_EXTERNAL_ID_CHANGE",
              "USER_ANONYMIZE_PLUGIN_POINTS"
            ],
            "items": {
              "type": "string",
              "example": "[\"USER_TRANSFER_OWNERSHIP_PLUGIN_POINTS\",\"USER_DISABLE\",\"USER_KEY_CHANGE_PLUGIN_POINTS\",\"USER_KEY_CHANGE\",\"USER_NAME_CHANGE_PLUGIN_POINTS\",\"USER_NAME_CHANGE\",\"USER_EXTERNAL_ID_CHANGE\",\"USER_ANONYMIZE_PLUGIN_POINTS\"]"
            }
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "userKey": {
            "type": "string",
            "example": "JIRAUSER10100"
          },
          "userName": {
            "type": "string",
            "example": "fred"
          },
          "warnings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorCollection"
            },
            "example": null
          }
        },
        "example": null
      },
      "UserBean": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "example": true
          },
          "applicationRoles": {
            "$ref": "#/components/schemas/SimpleListWrapperApplicationRoleBean"
          },
          "avatarUrls": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri",
              "example": "{\"48x48\":\"http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred\",\"24x24\":\"http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred\",\"16x16\":\"http://www.example.com/jira/secure/useravatar?size=xsmall&ownerId=fred\",\"32x32\":\"http://www.example.com/jira/secure/useravatar?size=medium&ownerId=fred\"}"
            },
            "example": {
              "48x48": "http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred",
              "24x24": "http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred",
              "16x16": "http://www.example.com/jira/secure/useravatar?size=xsmall&ownerId=fred",
              "32x32": "http://www.example.com/jira/secure/useravatar?size=medium&ownerId=fred"
            }
          },
          "deleted": {
            "type": "boolean",
            "example": false
          },
          "displayName": {
            "type": "string",
            "example": "Fred F. User"
          },
          "emailAddress": {
            "type": "string",
            "example": "fred@example.com"
          },
          "expand": {
            "type": "string",
            "example": null,
            "xml": {
              "attribute": true
            }
          },
          "groups": {
            "$ref": "#/components/schemas/SimpleListWrapperGroupJsonBean"
          },
          "key": {
            "type": "string",
            "example": "JIRAUSER10100"
          },
          "lastLoginTime": {
            "type": "string",
            "example": "2023-08-30T16:37:01+1000"
          },
          "locale": {
            "type": "string",
            "example": "en_AU"
          },
          "name": {
            "type": "string",
            "example": "fred"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2.0/user?username=fred"
          },
          "timeZone": {
            "type": "string",
            "example": "Australia/Sydney"
          }
        },
        "example": null,
        "xml": {
          "name": "user"
        }
      },
      "UserBeanListWrapper": {
        "type": "object",
        "properties": {
          "backingListSize": {
            "type": "integer",
            "format": "int32",
            "example": null
          },
          "callback": {
            "$ref": "#/components/schemas/ListWrapperCallbackUserBean"
          },
          "items": {
            "type": "array",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/UserBean"
            }
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": 50,
            "xml": {
              "name": "max-results",
              "attribute": true
            }
          },
          "pagingCallback": {
            "$ref": "#/components/schemas/ListWrapperCallbackUserBean"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "example": 50,
            "xml": {
              "attribute": true
            }
          }
        },
        "example": null
      },
      "UserIssueRelevanceBean": {
        "type": "object",
        "properties": {
          "avatarUrls": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "uri",
              "example": "{16x16=http://www.example.com/jira/secure/useravatar?size=xsmall&ownerId=fred, 24x24=http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred, 32x32=http://www.example.com/jira/secure/useravatar?size=medium&ownerId=fred, 48x48=http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred}"
            },
            "example": "{16x16=http://www.example.com/jira/secure/useravatar?size=xsmall&ownerId=fred, 24x24=http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred, 32x32=http://www.example.com/jira/secure/useravatar?size=medium&ownerId=fred, 48x48=http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred}"
          },
          "displayName": {
            "type": "string",
            "example": "Fred F. User"
          },
          "emailAddress": {
            "type": "string",
            "example": "fred@example.com"
          },
          "highestIssueInvolvementRank": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "issueInvolvements": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/IssueInvolvementBean"
            }
          },
          "key": {
            "type": "string",
            "example": "fred"
          },
          "latestCommentCreationTime": {
            "type": "integer",
            "format": "int64",
            "example": 1458688056272
          },
          "name": {
            "type": "string",
            "example": "fred"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/user?username=fred"
          }
        },
        "example": null,
        "xml": {
          "name": "user"
        }
      },
      "UserPickerResultsBean": {
        "type": "object",
        "example": null
      },
      "UserWriteBean": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "example": true
          },
          "applicationKeys": {
            "type": "array",
            "example": [
              "jira-core"
            ],
            "items": {
              "type": "string",
              "example": "[\"jira-core\"]"
            }
          },
          "displayName": {
            "type": "string",
            "example": "Charlie of Atlassian"
          },
          "emailAddress": {
            "type": "string",
            "example": "charlie@atlassian.com"
          },
          "key": {
            "type": "string",
            "example": "charlie"
          },
          "name": {
            "type": "string",
            "example": "charlie"
          },
          "notification": {
            "type": "string",
            "example": "HTML"
          },
          "password": {
            "type": "string",
            "example": "abracadabra"
          },
          "self": {
            "type": "string",
            "example": "http://www.example.com/jira/rest/api/2/user?username=charlie"
          }
        },
        "example": null
      },
      "UsersAndGroupsBean": {
        "type": "object",
        "properties": {
          "groups": {
            "$ref": "#/components/schemas/GroupSuggestionsBean"
          },
          "users": {
            "$ref": "#/components/schemas/UserPickerResultsBean"
          }
        },
        "example": null
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": null
          },
          "field": {
            "type": "string",
            "example": null
          },
          "params": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          }
        },
        "example": null
      },
      "VersionIssueCountsBean": {
        "type": "object",
        "properties": {
          "customFieldNames": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/VersionUsageInCustomFields"
            }
          },
          "issueCountWithCustomFieldsShowingVersion": {
            "type": "integer",
            "format": "int64",
            "example": 54
          },
          "issuesAffectedCount": {
            "type": "integer",
            "format": "int64",
            "example": 101
          },
          "issuesFixedCount": {
            "type": "integer",
            "format": "int64",
            "example": 23
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/version/10000"
          }
        },
        "example": null,
        "xml": {
          "name": "version"
        }
      },
      "VersionMoveBean": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "format": "uri",
            "example": "http://localhost:8090/jira/rest/api/2/version/10000"
          },
          "position": {
            "type": "string",
            "example": "Earlier",
            "enum": [
              "Earlier",
              "Later",
              "First",
              "Last"
            ]
          }
        },
        "example": null,
        "xml": {
          "name": "version"
        }
      },
      "VersionUnresolvedIssueCountsBean": {
        "type": "object",
        "properties": {
          "issuesUnresolvedCount": {
            "type": "integer",
            "format": "int64",
            "example": 23
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/version/10000"
          }
        },
        "example": null,
        "xml": {
          "name": "version"
        }
      },
      "VersionUsageInCustomFields": {
        "type": "object",
        "properties": {
          "customFieldId": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "fieldName": {
            "type": "string",
            "example": "Field1"
          },
          "issueCountWithVersionInCustomField": {
            "type": "integer",
            "format": "int64",
            "example": 2
          }
        },
        "example": null
      },
      "VisibilityJsonBean": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "group",
            "enum": [
              "group",
              "role"
            ]
          },
          "value": {
            "type": "string",
            "example": "jira-software-users"
          }
        },
        "example": null
      },
      "VoteBean": {
        "type": "object",
        "example": null
      },
      "VoteWatchResult": {
        "type": "object",
        "example": null
      },
      "WatchersBean": {
        "type": "object",
        "example": null,
        "xml": {
          "name": "watchers"
        }
      },
      "WorkflowMappingBean": {
        "type": "object",
        "properties": {
          "defaultMapping": {
            "type": "boolean",
            "example": null
          },
          "issueTypes": {
            "type": "array",
            "example": null,
            "items": {
              "type": "string",
              "example": null
            }
          },
          "updateDraftIfNeeded": {
            "type": "boolean",
            "example": null
          },
          "workflow": {
            "type": "string",
            "example": null
          }
        },
        "example": null
      },
      "WorkflowSchemeBean": {
        "type": "object",
        "properties": {
          "defaultWorkflow": {
            "type": "string",
            "example": "DefaultWorkflowName"
          },
          "description": {
            "type": "string",
            "example": "This is a workflow scheme"
          },
          "draft": {
            "type": "boolean",
            "example": false
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "issueTypeMappings": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{\"IsueTypeId\":\"WorkflowName\",\"IsueTypeId2\":\"WorkflowName\"}"
            },
            "example": {
              "IsueTypeId": "WorkflowName",
              "IsueTypeId2": "WorkflowName"
            }
          },
          "issueTypes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/IssueTypeJsonBean"
            },
            "example": {
              "IsueTypeId": {
                "name": "IssueTypeName",
                "description": "IssueTypeDescription"
              }
            }
          },
          "lastModified": {
            "type": "string",
            "example": "Today 12:45"
          },
          "lastModifiedUser": {
            "$ref": "#/components/schemas/UserBean"
          },
          "name": {
            "type": "string",
            "example": "My Workflow Scheme"
          },
          "originalDefaultWorkflow": {
            "type": "string",
            "example": "ParentsDefaultWorkflowName"
          },
          "originalIssueTypeMappings": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": "{\"IssueTypeId\":\"WorkflowName2\"}"
            },
            "example": {
              "IssueTypeId": "WorkflowName2"
            }
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/workflowscheme/10000"
          },
          "updateDraftIfNeeded": {
            "type": "boolean",
            "example": true
          }
        },
        "example": null
      },
      "WorkflowTransitionResource": {
        "type": "object",
        "example": null
      },
      "WorklogChangeBean": {
        "type": "object",
        "properties": {
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "example": 1438013671562
          },
          "worklogId": {
            "type": "integer",
            "format": "int64",
            "example": 103
          }
        },
        "example": null
      },
      "WorklogChangedSinceBean": {
        "type": "object",
        "properties": {
          "isLastPage": {
            "type": "boolean",
            "example": true
          },
          "lastPage": {
            "type": "boolean",
            "example": null
          },
          "nextPage": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/worklog/updated?since=1438013693136"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/worklog/updated?since=1438013671136"
          },
          "since": {
            "type": "integer",
            "format": "int64",
            "example": 1438013671562
          },
          "until": {
            "type": "integer",
            "format": "int64",
            "example": 1438013693136
          },
          "values": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/WorklogChangeBean"
            }
          }
        },
        "example": null
      },
      "WorklogIdsRequestBean": {
        "type": "object",
        "properties": {
          "ids": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of worklog ids",
            "example": [
              1,
              2,
              5,
              10
            ],
            "items": {
              "type": "integer",
              "description": "List of worklog ids",
              "format": "int64",
              "example": null
            }
          }
        },
        "example": null
      },
      "WorklogWithPaginationBean": {
        "type": "object",
        "properties": {
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "startAt": {
            "type": "integer",
            "format": "int32",
            "example": 0
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "worklogs": {
            "type": "array",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/worklog"
            }
          }
        },
        "example": null
      },
      "issueLinks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "10000"
          },
          "inwardIssue": {
            "$ref": "#/components/schemas/IssueRefJsonBean"
          },
          "outwardIssue": {
            "$ref": "#/components/schemas/IssueRefJsonBean"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/issueLink/10000"
          },
          "type": {
            "$ref": "#/components/schemas/IssueLinkTypeJsonBean"
          }
        },
        "example": null
      },
      "worklog": {
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/UserJsonBean"
          },
          "comment": {
            "type": "string",
            "example": "I did some work here."
          },
          "created": {
            "type": "string",
            "example": "2010-07-14T18:23:23.733+0000"
          },
          "id": {
            "type": "string",
            "example": "100028"
          },
          "issueId": {
            "type": "string",
            "example": "10002"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "example": "http://www.example.com/jira/rest/api/2/issue/10010/worklog/10000"
          },
          "started": {
            "type": "string",
            "example": "2010-07-14T18:23:23.733+0000"
          },
          "timeSpent": {
            "type": "string",
            "example": "3h 20m"
          },
          "timeSpentSeconds": {
            "type": "integer",
            "format": "int64",
            "example": 12000
          },
          "updateAuthor": {
            "$ref": "#/components/schemas/UserJsonBean"
          },
          "updated": {
            "type": "string",
            "example": "2010-07-14T18:23:23.733+0000"
          },
          "visibility": {
            "$ref": "#/components/schemas/VisibilityJsonBean"
          }
        },
        "example": null
      }
    }
  },
  "x-atlassian-narrative": {
    "documents": [
      {
        "title": "Getting started",
        "anchor": "gettingstarted",
        "body": "If you haven't integrated with Jira Data Center before, read the [Getting started guide](https://developer.atlassian.com/display/JIRADEV/Getting+started+with+Plugins2) in the [Jira Data Center developer documentation](https://developer.atlassian.com/server/jira/platform/getting-started/). You may also want to read our Jira REST API overview, which describes how the Jira REST APIs work, including a simple example of a REST call."
      },
      {
        "title": "Previous versions",
        "anchor": "previous-versions",
        "body": "In the versions before Jira 10.0, the REST APIs of Jira Core and Jira Software were published independently. The documentation of previous versions of REST APIs is available at:\n\n[Jira Core 9.17](https://docs.atlassian.com/software/jira/docs/api/REST/9.17.0/) | [Jira Software 9.17](https://docs.atlassian.com/jira-software/REST/9.17.0/)\n\n[Jira Core 9.12](https://docs.atlassian.com/software/jira/docs/api/REST/9.12.0/) | [Jira Software 9.12](https://docs.atlassian.com/jira-software/REST/9.12.0/)"
      },
      {
        "title": "Authentication",
        "anchor": "authentication",
        "body": "The following authentication methods are supported for the Jira REST APIs:\n\n* Recommended:\n    * [OAuth 2.0](https://confluence.atlassian.com/adminjiraserver/jira-oauth-2-0-provider-api-1115659070.html) - This method provides APIs to allow external services to access resources on a user's behalf with the OAuth 2.0 protocol. This protocol is not compatible with Oauth 1.0a.\n    * [Personal access token (PAT)](https://confluence.atlassian.com/enterprise/using-personal-access-tokens-1026032365.html) - This method incorporates the user account in the access token. It is a safe alternative to using username and password for authentication with various services.\n* Other:\n    * [OAuth 1.0a](https://developer.atlassian.com/display/JIRADEV/JIRA+REST+API+Example+-+OAuth+authentication) - This method provides APIs to allow external services to access resources on a user's behalf with the OAuth 1.0 protocol. This protocol is deprecated.\n    * [Basic HTTP](https://developer.atlassian.com/display/JIRADEV/JIRA+REST+API+Example+-+Basic+Authentication) - This method is only recommended for tools like scripts or bots. It is easier to implement but much less secure.\n\nJira uses cookie-based authentication in the browser, so you can call the REST API from Javascript on the page and rely on the authentication the browser has established. To reproduce the behavior of the Jira log-in page, you can POST to the /auth/1/session resource. You can use it, for example, to display authentication error messages to users."
      },
      {
        "title": "URI Structure",
        "anchor": "structure",
        "body": "Jira REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The Jira REST API uses [JSON](http://en.wikipedia.org/wiki/JSON) as its communication format, and the standard HTTP methods like `GET`, `PUT`, `POST` and `DELETE` (see API descriptions below for which methods are available for each resource). URIs for Jira's REST API resource have the following structure:\n\n    http://host:port/context/rest/api-name/api-version/resource-name\n\nCurrently there are three API names available, which will be discussed further below. Each of those names are versioned independently. The available API names are\n* `auth` - for authentication-related operations. Current version is `1`.\n* `agile` - for agile boards and sprints. Current version is `1`.\n* `api` - for everything else. Current version is `2`.\n\nThere is also a symbolic version, called `latest`, which resolves to the latest version supported by the given Jira instance. As an example, if you wanted to retrieve the JSON representation of issue [JRA-9](https://jira.atlassian.com/browse/JRA-9) from Atlassian's public issue tracker, you would access:\n\n    https://jira.atlassian.com/rest/api/latest/issue/JRA-9"
      },
      {
        "title": "Expansion",
        "anchor": "expansion",
        "body": "In order to simplify API responses, the Jira REST API uses resource expansion. This means the API will only return parts of the resource when explicitly requested.\n\nYou can use the `expand` query parameter to specify a comma-separated list of entities that you want expanded, identifying each of them by name. For example, appending `?expand=names,renderedFields` to an issue's URI requests the inclusion of the translated field names and the HTML-rendered field values in the response. Continuing with our example above, we would use the following URL to get that information for JRA-9:\n\n    https://jira.atlassian.com/rest/api/latest/issue/JRA-9?expand=names,renderedFields\n\nTo discover the identifiers for each entity, look at the `expand` property in the parent object. In the JSON example below, the resource declares widgets as being expandable.\n\n    {\n        \"expand\": \"widgets\",\n        \"self\": \"http://www.example.com/jira/rest/api/resource/KEY-1\",\n        \"widgets\": {\n            \"widgets\": [],\n            \"size\": 5\n        }\n    }\n\nYou can use the dot notation to specify expansion of entities within another entity. For example `?expand=widgets.fringels` would expand the widgets collection and also the fringel property on each widget."
      },
      {
        "title": "Pagination",
        "anchor": "pagination",
        "body": "Jira uses pagination to limit the response size for resources that return a potentially large collection of items. A request to a paged API will result in a values array wrapped in a JSON object with some paging metadata, for example:\n\n#### Request\n\n    http://host:port/context/rest/api-name/api-version/resource-name?start=0&limit=10\n\n#### Response\n\n    {\n        \"startAt\" : 0,\n        \"maxResults\" : 10,\n        \"total\": 200,\n        \"values\": \\[\n            { /\\* result 0 \\*/ },\n            { /\\* result 1 \\*/ },\n            { /\\* result 2 \\*/ }\n        \\]\n    }\n\n* `startAt` - the item used as the first item in the page of results.\n* `maxResults` - how many results to return per page.\n* `total` - the number of items that the calling user has permissions for. This number _may change_ while the client requests the next pages. A client should always assume that the requested page can be empty. REST API consumers should also consider the field to be optional. This value may not be included in the response, if it is too expensive to calculate.\n\nClients can use the `startAt`, `maxResults`, and `total` parameters to retrieve the desired number of results. Note, each API resource or method may have a different limit on the number of items returned, which means you can ask for more than you are given. The actual number of items returned is an implementation detail and this can be changed over time."
      },
      {
        "title": "Ordering",
        "anchor": "ordering",
        "body": "Some resources support ordering by a specific field. Ordering request is provided in the **orderBy** query parameter. See the docs for specific methods to see which fields they support and if they support ordering at all.\n\nOrdering can be ascending or descending. By default it's ascending. To specify the ordering use \"-\" or \"+\" sign. Examples:\n\n**?orderBy=name**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Order by \"name\" ascending\n\n**?orderBy=+name**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Order by \"name\" ascending\n\n**?orderBy=-name**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Order by \"name\" descending"
      },
      {
        "title": "Self links",
        "anchor": "self-links",
        "body": "Many fields have a `self` link that takes you to the canonical location for that resource.\nFor example:\n\n``` javascript\n\"reporter\": {\n    \"self\": \"http://jira.atlassian.com/rest/api/2/user?username=admin\",\n    \"name\": \"admin\",\n    \"emailAddress\": \"admin@example.com\",\n    \"displayName\": \"Administrator\",\n    \"active\": true\n},\n```\n\nMaking a GET request to the `self` link can sometimes provide you with additional information about the field.\nFor example, if we make a GET request for the `self` link for the `reporter` field above, the response will\ncontain additional information about the user, including the timezone and groups."
      },
      {
        "title": "Experimental methods",
        "anchor": "experimental",
        "body": "Methods marked as experimental may change without an earlier notice. We are looking for your feedback for these methods."
      },
      {
        "title": "Special request and response headers",
        "anchor": "special-request-headers",
        "body": "*   **X-AUSERNAME** - Response header which contains either username of the authenticated user or 'anonymous'.\n*   **X-Atlassian-Token** - methods which accept multipart/form-data will only process requests with 'X-Atlassian-Token: no-check' header."
      },
      {
        "title": "Error responses",
        "anchor": "error-responses",
        "body": "Most resources will return a response body in addition to the status code. Usually, the JSON schema of the entity returned is the following:\n\n    {\n        \"id\": \"https://docs.atlassian.com/jira/REST/schema/error-collection#\",\n        \"title\": \"Error Collection\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"errorMessages\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"errors\": {\n                \"type\": \"object\",\n                \"patternProperties\": {\n                    \".+\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"status\": {\n                \"type\": \"integer\"\n            }\n        },\n        \"additionalProperties\": false\n    }"
      },
      {
        "title": "Field input formats",
        "anchor": "field-input-formats",
        "body": "**Summary**: A system field that is a single line of text.\n\n``` javascript\n\"summary\": \"This is an example summary\"\n```\n\n**Description**: A system field that is multiple lines of text.\n\n``` javascript\n\"description\": \"This is an example description with multiples lines of text\\n separated by\\n line feeds\"\n```\n\n**Components**: A system field that is multiple values addressed by 'name'.\n\n``` javascript\n\"components\" : [ { \"name\": \"Active Directory\"} , { \"name\": \"Network Switch\" } ]\n```\n\n**Due date**: A system field that is a date in 'YYYY-MM-DD' format.\n\n``` javascript\n\"duedate\" : \"2015-11-18\"\n```\n\n**Labels**: A system field that is an array of string values.\n\n``` javascript\n\"labels\" : [\"examplelabelnumber1\", \"examplelabelnumber2\"]\n```\n\n**Checkbox custom field**: A custom field that allows you to select a multiple values from a defined list of values.\nYou can address them by `value` or by `ID`.\n\n``` javascript\n\"customfield_11440\" : [{ \"value\" : \"option1\"}, {\"value\" : \"option2\"}]\n```\n\nor\n\n``` javascript\n\"customfield_11440\" : [{ \"id\" : 10112}, {\"id\" : 10115}]\n```\n\n**Date picker custom field**: A custom field that is a date in `YYYY-MM-DD` format.\n\n``` javascript\n\"customfield_11441\" : \"2015-11-18\"\n```\n\n**Date time picker custom field**: A custom field that is a date time in ISO 8601 `YYYY-MM-DDThh:mm:ss.sTZD` format.\n\n``` javascript\n\"customfield_11442\" : \"2015-11-18T14:39:00.000+1100\"\n```\n\n**Labels custom field**: A custom field that is an array of strings.\n\n``` javascript\n\"customfield_11443\" : [ \"rest_label1\", \"rest_label2\" ]\n```\n\n**Number custom field**: A custom field that contains a number.\n\n``` javascript\n\"customfield_11444\" : 123\n```\n\n**Radio button custom field**: A custom field that allows you to select a single value from a defined list of\nvalues. You can address them by `value` or by `ID`.\n\n``` javascript\n\"customfield_11445\" : { \"value\": \"option2\" }\n```\n\nor\n\n``` javascript\n\"customfield_11445\" : { \"id\": 10112 }\n```\n\n**Cascading select custom field**: A custom field that allows you to select a single parent value and then a\nrelated child value. You can address them by `value` or by `ID`.\n\n``` javascript\n\"customfield_11447\" : { \"value\": \"parent_option1\", \"child\": { \"value\" : \"p1_child1\"} }\n```\n\nor\n\n``` javascript\n\"customfield_11447\" : { \"id\": 10112, \"child\": { \"id\" : 10115 } }\n```\n\n**Multi-select custom field**: A custom field that allows you to select a multiple values from a defined list of\nvalues. You can address them by `value` or by `ID`.\n\n``` javascript\n\"customfield_11448\" : [ { \"value\": \"option1\" }, { \"value\": \"option2\" } ]\n```\n\nor\n\n``` javascript\n\"customfield_11448\" : [ { \"id\": 10112 }, { \"id\": 10115 } ]\n```\n\n**Single-select custom field**: A custom field that allows you to select a single value from a defined list of\nvalues. You can address them by `value` or by `ID`.\n\n``` javascript\n\"customfield_11449\" : { \"value\": \"option3\" }\n```\n\nor\n\n``` javascript\n\"customfield_11449\" : { \"id\": 10112 }\n```\n\n**Multi-line text custom field**: A custom field that allows multiple lines of text.\n\n``` javascript\n\"customfield_11450\": \"An example of multiples lines of text\\n separated by\\n line feeds\"\n```\n\n**Text custom field**: A custom field that allows a single line of text.\n\n``` javascript\n\"customfield_11450\": \"An example of a single line of text\"\n```\n\n**URL custom field**: A custom field that allows a URL to be entered.\n\n``` javascript\n\"customfield_11452\" : \"http://www.atlassian.com\"\n```\n\n**Single-user picker custom field**: A custom field that allows a single user to be selected.\n\n``` javascript\n\"customfield_11453\" : { \"name\":\"tommytomtomahawk\" }\n```\n\n**Multi-user picker custom field**: A custom field that allows multiple users to be selected.\n\n``` javascript\n\"customfield_11458\" : [ { \"name\":\"inigomontoya\" }, { \"name\":\"tommytomtomahawk\" }]\n```"
      },
      {
        "title": "Examples",
        "anchor": "examples",
        "body": "The [Jira REST API examples](/server/jira/platform/jira-rest-api-examples) guide contains a range of examples,\nincluding examples of requests for creating issues, updating issues, searching for issues, and more.\n\nWe've also provided a simple example below to get you started. The example shows you how to create an issue using the Jira\nREST API. The sample code uses [curl](https://curl.haxx.se) to make requests, but you can\nuse any tool you prefer.\n\nNote:\n\n*   The input file is denoted by the `--data @filename` syntax. The data is shown separately, and uses the JSON format.\n*   Make sure the content type in the request is set to `application/json`, as shown in the example.\n*   POST the JSON to your Jira server. In the example, the server is `http://localhost:8080/jira/rest/api/2/issue/`.\n*   The example uses basic authentication with admin/admin credentials.\n*   You'll need to add a project to the instance before running and get the project ID of the project to which you want\n    to add the issue beforehand.\n\nTo create an issue using the Jira REST API, follow these steps:\n\n1.  Create the data file that contains the POST data. For this example, we'll assume the file is named `data.txt`.\n1.  Add the following JSON to the file:\n\n    ``` javascript\n    {\n        \"fields\": {\n           \"project\":\n           {\n              \"id\": \"10000\"\n           },\n           \"summary\": \"No REST for the Wicked.\",\n           \"description\": \"Creating of an issue using ids for projects and issue types using the REST API\",\n           \"issuetype\": {\n              \"id\": \"3\"\n           }\n       }\n    }\n    ```\n\n    In this data, the project ID is 10000 and the issue type in our case is 3, which represents a task.\n    You should pick an ID of a project in your instance and whichever issue type you prefer.\n\n    Note that instead of the `id` you can also use the key and name for the `project` and `issuetype` respectively.\n    For example,`\"key\": \"TEST\"` for the project and `\"name\": \"Task\"` for the `issuetype`.\n\n1.  In Terminal window, run the following command:\n\n    ``` bash\n    curl -u admin:admin -X POST --data @data.txt -H \"Content-Type: application/json\" http://localhost:8080/jira/rest/api/2/issue/\n    ```\n\n    As before, adjust details for your environment, such as the hostname or port of the Jira instance. Note that\n    a cloud instance or most public instances would require the use of HTTPS and, of course, valid credentials\n    for the instance.\n\n1.  When your issue is created, check the response that will look something like this:\n\n    ``` javascript\n    {\n       \"id\":\"10009\",\n       \"key\":\"TEST-10\",\n        \"self\":\"http://localhost:8080/jira/rest/api/2/issue/10009\"\n    }\n    ```\n\n    That's it! You can use the issue ID, issue key, and the URL to the issue for additional requests, if you wish.\n\nTo get an issue you just created, use `http://localhost:8080/jira/rest/api/2/issue/{issueIdOrKey}` endpoint:\n\n``` bash\ncurl -u admin:admin http://localhost:8080/jira/rest/api/2/issue/TEST-10 | python -mjson.tool\n```\n\nWe use `python -mjson.tool` to pretty print json."
      },
      {
        "title": "Field input formats",
        "anchor": "field-input-formats",
        "body": "Webhooks are user-defined callbacks over HTTP that are specific to the Jira REST API. Jira webhooks allow the Jira REST\nAPI to inform a remote application when changes have occurred, for example, an issue transition. This saves the application from\nhaving to periodically poll Jira (via the REST API). To learn more, read the [Webhooks](/server/jira/platform/webhooks) page."
      }
    ]
  },
  "tags": [
    {
      "name": "backlog"
    },
    {
      "name": "board"
    },
    {
      "name": "epic"
    },
    {
      "name": "issue"
    },
    {
      "name": "sprint"
    },
    {
      "name": "application-properties"
    },
    {
      "name": "applicationrole"
    },
    {
      "name": "attachment"
    },
    {
      "name": "avatar"
    },
    {
      "name": "cluster"
    },
    {
      "name": "comment"
    },
    {
      "name": "component"
    },
    {
      "name": "configuration"
    },
    {
      "name": "customFieldOption"
    },
    {
      "name": "customFields"
    },
    {
      "name": "dashboard"
    },
    {
      "name": "email-templates"
    },
    {
      "name": "field"
    },
    {
      "name": "filter"
    },
    {
      "name": "group"
    },
    {
      "name": "groups"
    },
    {
      "name": "groupuserpicker"
    },
    {
      "name": "index-snapshot"
    },
    {
      "name": "index"
    },
    {
      "name": "issueLink"
    },
    {
      "name": "issueLinkType"
    },
    {
      "name": "issuesecurityschemes"
    },
    {
      "name": "issuetype"
    },
    {
      "name": "issuetypescheme"
    },
    {
      "name": "jql"
    },
    {
      "name": "licenseValidator"
    },
    {
      "name": "monitoring"
    },
    {
      "name": "mypermissions"
    },
    {
      "name": "mypreferences"
    },
    {
      "name": "myself"
    },
    {
      "name": "notificationscheme"
    },
    {
      "name": "password"
    },
    {
      "name": "permissions"
    },
    {
      "name": "permissionscheme"
    },
    {
      "name": "priority"
    },
    {
      "name": "priorityschemes"
    },
    {
      "name": "project"
    },
    {
      "name": "projectCategory"
    },
    {
      "name": "projects"
    },
    {
      "name": "projectvalidate"
    },
    {
      "name": "reindex"
    },
    {
      "name": "resolution"
    },
    {
      "name": "role"
    },
    {
      "name": "screens"
    },
    {
      "name": "search"
    },
    {
      "name": "securitylevel"
    },
    {
      "name": "serverInfo"
    },
    {
      "name": "settings"
    },
    {
      "name": "status"
    },
    {
      "name": "statuscategory"
    },
    {
      "name": "terminology"
    },
    {
      "name": "universal_avatar"
    },
    {
      "name": "upgrade"
    },
    {
      "name": "user"
    },
    {
      "name": "version"
    },
    {
      "name": "workflow"
    },
    {
      "name": "workflowscheme"
    },
    {
      "name": "worklog"
    },
    {
      "name": "session"
    },
    {
      "name": "websudo"
    }
  ],
  "paths": {
    "/agile/1.0/backlog/issue": {
      "post": {
        "tags": [
          "backlog"
        ],
        "summary": "Update issues to move them to the backlog",
        "description": "Move issues to the backlog. This operation is equivalent to remove future and active sprints from a given set of issues. At most 50 issues may be moved at once.",
        "operationId": "moveIssuesToBacklog",
        "requestBody": {
          "description": "The issues to move to the backlog.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAssignRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response is returned if operation was successful."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if user does not a have valid license or does not have permission to assign issues."
          },
          "404": {
            "description": "Returned if sprint does not exist or the user cannot view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all boards",
        "description": "Returns all boards. This only includes boards that the user has permission to view.",
        "operationId": "getAllBoards",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectKeyOrId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StringList"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested boards, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not have valid license."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "board"
        ],
        "summary": "Create a new board",
        "description": "Creates a new board. Board name, type and filter Id is required.\n- name - Must be less than 255 characters.\n- type - Valid values: scrum, kanban\n- filterId - Id of a filter that the user has permissions to view. Note, if the user does not have the 'Create shared objects' permission and tries to create a shared board, a private board will be created instead (remember that board sharing depends on the filter sharing).\nNote:\n- If you want to create a new project with an associated board, use the JIRA platform REST API. For more information, see the Create project method. The projectTypeKey for software boards must be 'software' and the projectTemplateKey must be either com.pyxis.greenhopper.jira:gh-kanban-template or com.pyxis.greenhopper.jira:gh-scrum-template.\n- You can create a filter using the JIRA REST API. For more information, see the Create filter method.\n- If you do not ORDER BY the Rank field for the filter of your board, you will not be able to reorder issues on the board.",
        "operationId": "createBoard",
        "requestBody": {
          "description": "Bean which contains board name, type and filter Id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoardCreateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the created board.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get a single board",
        "description": "Returns a single board, for a given board Id.",
        "operationId": "getBoard",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested board.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "board"
        ],
        "summary": "Delete the board",
        "description": "Deletes the board.",
        "operationId": "deleteBoard",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the board has been successfully removed."
          },
          "403": {
            "description": "Returned if the user does not a have valid license, or when the user does not have the permission to delete the board."
          },
          "404": {
            "description": "Returned if a board with the given id does not exist or the user does not have the permission to view the board."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/backlog": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all issues from the board's backlog",
        "description": "Returns all issues from a board's backlog, for a given board Id.",
        "operationId": "getIssuesForBacklog",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issues.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/configuration": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get the board configuration",
        "description": "Get the board configuration.\nThe response contains the following fields:\n- id - Id of the board.\n- name - Name of the board.\n- filter - Reference to the filter used by the given board.\n- subQuery (Kanban only) - JQL subquery used by the given board.\n- columnConfig - The column configuration lists the columns for the board, in the order defined in the column configuration.\nFor each column, it shows the issue status mapping\nas well as the constraint type (Valid values: none, issueCount, issueCountExclSubs) for the min/max number of issues.\nNote, the last column with statuses mapped to it is treated as the \"Done\" column,\nwhich means that issues in that column will be marked as already completed.\n- estimation (Scrum only) - Contains information about type of estimation used for the board. Valid values: none, issueCount, field.\nIf the estimation type is \"field\", the Id and display name of the field used for estimation is also returned.\nNote, estimates for an issue can be updated by a PUT /rest/api/2/issue/{issueIdOrKey} request, however the fields must be on the screen.\n\"timeoriginalestimate\" field will never be on the screen, so in order to update it \"originalEstimate\" in \"timetracking\" field should be updated.\n- ranking - Contains information about custom field used for ranking in the given board.",
        "operationId": "getConfiguration",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the configuration of the board for given boardId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardConfigBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/epic": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all epics from the board",
        "description": "Returns all epics from the board, for the given board Id. This only includes epics that the user has permission to view. Note, if the user does not have permission to view the board, no epics will be returned at all.",
        "operationId": "getEpics",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "done",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested epics, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpicBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/epic/none/issue": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all issues without an epic",
        "description": "Returns all issues that do not belong to any epic on a board, for a given board Id.",
        "operationId": "getIssuesWithoutEpic",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issues, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/epic/{epicId}/issue": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all issues for a specific epic",
        "description": "Returns all issues that belong to an epic on the board, for the given epic Id and the board Id.",
        "operationId": "getIssuesForEpic",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "epicId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issues, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/issue": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all issues from a board",
        "description": "Returns all issues from a board, for a given board Id. This only includes issues that the user has permission to view. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.",
        "operationId": "getIssuesForBoard",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issues.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/project": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all projects associated with the board",
        "description": "Returns all projects that are associated with the board, for the given board Id. A project is associated with a board only if the board filter explicitly filters issues by the project and guaranties that all issues will come for one of those projects e.g. board's filter with \"project in (PR-1, PR-1) OR reporter = admin\" jql Projects are returned only if user can browse all projects that are associated with the board. Note, if the user does not have permission to view the board, no projects will be returned at all. Returned projects are ordered by the name.",
        "operationId": "getProjects",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the board's projects, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectJsonBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if board does not exist or the user does not have permission to access it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/properties": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all properties keys for a board",
        "description": "Returns the keys of all properties for the board identified by the id. The user who retrieves the property keys is required to have permissions to view the board.",
        "operationId": "getPropertiesKeys",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested property keys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "404": {
            "description": "Returned if the board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/properties/{propertyKey}": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get a property from a board",
        "description": "Returns the value of the property with a given key from the board identified by the provided id. The user who retrieves the property is required to have permissions to view the board.",
        "operationId": "getProperty",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "404": {
            "description": "Returned if the board does not exist or the property with given key is not found or the user doesn't have permissions to see it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "board"
        ],
        "summary": "Update a board's property",
        "description": "Sets the value of the specified board's property. You can use this resource to store a custom data against the board identified by the id. The user who stores the data is required to have permissions to modify the board.",
        "operationId": "setProperty",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the board property is successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "201": {
            "description": "Returned if the board property is successfully created."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "404": {
            "description": "Returned if the board does not exist or the user doesn't have permissions to see it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "board"
        ],
        "summary": "Delete a property from a board",
        "description": "Removes the property from the board identified by the id. Ths user removing the property is required to have permissions to modify the board.",
        "operationId": "deleteProperty",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the board property was removed successfully."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "404": {
            "description": "Returned if the board does not exist or if the property with given key is not found or the user doesn't have permissions to see it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/settings/refined-velocity": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get the value of the refined velocity setting",
        "description": "Returns the value of the setting for refined velocity chart",
        "operationId": "getRefinedVelocity",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the board exists and the property was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSettingBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the boardId is invalid (negative or not a number)."
          },
          "403": {
            "description": "Returned if the user does not have valid license."
          },
          "404": {
            "description": "Returned if the board with given id does not exist or if the property with given key is not found or the user doesn't have permissions to see it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "board"
        ],
        "summary": "Update the board's refined velocity setting",
        "description": "Sets the value of the specified board's refined velocity setting.",
        "operationId": "setRefinedVelocity",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The request containing value of the board's property. The value has to a valid, non-empty JSON conforming to http://tools.ietf.org/html/rfc4627. The maximum length of the property value is 32768 bytes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BooleanSettingBean"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BooleanSettingBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the board property is successfully updated."
          },
          "201": {
            "description": "Returned if the board property is successfully created."
          },
          "400": {
            "description": "Returned if the boardId is invalid (negative or not a number)."
          },
          "403": {
            "description": "Returned if the user does not have valid license."
          },
          "404": {
            "description": "Returned if the board with given id does not exist or if the property with given key is not found or the user doesn't have permissions to see it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/sprint": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all sprints from a board",
        "description": "Returns all sprints from a board, for a given board Id. This only includes sprints that the user has permission to view.",
        "operationId": "getAllSprints",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StringList"
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested sprints, at the specified page of the results. Sprints will be ordered first by state (i.e. closed, active, future) then by their position in the backlog.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/sprint/{sprintId}/issue": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all issues for a sprint",
        "description": "Get all issues you have access to that belong to the sprint from the board. Issue returned from this resource contains additional fields like: sprint, closedSprints, flagged and epic. Issues are returned ordered by rank. JQL order has higher priority than default rank.",
        "operationId": "getIssuesForSprint",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issues, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/board/{boardId}/version": {
      "get": {
        "tags": [
          "board"
        ],
        "summary": "Get all versions from a board",
        "description": "Returns all versions from a board, for a given board Id. This only includes versions that the user has permission to view. Note, if the user does not have permission to view the board, no versions will be returned at all. Returned versions are ordered by the name of the project from which they belong and then by sequence defined by user.",
        "operationId": "getAllVersions",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "released",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested versions, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/epic/none/issue": {
      "get": {
        "tags": [
          "epic"
        ],
        "summary": "Get issues without an epic",
        "description": "Returns all issues that do not belong to any epic. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.",
        "operationId": "getIssuesWithoutEpic_1",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issues, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "epic"
        ],
        "summary": "Remove issues from any epic",
        "description": "Removes issues from epics. The user needs to have the edit issue permission for all issue they want to remove from epics. The maximum number of issues that can be moved in one operation is 50.",
        "operationId": "removeIssuesFromEpic",
        "requestBody": {
          "description": "The issues to remove from epics.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAssignRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response is returned if operation was successful."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license or does not have permission to assign issues."
          },
          "404": {
            "description": "Returned if the epic does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/epic/{epicIdOrKey}": {
      "get": {
        "tags": [
          "epic"
        ],
        "summary": "Get an epic by id or key",
        "description": "Returns the epic for a given epic Id. This epic will only be returned if the user has permission to view it.",
        "operationId": "getEpic",
        "parameters": [
          {
            "name": "epicIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested epic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpicBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the epic does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "epic"
        ],
        "summary": "Update an epic's details",
        "description": "Performs a partial update of the epic. A partial update means that fields not present in the request JSON will not be updated. Valid values for color are color_1 to color_9.",
        "operationId": "partiallyUpdateEpic",
        "parameters": [
          {
            "name": "epicIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The epic properties to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpicUpdateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated epic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpicBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license or edit issue permission."
          },
          "404": {
            "description": "Returned if the epic does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/epic/{epicIdOrKey}/issue": {
      "get": {
        "tags": [
          "epic"
        ],
        "summary": "Get issues for a specific epic",
        "description": "Returns all issues that belong to the epic, for the given epic Id. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.",
        "operationId": "getIssuesForEpic_1",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "epicIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issues, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the epic does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "epic"
        ],
        "summary": "Move issues to a specific epic",
        "description": "Moves issues to an epic, for a given epic id. Issues can be only in a single epic at the same time. That means that already assigned issues to an epic, will not be assigned to the previous epic anymore. The user needs to have the edit issue permission for all issue they want to move and to the epic. The maximum number of issues that can be moved in one operation is 50.",
        "operationId": "moveIssuesToEpic",
        "parameters": [
          {
            "name": "epicIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The issues to move to the epic.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAssignRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response is returned if operation was successful."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license or does not have edit issue permission for all issues to assign or for the epic."
          },
          "404": {
            "description": "Returned if the epic does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/epic/{epicIdOrKey}/rank": {
      "put": {
        "tags": [
          "epic"
        ],
        "summary": "Rank an epic relative to another",
        "description": "Moves (ranks) an epic before or after a given epic. If rankCustomFieldId is not defined, the default rank field will be used.",
        "operationId": "rankEpics",
        "parameters": [
          {
            "name": "epicIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Bean which contains the information where the given epic should be ranked.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EpicRankRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response is returned if operation was successful."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if user does not a have valid license or does not have permission to rank. To rank issues user have to have schedule issue permission for epics that they want to rank."
          },
          "404": {
            "description": "Returned when the given epics in the path parameter or the request body do not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/issue/rank": {
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Rank issues before or after a given issue",
        "description": "Moves (ranks) issues before or after a given issue. At most 50 issues may be ranked at once. This operation may fail for some issues, although this will be rare. In that case the 207 status code is returned for the whole response and detailed information regarding each issue is available in the response body. If rankCustomFieldId is not defined, the default rank field will be used.",
        "operationId": "rankIssues",
        "requestBody": {
          "description": "Bean which contains list of issues to rank and information where it should be ranked.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueRankRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response is returned if operation was successful."
          },
          "207": {
            "description": "Returns the list of issue with status of rank operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialSuccessBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if user does not a have valid license or does not have permission to rank."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/issue/{issueIdOrKey}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a single issue with Agile fields",
        "description": "Returns a single issue, for a given issue Id or issue key. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic.",
        "operationId": "getIssue",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "updateHistory",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the issue does not exist or the user does not have permission to view issue."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/issue/{issueIdOrKey}/estimation": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get the estimation of an issue for a board",
        "description": "Returns the estimation of the issue and a fieldId of the field that is used for it.\nOriginal time internally stores and returns the estimation as a number of seconds.\nThe field used for estimation on the given board can be obtained from board configuration resource.\nMore information about the field are returned by edit meta resource or field resource.",
        "operationId": "getIssueEstimationForBoard",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the estimation of the issue and a fieldId of the field that is used for it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldValueBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the boardId was not provided, field does not exists or value was in wrong format."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if user does not a have valid license or does not have permission to edit issue."
          },
          "404": {
            "description": "Returned if the issue does not exist or the user does not have permission to view issue or the board does not exist or the user does not have permission to view board or the issue does not belong to the board."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Update the estimation of an issue for a board",
        "description": "Updates the estimation of the issue. boardId param is required. This param determines which field will be updated on a issue.\nNote that this resource changes the estimation field of the issue regardless of appearance the field on the screen.\nOriginal time tracking estimation field accepts estimation in formats like \"1w\", \"2d\", \"3h\", \"20m\" or number which represent number of minutes.\nHowever, internally the field stores and returns the estimation as a number of seconds.\nThe field used for estimation on the given board can be obtained from <a href=\"#agile/1.0/board-getConfiguration\">board configuration resource</a>.\nMore information about the field are returned by edit meta resource or field resource.",
        "operationId": "estimateIssueForBoard",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "boardId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Bean that contains value of a new estimation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldEditBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the estimation of the issue and a fieldId of the field that is used for it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldValueBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the boardId was not provided, field does not exists or value was in wrong format."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if user does not a have valid license or does not have permission to edit issue."
          },
          "404": {
            "description": "Returned if the issue does not exist or the user does not have permission to view issue or the board does not exist or the user does not have permission to view board or the issue does not belong to the board."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/sprint": {
      "post": {
        "tags": [
          "sprint"
        ],
        "summary": "Create a future sprint",
        "description": "Creates a future sprint. Sprint name and origin board id are required. Start and end date are optional. Notes: The sprint name is trimmed. Only Jira administrators can create synced sprints.",
        "operationId": "createSprint",
        "requestBody": {
          "description": "The sprint to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintCreateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the created sprint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the board does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/sprint/unmap": {
      "put": {
        "tags": [
          "sprint"
        ],
        "summary": "Unmap sprints from being synced",
        "description": "Sets the Synced flag to false for all sprints in the provided list.",
        "operationId": "unmapSprints",
        "requestBody": {
          "description": "The sprints to unmap.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnmapSprintsBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response is returned if operation was successful."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license or does not have permission to unmap sprints."
          },
          "404": {
            "description": "Returned if at least one sprint does not exist or user does not have permission to view to at least one sprint."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/sprint/unmap-all": {
      "put": {
        "tags": [
          "sprint"
        ],
        "summary": "Unmap all sprints from being synced",
        "description": "Sets the Synced flag to false for all sprints on this Jira instance. This operation is intended for cleanup only. It is highly destructive and not reversible. Use with caution.",
        "operationId": "unmapAllSprints",
        "responses": {
          "204": {
            "description": "Empty response is returned if operation was successful."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license or does not have permission to unmap sprints."
          },
          "404": {
            "description": "Returned if at least one sprint does not exist or user does not have permission to view to at least one sprint."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/sprint/{sprintId}": {
      "get": {
        "tags": [
          "sprint"
        ],
        "summary": "Get sprint by id",
        "description": "Returns a single sprint, for a given sprint Id. The sprint will only be returned if the user can view the board that the sprint was created on, or view at least one of the issues in the sprint.",
        "operationId": "getSprint",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested sprint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the sprint does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "sprint"
        ],
        "summary": "Update a sprint fully",
        "description": "Performs a full update of a sprint.\nA full update means that the result will be exactly the same as the request body.\nAny fields not present in the request JSON will be set to null.\nNotes:\n- Sprints that are in a closed state cannot be updated.\n- A sprint can be started by updating the state to 'active'. This requires the sprint to be in the 'future' state and have a startDate and endDate set.\n- A sprint can be completed by updating the state to 'closed'. This action requires the sprint to be in the 'active' state. This sets the completeDate to the time of the request.\n  If the sprint has offending issues (those which are complete, but have incomplete subtasks) it cannot be closed.\n  If issues are moved to new sprint user has to have issues edit permissions.\n- Other changes to state are not allowed.\n- The completeDate field cannot be updated manually.\n- Only Jira administrators can edit dates on sprints that are marked as synced.",
        "operationId": "updateSprint",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The updated sprint.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the updated sprint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the sprint does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "sprint"
        ],
        "summary": "Partially update a sprint",
        "description": "Performs a partial update of a sprint.\nA partial update means that fields not present in the request JSON will not be updated.\nNotes:\n- Sprints that are in a closed state cannot be updated.\n- A sprint can be started by updating the state to 'active'. This requires the sprint to be in the 'future' state and have a startDate and endDate set.\n- A sprint can be completed by updating the state to 'closed'. This action requires the sprint to be in the 'active' state. This sets the completeDate to the time of the request.\n  If the sprint has offending issues (those which are complete, but have incomplete subtasks) it cannot be closed.\n  If issues are moved to new sprint user has to have issues edit permissions.\n- Other changes to state are not allowed.\n- The completeDate field cannot be updated manually.\n- Sprint goal can be removed by updating it's value to empty string\n- Only Jira administrators can edit dates on sprints that are marked as synced.",
        "operationId": "partiallyUpdateSprint",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The updated sprint.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the updated sprint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if the sprint does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "sprint"
        ],
        "summary": "Delete a sprint",
        "description": "Deletes a sprint. Once a sprint is deleted, all issues in the sprint will be moved to the backlog. To delete a synced sprint, you must unsync it first.",
        "operationId": "deleteSprint",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the sprint was deleted successfully."
          },
          "400": {
            "description": "Returned if the sprint is active or completed."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license or does not have permission to delete sprints."
          },
          "404": {
            "description": "Returned if the sprint does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/sprint/{sprintId}/issue": {
      "get": {
        "tags": [
          "sprint"
        ],
        "summary": "Get all issues in a sprint",
        "description": "Returns all issues in a sprint, for a given sprint Id. This only includes issues that the user has permission to view. By default, the returned issues are ordered by rank.",
        "operationId": "getIssuesForSprint_1",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested issues, at the specified page of the results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license."
          },
          "404": {
            "description": "Returned if sprint does not exist or the user cannot view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "sprint"
        ],
        "summary": "Move issues to a sprint",
        "description": "Moves issues to a sprint, for a given sprint Id. Issues can only be moved to open or active sprints. The maximum number of issues that can be moved in one operation is 50.",
        "operationId": "moveIssuesToSprint",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The issues to move.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAssignRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response is returned if operation was successful."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license or does not have permission to assign issues."
          },
          "404": {
            "description": "Returned if the sprint does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/sprint/{sprintId}/properties": {
      "get": {
        "tags": [
          "sprint"
        ],
        "summary": "Get all properties keys for a sprint",
        "description": "Returns the keys of all properties for the sprint identified by the id. The user who retrieves the property keys is required to have permissions to view the sprint.",
        "operationId": "getPropertiesKeys_1",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested property keys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the sprint."
          },
          "404": {
            "description": "Returned if the sprint does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/sprint/{sprintId}/properties/{propertyKey}": {
      "get": {
        "tags": [
          "sprint"
        ],
        "summary": "Get a property for a sprint",
        "description": "Returns the value of the property with a given key from the sprint identified by the provided id. The user who retrieves the property is required to have permissions to view the sprint.",
        "operationId": "getProperty_1",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertyBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the sprint."
          },
          "404": {
            "description": "Returned if the sprint does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "sprint"
        ],
        "summary": "Update a sprint's property",
        "description": "Sets the value of the specified sprint's property. You can use this resource to store a custom data against the sprint identified by the id. The user who stores the data is required to have permissions to modify the sprint.",
        "operationId": "setProperty_1",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the sprint property is successfully updated."
          },
          "201": {
            "description": "Returned if the sprint property is successfully created."
          },
          "400": {
            "description": "Returned if the sprintId is invalid (negative or not a number)."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to edit the sprint"
          },
          "404": {
            "description": "Returned if the sprint with given id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "sprint"
        ],
        "summary": "Delete a sprint's property",
        "description": "Removes the property from the sprint identified by the id. Ths user removing the property is required to have permissions to modify the sprint.",
        "operationId": "deleteProperty_1",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the sprint property was removed successfully."
          },
          "400": {
            "description": "Returned if the sprintId is invalid (negative or not a number)."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to modify the sprint."
          },
          "404": {
            "description": "Returned if the sprint with given id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/agile/1.0/sprint/{sprintId}/swap": {
      "post": {
        "tags": [
          "sprint"
        ],
        "summary": "Swap the position of two sprints",
        "description": "Swap the position of the sprint with the second sprint.",
        "operationId": "swapSprint",
        "parameters": [
          {
            "name": "sprintId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The sprint to swap with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintSwapBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Returned if the sprint swap was performed successfully."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not a have valid license or does not have permission to at least one sprint."
          },
          "404": {
            "description": "Returned if at least one sprint does not exist or user does not have permission to view to at least one sprint."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/application-properties": {
      "get": {
        "tags": [
          "application-properties"
        ],
        "summary": "Get an application property by key",
        "description": "Returns an application property.",
        "operationId": "getProperty",
        "parameters": [
          {
            "name": "permissionLevel",
            "in": "query",
            "description": "when fetching a list specifies the permission level of all items in the list\nsee {@link com.atlassian.jira.bc.admin.ApplicationPropertiesService.EditPermissionLevel}",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "keyFilter",
            "in": "query",
            "description": "when fetching a list allows the list to be filtered by the property's start of key\ne.g. \"jira.lf.*\" whould fetch only those permissions that are editable and whose keys start with\n     *                        \"jira.lf.\". This is a regex.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "a String containing the property key.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the property exists and the currently authenticated user has permission to view it. Contains a full representation of the property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                },
                "examples": {
                  "example": {
                    "description": "example",
                    "value": [
                      {
                        "id": "jira.home",
                        "key": "jira.home",
                        "value": "/var/jira/jira-home",
                        "name": "jira.home",
                        "desc": "Jira home directory",
                        "type": "string",
                        "defaultValue": ""
                      },
                      {
                        "id": "jira.clone.prefix",
                        "key": "jira.clone.prefix",
                        "value": "CLONE -",
                        "name": "The prefix added to the Summary field of cloned issues",
                        "type": "string",
                        "defaultValue": "CLONE -"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "The action performed requires a logged in user."
          },
          "404": {
            "description": "Returned if the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/application-properties/advanced-settings": {
      "get": {
        "tags": [
          "application-properties"
        ],
        "summary": "Get all advanced settings properties",
        "description": "Returns the properties that are displayed on the \"General Configuration > Advanced Settings\" page.",
        "operationId": "getAdvancedSettings",
        "responses": {
          "200": {
            "description": "Returns all properties to display in the \"General Configuration > Advanced Settings\" page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                },
                "examples": {
                  "example": {
                    "description": "example",
                    "value": [
                      {
                        "id": "jira.home",
                        "key": "jira.home",
                        "value": "/var/jira/jira-home",
                        "name": "jira.home",
                        "desc": "Jira home directory",
                        "type": "string",
                        "defaultValue": ""
                      },
                      {
                        "id": "jira.clone.prefix",
                        "key": "jira.clone.prefix",
                        "value": "CLONE -",
                        "name": "The prefix added to the Summary field of cloned issues",
                        "type": "string",
                        "defaultValue": "CLONE -"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user is not an administrator."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/application-properties/{id}": {
      "put": {
        "tags": [
          "application-properties"
        ],
        "summary": "Update an application property",
        "description": "Update an application property via PUT. The \"value\" field present in the PUT will override the existing value.",
        "operationId": "setPropertyViaRestfulTable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "a String containing the property key.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the property exists and the currently authenticated user has permission to edit it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                }
              }
            }
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to edit the property."
          },
          "404": {
            "description": "Returned if the property does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/applicationrole": {
      "get": {
        "tags": [
          "applicationrole"
        ],
        "summary": "Get all application roles in the system",
        "description": "Returns all application roles in the system.",
        "operationId": "getAll",
        "responses": {
          "200": {
            "description": "Returns all ApplicationRoles in the system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRoleBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user is not an administrator."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "applicationrole"
        ],
        "summary": "Update application roles",
        "description": "Updates the ApplicationRoles with the passed data if the version hash is the same as the server. Only the groups and default groups setting of the role may be updated. Requests to change the key or the name of the role will be silently ignored. It is acceptable to pass only the roles that are updated as roles that are present in the server but not in data to update with, will not be deleted.",
        "operationId": "putBulk",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "the data to update the roles with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRoleBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated ApplicationRoles if the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRoleBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user does not have permission to edit roles."
          },
          "403": {
            "description": "Returned if the current user is not an administrator."
          },
          "404": {
            "description": "Returned if the role does not exist."
          },
          "412": {
            "description": "Returned if the versionHash is not null and contains a different version to the server."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/applicationrole/{key}": {
      "get": {
        "tags": [
          "applicationrole"
        ],
        "summary": "Get application role by key",
        "description": "Returns the ApplicationRole with passed key if it exists.",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "the key of the role to use.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the ApplicationRole if it exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRoleBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user is not an administrator."
          },
          "404": {
            "description": "Returned if the role does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "applicationrole"
        ],
        "summary": "Update application role",
        "description": "Updates the ApplicationRole with the passed data. Only the groups and default groups setting of the role may be updated. Requests to change the key or the name of the role will be silently ignored.",
        "operationId": "put_2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "versionHash",
            "in": "header",
            "description": "the hash of the version to update. Optional Param",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "the key of the role to update.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "the data to update the role with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRoleBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated ApplicationRole if the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRoleBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user does not have permission to edit roles."
          },
          "403": {
            "description": "Returned if the current user is not an administrator."
          },
          "404": {
            "description": "Returned if the role does not exist."
          },
          "412": {
            "description": "Returned if the versionHash is not null and contains a different version to the server."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/attachment/meta": {
      "get": {
        "tags": [
          "attachment"
        ],
        "summary": "Get attachment capabilities",
        "description": "Returns the meta information for an attachments, specifically if they are enabled and the maximum upload size allowed.",
        "operationId": "getAttachmentMeta",
        "responses": {
          "200": {
            "description": "JSON representation of the attachment capabilities. Consumers of this resource may also need to check if the logged in user has permission to upload or otherwise manipulate attachments using the com.atlassian.jira.rest.v2.permission.PermissionsResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentMetaBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/attachment/{id}": {
      "get": {
        "tags": [
          "attachment"
        ],
        "summary": "Get the meta-data for an attachment, including the URI of the actual attached file",
        "description": "Returns the meta-data for an attachment, including the URI of the actual attached file.",
        "operationId": "getAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the attachment to view",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON representation of the attachment meta-data. The representation does not contain the attachment itself, but contains a URI that can be used to download the actual attached file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentBean"
                }
              }
            }
          },
          "403": {
            "description": "The calling user is not permitted to view the requested attachment."
          },
          "404": {
            "description": "Any of: there is no attachment with the requested id, attachments feature is disabled"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "attachment"
        ],
        "summary": "Delete an attachment from an issue",
        "description": "Remove an attachment from an issue.",
        "operationId": "removeAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the attachment to remove",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Removal was successful"
          },
          "403": {
            "description": "The calling user is not permitted to remove the requested attachment."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/attachment/{id}/expand/human": {
      "get": {
        "tags": [
          "attachment"
        ],
        "summary": "Get human-readable attachment expansion",
        "description": "Tries to expand an attachment. Output is human-readable and subject to change.",
        "operationId": "expandForHumans",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the attachment to expand.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON representation of the attachment expanded contents. Empty entry list means that attachment cannot be expanded. It's either empty, corrupt or not an archive at all.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanReadableArchive"
                }
              }
            }
          },
          "403": {
            "description": "The calling user is not permitted to view the requested attachment."
          },
          "404": {
            "description": "Any of: there is no attachment with the requested id, attachments feature is disabled"
          },
          "409": {
            "description": "The archive format is not supported. since v6.4"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/attachment/{id}/expand/raw": {
      "get": {
        "tags": [
          "attachment"
        ],
        "summary": "Get raw attachment expansion",
        "description": "Tries to expand an attachment. Output is raw and should be backwards-compatible through the course of time.",
        "operationId": "expandForMachines",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the attachment to expand.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON representation of the attachment expanded contents. Empty entry list means that attachment cannot be expanded. It's either empty, corrupt or not an archive at all.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentArchiveImpl"
                }
              }
            }
          },
          "403": {
            "description": "The calling user is not permitted to view the requested attachment."
          },
          "404": {
            "description": "Any of: there is no attachment with the requested id, attachments feature is disabled"
          },
          "409": {
            "description": "The archive format is not supported. since v6.4"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/avatar/{type}/system": {
      "get": {
        "tags": [
          "avatar"
        ],
        "summary": "Get all system avatars",
        "description": "Returns all system avatars of the given type.",
        "operationId": "getAllSystemAvatars",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "the avatar type",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a map containing a list of system avatars. A map is returned to be consistent with the shape of the project/KEY/avatars REST end point.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if accessed by anonymous user"
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the list of avatars."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/avatar/{type}/temporary": {
      "post": {
        "tags": [
          "avatar"
        ],
        "summary": "Create temporary avatar",
        "description": "Creates temporary avatar",
        "operationId": "storeTemporaryAvatar",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "name of file being uploaded",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "size of file",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "the avatar type",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "201": {
            "description": "temporary avatar cropping instructions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarCroppingBean"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed. For example filesize is beyond max attachment size."
          },
          "403": {
            "description": "Returned if the request does not contain a valid XSRF token"
          },
          "500": {
            "description": "Returned if an error occurs while converting temporary avatar to real avatar"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/avatar/{type}/temporaryCrop": {
      "post": {
        "tags": [
          "avatar"
        ],
        "summary": "Update avatar cropping",
        "description": "Updates the cropping instructions of the temporary avatar",
        "operationId": "createAvatarFromTemporary",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "the avatar type",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "cropping instructions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarCroppingBean"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Returned if the cropping coordinates are invalid"
          },
          "500": {
            "description": "Returned if an error occurs while cropping the temporary avatar"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/index-snapshot/{nodeId}": {
      "put": {
        "tags": [
          "cluster"
        ],
        "summary": "Request node index snapshot",
        "description": "Request current index from node (the request is processed asynchronously). This method is deprecated as it is Lucene specific and is planned for removal in Jira 11.",
        "operationId": "requestCurrentIndexFromNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "ID of the node to request index from",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          },
          "404": {
            "description": "Returned if the node with this nodeID doesn't exist"
          },
          "405": {
            "description": "Returned if you call this method, but don't have Jira Data Center"
          }
        },
        "deprecated": true,
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/node/{nodeId}": {
      "delete": {
        "tags": [
          "cluster"
        ],
        "summary": "Delete a cluster node",
        "description": "Delete the node from the cluster if state of node is OFFLINE.",
        "operationId": "deleteNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "ID of the node to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Removal was successful"
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          },
          "404": {
            "description": "Returned if the node with this nodeID doesn't exist"
          },
          "405": {
            "description": "Returned if you call this method, but don't have Jira Data Center"
          },
          "500": {
            "description": "Returned if the server can't delete the node"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/node/{nodeId}/offline": {
      "put": {
        "tags": [
          "cluster"
        ],
        "summary": "Update node state to offline",
        "description": "Change the node's state to offline if the node is reporting as active, but is not alive.",
        "operationId": "changeNodeStateToOffline",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "ID of the node to change state",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "State change was successful"
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          },
          "404": {
            "description": "Returned if the node with this nodeID doesn't exist"
          },
          "405": {
            "description": "Returned if you call this method, but don't have Jira Data Center"
          },
          "500": {
            "description": "Returned if the server can't change the node's state"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/nodes": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get all cluster nodes",
        "description": "Returns all nodes in cluster.",
        "operationId": "getAllNodes",
        "responses": {
          "200": {
            "description": "Returns a list of all nodes in the cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          },
          "405": {
            "description": "Returned if you call this method, but don't have Jira Data Center"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/zdu/approve": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Approve cluster upgrade",
        "description": "Approves the cluster upgrade.",
        "operationId": "approveUpgrade",
        "responses": {
          "200": {
            "description": "Upgrade approval was successful"
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          },
          "409": {
            "description": "Returned if there is no ongoing upgrade to approve"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/zdu/cancel": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Cancel cluster upgrade",
        "description": "Cancels the ongoing cluster upgrade.",
        "operationId": "cancelUpgrade",
        "responses": {
          "201": {
            "description": "Upgrade cancellation was successful"
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          },
          "409": {
            "description": "Returned if there is no ongoing upgrade to cancel"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/zdu/retryUpgrade": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Retry cluster upgrade",
        "description": "Retries the cluster upgrade.",
        "operationId": "acknowledgeErrors",
        "responses": {
          "200": {
            "description": "Upgrade retry was successful"
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          },
          "409": {
            "description": "Returned if there is no failed upgrade to retry"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/zdu/start": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Start cluster upgrade",
        "description": "Starts the cluster upgrade.",
        "operationId": "setReadyToUpgrade",
        "responses": {
          "201": {
            "description": "Upgrade start was successful"
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          },
          "409": {
            "description": "Returned if there is already an ongoing upgrade"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/cluster/zdu/state": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get cluster upgrade state",
        "description": "Returns the current state of the cluster upgrade.",
        "operationId": "getState",
        "responses": {
          "200": {
            "description": "Returns the current state of the cluster upgrade.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterState"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user doesn't have admin permissions"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/comment/{commentId}/properties": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "Get properties keys of a comment",
        "description": "Returns the keys of all properties for the comment identified by the key or by the id.",
        "operationId": "getPropertiesKeys_1",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "the comment from which keys will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all properties in the comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the comment key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to browse the comment."
          },
          "404": {
            "description": "Returned if the comment with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/comment/{commentId}/properties/{propertyKey}": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "Get a property from a comment",
        "description": "Returns the value of the property with a given key from the comment identified by the key or by the id. The user who retrieves the property is required to have permissions to read the comment.",
        "operationId": "getProperty_2",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "the key of the property to return.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "the comment from which the property will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the value of the property with a given key from the comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertyBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the comment key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to browse the comment."
          },
          "404": {
            "description": "Returned if the comment with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "put": {
        "tags": [
          "comment"
        ],
        "summary": "Set a property on a comment",
        "description": "Sets the value of the specified comment's property.",
        "operationId": "setProperty_1",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "the key of the comment's property. The maximum length of the key is 255 bytes.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "the comment on which the property will be set.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "the request containing value of the comment's property. The value has to be a valid, non-empty JSON conforming to http://tools.ietf.org/html/rfc4627. The maximum length of the property value is 32768 bytes.",
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "Returned if the comment property is successfully updated."
          },
          "201": {
            "description": "Returned if the comment property is successfully created."
          },
          "400": {
            "description": "Returned if the comment key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer the comment."
          },
          "404": {
            "description": "Returned if the comment with given key or id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "delete": {
        "tags": [
          "comment"
        ],
        "summary": "Delete a property from a comment",
        "description": "Removes the property from the comment identified by the key or by the id. Ths user removing the property is required to have permissions to administer the comment.",
        "operationId": "deleteProperty_2",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "the key of the property to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "the comment from which the property will be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the comment property was removed successfully."
          },
          "400": {
            "description": "Returned if the comment key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to edit the comment."
          },
          "404": {
            "description": "Returned if the comment with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/component": {
      "post": {
        "tags": [
          "component"
        ],
        "summary": "Create component",
        "description": "Create a component via POST.",
        "operationId": "createComponent",
        "requestBody": {
          "description": "the request containing value of the component's property. The value has to be a valid, non-empty JSON conforming to http://tools.ietf.org/html/rfc4627. The maximum length of the property value is 32768 bytes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returned if the component is created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the caller is not logged in and does not have permission to create components in the project."
          },
          "403": {
            "description": "Returned if the caller is authenticated and does not have permission to create components in the project."
          },
          "404": {
            "description": "Returned if the project does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/component/page": {
      "get": {
        "tags": [
          "component"
        ],
        "summary": "Get paginated components",
        "description": "Returns paginated list of filtered active components",
        "operationId": "getPaginatedComponents",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "description": "the maximum number of components to return",
            "schema": {
              "type": "string",
              "example": null,
              "default": "100"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "the string that components names will be matched with",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIds",
            "in": "query",
            "description": "the set of project ids to filter components",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "the index of the first components to return",
            "schema": {
              "type": "string",
              "example": null,
              "default": "0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated list of components",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/component/{id}": {
      "get": {
        "tags": [
          "component"
        ],
        "summary": "Get project component",
        "description": "Returns a project component.",
        "operationId": "getComponent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "a String containing the component key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full JSON representation of a project component.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if there is no component with the given key, or if the calling user does not have permission to view the component."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "component"
        ],
        "summary": "Update a component",
        "description": "Modify a component via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field is not present, it is silently ignored.",
        "operationId": "updateComponent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The component to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "the request containing value of the component's property. The value has to be a valid, non-empty JSON conforming to http://tools.ietf.org/html/rfc4627. The maximum length of the property value is 32768 bytes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if the component is successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentBean"
                }
              }
            }
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to edit the component."
          },
          "404": {
            "description": "Returned if the component does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "component"
        ],
        "summary": "Delete a project component",
        "description": "Delete a project component.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "moveIssuesTo",
            "in": "query",
            "description": "The new component applied to issues whose 'id' component will be deleted. If this value is null, then the 'id' component is simply removed from the related isues.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The component to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the component is successfully deleted."
          },
          "204": {
            "description": "Returned if the component is successfully deleted."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to delete the component."
          },
          "404": {
            "description": "Returned if the component does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/component/{id}/relatedIssueCounts": {
      "get": {
        "tags": [
          "component"
        ],
        "summary": "Get component related issues",
        "description": "Returns counts of issues related to this component.",
        "operationId": "getComponentRelatedIssues",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "a String containing the component id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns counts of issues related to this component.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentIssueCountsBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the component does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/configuration": {
      "get": {
        "tags": [
          "configuration"
        ],
        "summary": "Get Jira configuration details",
        "description": "Returns the information if the optional features in Jira are enabled or disabled. If the time tracking is enabled, it also returns the detailed information about time tracking configuration.",
        "operationId": "getConfiguration_1",
        "responses": {
          "200": {
            "description": "Returned the configuration of optional features in Jira.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/customFieldOption/{id}": {
      "get": {
        "tags": [
          "customFieldOption"
        ],
        "summary": "Get custom field option by ID",
        "description": "Returns a full representation of the Custom Field Option that has the given id.",
        "operationId": "getCustomFieldOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "a String containing an Custom Field Option id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the Custom Field Option exists and is visible by the calling user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOptionBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the Custom Field Option does not exist, or is not visible to the calling user."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/customFields": {
      "get": {
        "tags": [
          "customFields"
        ],
        "summary": "Get custom fields with pagination",
        "description": "Returns a list of Custom Fields in the given range.",
        "operationId": "getCustomFields",
        "parameters": [
          {
            "name": "sortColumn",
            "in": "query",
            "description": "The column by which to sort the returned custom fields.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "A list of custom field types to filter the custom fields.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A query string used to search custom fields.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of custom fields to return.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order in which to sort the returned custom fields.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "screenIds",
            "in": "query",
            "description": "A list of screen IDs to filter the custom fields.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "lastValueUpdate",
            "in": "query",
            "description": "The last value update to filter the custom fields.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIds",
            "in": "query",
            "description": "A list of project IDs to filter the custom fields.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The starting index of the returned custom fields.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if a custom field with the given customFieldId exists and user has permission to it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if a custom field with the given customFieldId does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "customFields"
        ],
        "summary": "Delete custom fields in bulk",
        "description": "Deletes custom fields in bulk.",
        "operationId": "bulkDeleteCustomFields",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "A list of custom field IDs to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if at least one custom field was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteResponseBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if no fields were removed"
          },
          "423": {
            "description": "Returned if could not obtain a cluster lock"
          },
          "503": {
            "description": "Returned if license or feature flag check failed"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/customFields/{customFieldId}/options": {
      "get": {
        "tags": [
          "customFields"
        ],
        "summary": "Get custom field options",
        "description": "Returns custom field's options defined in a given context composed of projects and issue types.",
        "operationId": "getCustomFieldOptions",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of results to return.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueTypeIds",
            "in": "query",
            "description": "A list of issue type IDs in a context.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "A string used to filter options.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "sortByOptionName",
            "in": "query",
            "description": "Flag to sort options by their names.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "customFieldId",
            "in": "path",
            "description": "The ID of the custom field.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "useAllContexts",
            "in": "query",
            "description": "Flag to fetch all options regardless of context, project IDs, or issue type IDs.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of options to return.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIds",
            "in": "query",
            "description": "A list of project IDs in a context.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if a custom field with the given customFieldId exists and user has permission to it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOptionsBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if a custom field with the given customFieldId does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/dashboard": {
      "get": {
        "tags": [
          "dashboard"
        ],
        "summary": "Get all dashboards with optional filtering",
        "description": "Returns a list of all dashboards, optionally filtering them.",
        "operationId": "list",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "An optional filter that is applied to the list of dashboards.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "A hint as to the maximum number of dashboards to return in each call.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first dashboard to return (0-based).",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of dashboards.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardsBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if there is an invalid startAt parameter."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/dashboard/{dashboardId}/items/{itemId}/properties": {
      "get": {
        "tags": [
          "dashboard"
        ],
        "summary": "Get all properties keys for a dashboard item",
        "description": "Returns the keys of all properties for the dashboard item identified by the id.",
        "operationId": "getPropertiesKeys",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "The dashboard item from which keys will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "dashboardId",
            "in": "path",
            "description": "The dashboard id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the dashboard item was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the dashboard item id is invalid."
          },
          "404": {
            "description": "Returned if the dashboard item with given id does not exist or user does not have permissions to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}": {
      "get": {
        "tags": [
          "dashboard"
        ],
        "summary": "Get a property from a dashboard item",
        "description": "Returns the value of the property with a given key from the dashboard item identified by the id.",
        "operationId": "getProperty_1",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the property to return.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The dashboard item from which the property will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "dashboardId",
            "in": "path",
            "description": "The dashboard id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the dashboard item property was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertyBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the dashboard item id is invalid."
          },
          "404": {
            "description": "Returned if the dashboard item with given id does not exist or user does not have permissions to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "dashboard"
        ],
        "summary": "Set a property on a dashboard item",
        "description": "Sets the value of the property with a given key on the dashboard item identified by the id.",
        "operationId": "setProperty",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the dashboard item's property. The maximum length of the key is 255 bytes.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The dashboard item on which the property will be set.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "dashboardId",
            "in": "path",
            "description": "The dashboard id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the dashboard item property is successfully updated."
          },
          "201": {
            "description": "Returned if the dashboard item property is successfully created."
          },
          "400": {
            "description": "Returned if the dashboard item id is invalid."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer the dashboard item."
          },
          "404": {
            "description": "Returned if the dashboard item with given id does not exist or user does not have permissions to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "dashboard"
        ],
        "summary": "Delete a property from a dashboard item",
        "description": "Removes the property from the dashboard item identified by the key or by the id.",
        "operationId": "deleteProperty_1",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the property to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The dashboard item from which the property will be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "dashboardId",
            "in": "path",
            "description": "The dashboard id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the dashboard item property was removed successfully."
          },
          "400": {
            "description": "Returned if the dashboard item id is invalid."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to edit the dashboard item."
          },
          "404": {
            "description": "Returned if the dashboard item with given id does not exist or user does not have permissions to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/dashboard/{id}": {
      "get": {
        "tags": [
          "dashboard"
        ],
        "summary": "Get a single dashboard by ID",
        "description": "Returns a single dashboard.",
        "operationId": "getDashboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The dashboard id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single dashboard.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if there is no dashboard with the specified id, or if the user does not have permission to see it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/email-templates": {
      "get": {
        "tags": [
          "email-templates"
        ],
        "summary": "Get email templates as zip file",
        "description": "Creates a zip file containing email templates at local home and returns the file.",
        "operationId": "downloadEmailTemplates",
        "responses": {
          "200": {
            "description": "Zipping was successful"
          },
          "403": {
            "description": "User is not a system admin"
          },
          "500": {
            "description": "IOException happen or any unexpected exception was thrown"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "email-templates"
        ],
        "summary": "Update email templates with zip file",
        "description": "Extracts given zip file to temporary templates folder. If the folder already exists it will replace it's content",
        "operationId": "uploadEmailTemplates",
        "requestBody": {
          "content": {
            "application/zip": {
              "schema": {
                "type": "object",
                "example": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Templates has extracted"
          },
          "403": {
            "description": "User is not a system admin"
          },
          "500": {
            "description": "IOException happen or any unexpected exception is thrown"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/email-templates/apply": {
      "post": {
        "tags": [
          "email-templates"
        ],
        "summary": "Update email templates with previously uploaded pack",
        "description": "Replaces the current email templates pack with previously uploaded one, if exists.",
        "operationId": "applyEmailTemplates",
        "responses": {
          "200": {
            "description": "Templates were replaced"
          },
          "400": {
            "description": "There were no templates previously uploaded"
          },
          "500": {
            "description": "Exception happened during applying process"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/email-templates/revert": {
      "post": {
        "tags": [
          "email-templates"
        ],
        "summary": "Update email templates to default",
        "description": "Replaces the current email templates pack with default templates, which are copied over from Jira binaries.",
        "operationId": "revertEmailTemplatesToDefault",
        "responses": {
          "200": {
            "description": "Templates were restored to default"
          },
          "403": {
            "description": "User is not a system admin"
          },
          "500": {
            "description": "Any unexpected exception is thrown"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/email-templates/types": {
      "get": {
        "tags": [
          "email-templates"
        ],
        "summary": "Get email types for templates",
        "description": "Returns a list of root templates mapped with Event Types. The list can be used to decide which test emails to send.",
        "operationId": "getEmailTypes",
        "responses": {
          "200": {
            "description": "Reading email types was successful"
          },
          "403": {
            "description": "User is not a system admin"
          },
          "500": {
            "description": "Any unexpected exception is thrown"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/field": {
      "get": {
        "tags": [
          "field"
        ],
        "summary": "Get all fields, both System and Custom",
        "description": "Returns a list of all fields, both System and Custom",
        "operationId": "getFields",
        "responses": {
          "200": {
            "description": "Returns a list of all fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged-in and don't have access to any project"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "field"
        ],
        "summary": "Create a custom field using a definition",
        "description": "Creates a custom field using a definition",
        "operationId": "createCustomField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldDefinitionJsonBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom field was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid"
          },
          "500": {
            "description": "Returned if exception occured during custom field creation"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/filter": {
      "post": {
        "tags": [
          "filter"
        ],
        "summary": "Create a new filter",
        "description": "Creates a new filter, and returns newly created filter. Currently sets permissions just using the users default sharing permissions",
        "operationId": "createFilter",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StringList"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a newly created filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. filter name was not provided)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/filter/defaultShareScope": {
      "get": {
        "tags": [
          "filter"
        ],
        "summary": "Get default share scope",
        "description": "Returns the default share scope of the logged-in user",
        "operationId": "getDefaultShareScope",
        "responses": {
          "200": {
            "description": "Returns the default share scope of the logged-in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultShareScopeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if there is a problem looking up preferences for the logged-in user"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "filter"
        ],
        "summary": "Set default share scope",
        "description": "Sets the default share scope of the logged-in user. Available values are: AUTHENTICATED (for sharing with all logged-in users) and PRIVATE (for no shares).",
        "operationId": "setDefaultShareScope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultShareScopeBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new default share scope of the logged-in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultShareScopeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if there is a problem setting the preferences for the logged-in user"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/filter/favourite": {
      "get": {
        "tags": [
          "filter"
        ],
        "summary": "Get favourite filters",
        "description": "Returns the favourite filters of the logged-in user",
        "operationId": "getFavouriteFilters",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StringList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of favourite filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged-in and don't have access to any project"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/filter/{id}": {
      "get": {
        "tags": [
          "filter"
        ],
        "summary": "Get a filter by ID",
        "description": "Returns a filter given an id",
        "operationId": "getFilter",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StringList"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged-in and don't have access to any project"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "filter"
        ],
        "summary": "Update an existing filter",
        "description": "Updates an existing filter, and returns its new value. The following properties of a filter can be updated: 'jql', 'name', 'description'. Additionally, administrators can also update the 'owner' field. To get, set or unset 'favourite', use rest/api/1.0/filters/{id}/favourite with GET, PUT and DELETE methods instead.",
        "operationId": "editFilter",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StringList"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. filter name was not provided)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "filter"
        ],
        "summary": "Delete a filter",
        "description": "Delete a filter",
        "operationId": "deleteFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the filter to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the filter was removed successfully."
          },
          "400": {
            "description": "Returned if an error occurs."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/filter/{id}/columns": {
      "get": {
        "tags": [
          "filter"
        ],
        "summary": "Get default columns for filter",
        "description": "Returns the default columns for the given filter. Currently logged in user will be used as the user making such request.",
        "operationId": "defaultColumns_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of columns for configured for the given user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnLayout"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the filter does not have any columns."
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the column configuration."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "filter"
        ],
        "summary": "Set default columns for filter",
        "description": "Sets the default columns for the given filter",
        "operationId": "setColumns_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "columns": {
                    "type": "array",
                    "example": null,
                    "items": {
                      "type": "string",
                      "example": null
                    }
                  }
                },
                "example": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when the columns are saved successfully"
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the column configuration."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "filter"
        ],
        "summary": "Reset columns for filter",
        "description": "Resets the columns for the given filter such that the filter no longer has its own column config",
        "operationId": "resetColumns_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned when the columns are reset/removed successfully"
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the column configuration."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/filter/{id}/permission": {
      "get": {
        "tags": [
          "filter"
        ],
        "summary": "Get all share permissions of filter",
        "description": "Returns all share permissions of the given filter",
        "operationId": "getSharePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of share permissions associated with the given filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterPermissionBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "404": {
            "description": "Returned when filter with given id does not exist or when the user does not have permissions to view the filter."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "filter"
        ],
        "summary": "Add share permissions to filter",
        "description": "Adds a share permissions to the given filter. Adding a global permission removes all previous permissions from the filter",
        "operationId": "addSharePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharePermissionInputBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns share permissions associated with the given filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterPermissionBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned given permission input bean is invalid or when user does not have the permission to share filters or when the user cannot edit the given filter."
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "404": {
            "description": "Returned when filter with given id does not exist or when the user does not have permissions to view the filter."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/filter/{id}/permission/{permission-id}": {
      "delete": {
        "tags": [
          "filter"
        ],
        "summary": "Remove share permissions from filter",
        "description": "Removes a share permissions from the given filter",
        "operationId": "deleteSharePermission",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "The permission id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "permission-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if successful."
          },
          "404": {
            "description": "Returned when filter or permission with given id does not exist or when the user does not have permissions to view the filter."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/filter/{id}/permission/{permissionId}": {
      "get": {
        "tags": [
          "filter"
        ],
        "summary": "Get a single share permission of filter",
        "description": "Returns a single share permission of the given filter",
        "operationId": "getSharePermission",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "The permission id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The filter id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a share permission associated with the given filter and permission-id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterPermissionBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "404": {
            "description": "Returned when filter or permission with given id does not exist or when the user does not have permissions to view the filter."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/group": {
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Create a group with given parameters",
        "description": "Creates a group by given group parameter",
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddGroupBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns full representation of a Jira group in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if user requested an empty group name or group already exists"
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user does not have administrator permissions."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Delete a specified group",
        "description": "Deletes a group by given group parameter",
        "operationId": "removeGroup",
        "parameters": [
          {
            "name": "groupname",
            "in": "query",
            "description": "The name of the group to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "swapGroup",
            "in": "query",
            "description": "A different group to transfer the restrictions to.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the group was deleted."
          },
          "400": {
            "description": "Returned if user requested a group that does not exist"
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user does not have administrator permissions."
          },
          "404": {
            "description": "Returned if the requested group was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/group/member": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Get users from a specified group",
        "description": "Returns a paginated list of users who are members of the specified group and its subgroups",
        "operationId": "getUsersFromGroup",
        "parameters": [
          {
            "name": "includeInactiveUsers",
            "in": "query",
            "description": "Include inactive users.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of users to return.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "groupname",
            "in": "query",
            "description": "The group name.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first user in group to return.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of users in the group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserJsonBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the name of the provided group is empty"
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the calling user is not admin or sysadmin"
          },
          "404": {
            "description": "Returned if the specified group does not exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/group/user": {
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Add a user to a specified group",
        "description": "Adds given user to a group",
        "operationId": "addUserToGroup",
        "parameters": [
          {
            "name": "groupname",
            "in": "query",
            "description": "A name of requested group.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserToGroupBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns full representation of a Jira group in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if user requested an empty group name or the user already belongs to the group."
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user does not have administrator permissions."
          },
          "404": {
            "description": "Returned if the requested group was not found or requested user was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Remove a user from a specified group",
        "description": "Removes given user from a group",
        "operationId": "removeUserFromGroup",
        "parameters": [
          {
            "name": "groupname",
            "in": "query",
            "description": "A name of requested group.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "User to remove from a group",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the user was removed from the group."
          },
          "400": {
            "description": "Returned if user requested an empty group name"
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user does not have administrator permissions."
          },
          "404": {
            "description": "Returned if the requested group was not found or the requested user wan not found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/groups/picker": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get groups matching a query",
        "description": "Returns groups with substrings matching a given query",
        "operationId": "findGroups",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "description": "Maximum number of results to return",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "A String to match groups against",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "List of groups to exclude",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Username for the context",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of matching groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSuggestionsBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/groupuserpicker": {
      "get": {
        "tags": [
          "groupuserpicker"
        ],
        "summary": "Get users and groups matching query with highlighting",
        "description": "Returns a list of users and groups matching query with highlighting",
        "operationId": "findUsersAndGroups",
        "parameters": [
          {
            "name": "issueTypeId",
            "in": "query",
            "description": "The list of issue type ids to further restrict the search",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of users to return",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "A string used to search username, Name or e-mail address",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "showAvatar",
            "in": "query",
            "description": "Show avatar",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "The list of project ids to further restrict the search",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "fieldId",
            "in": "query",
            "description": "The custom field id",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users and groups matching query with highlighting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAndGroupsBean"
                }
              }
            }
          },
          "403": {
            "description": "Returned if the user does not have permission to view users and groups"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/index-snapshot": {
      "get": {
        "tags": [
          "index-snapshot"
        ],
        "summary": "Get list of available index snapshots",
        "description": "Lists available index snapshots absolute paths with timestamps",
        "operationId": "listIndexSnapshot",
        "responses": {
          "200": {
            "description": "Returns the list consisting of absolute paths to currently available index snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexSnapshotBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the caller doesn't have sufficient privileges"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "index-snapshot"
        ],
        "summary": "Create index snapshot if not in progress",
        "description": "Starts taking an index snapshot if no other snapshot creation process is in progress",
        "operationId": "createIndexSnapshot",
        "responses": {
          "202": {
            "description": "Returns the absolute path which index snapshot will be placed in, after it's created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexSnapshotPromiseBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the caller doesn't have sufficient privileges"
          },
          "409": {
            "description": "Returned if snapshot creation is already in progress"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/index-snapshot/isRunning": {
      "get": {
        "tags": [
          "index-snapshot"
        ],
        "summary": "Get index snapshot creation status",
        "description": "Checks if index snapshot creation is currently running",
        "operationId": "isIndexSnapshotRunning",
        "responses": {
          "200": {
            "description": "Returns status of current snapshot creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexSnapshotStatusBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the caller doesn't have sufficient privileges"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/index/summary": {
      "get": {
        "tags": [
          "index"
        ],
        "summary": "Get index condition summary",
        "description": "Returns a summary of the index condition of the current node.\nThe returned data consists of:\n- `nodeId` - Node identifier.\n- `reportTime` - Time of this report creation.\n- `issueIndex` - Summary of the issue index status.\n- `replicationQueues` - Map of index replication queues, where keys represent nodes from which replication operations came from.\n\n`issueIndex` can contain:\n    - `indexReadable` - If `false` the endpoint failed to read data from the issue index (check Jira logs for detailed stack trace), otherwise `true`.\n    - `countInDatabase` - Count of issues found in the database.\n    - `countInIndex` - Count of issues found while querying the index.\n    - `lastUpdatedInDatabase` - Time of the last update of the issue found in the database.\n    - `lastUpdatedInIndex` - Time of the last update of the issue found while querying the index.\n`replicationQueues`'s map values can contain:\n    - `lastConsumedOperation` - Last executed index replication operation by the current node from the sending node's queue.\n    - `lastConsumedOperation.id` - Identifier of the operation.\n    - `lastConsumedOperation.replicationTime` - Time when the operation was sent to other nodes.\n    - `lastOperationInQueue` - Last index replication operation in the sending node's queue.\n    - `lastOperationInQueue.id` - Identifier of the operation.\n    - `lastOperationInQueue.replicationTime` - Time when the operation was sent to other nodes.\n    - `queueSize` - Number of operations in the queue from the sending node to the current node.",
        "operationId": "getIndexSummary",
        "responses": {
          "200": {
            "description": "Returns an object with data about the condition of the Jira node's index",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexSummaryBean"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the current authenticated user does not have admin permission"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/issue": {
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Create an issue or sub-task from json",
        "description": "Creates an issue or a sub-task from a JSON representation.\nThe fields that can be set on create, in either the fields parameter or the update parameter can be determined using the /rest/api/2/issue/createmeta resource.\nIf a field is not configured to appear on the create screen, then it will not be in the createmeta, and a field\nvalidation error will occur if it is submitted.\nCreating a sub-task is similar to creating a regular issue, with two important differences:\n- the issueType field must correspond to a sub-task issue type (you can use /issue/createmeta to discover sub-task issue types), and\n- you must provide a parent field in the issue create request containing the id or key of the parent issue.\nThe updateHistory param adds the project that this issue is created in, to the current user's project history, if set to true (by default, the project history is not updated).\nYou can view the project history in the Jira application, via the Projects dropdown.",
        "operationId": "createIssue",
        "parameters": [
          {
            "name": "updateHistory",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Issue update bean",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueUpdateBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns a link to the created issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid field values, and so forth)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/archive": {
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Archive list of issues",
        "description": "Archives a list of issues.",
        "operationId": "archiveIssues",
        "parameters": [
          {
            "name": "notifyUsers",
            "in": "query",
            "description": "Send the email with notification that the issue was updated to users that watch it. Admin or project admin permissions are required to disable the notification.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "List of issue keys",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "example": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a stream of issues archiving results.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "example": null
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to archive the issue or doesn't have DC license or issue is already archived."
          },
          "404": {
            "description": "Returned if the issue does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/bulk": {
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Create an issue or sub-task from json - bulk operation.",
        "description": "Creates issues or sub-tasks from a JSON representation. Creates many issues in one bulk operation.\nCreating a sub-task is similar to creating a regular issue. More details can be found in createIssue section.",
        "operationId": "createIssues",
        "requestBody": {
          "description": "Issues update bean",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuesUpdateBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns a link to the created issues.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuesCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid field values, and so forth)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/createmeta/{projectIdOrKey}/issuetypes": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get metadata for project issue types",
        "description": "Returns the metadata for issue types used for creating issues. Data will not be returned if the user does not have permission to create issues in that project.",
        "operationId": "getCreateIssueMetaProjectIssueTypes",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "description": "Project id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "How many results on the page should be included",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The page offset",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the metadata for issue types used for creating issues.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMetaIssueTypeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the user does not have permission to view the requested project or project doesn't exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get metadata for issue types used for creating issues",
        "description": "Returns the metadata for issue types used for creating issues. Data will not be returned if the user does not have permission to create issues in that project.",
        "operationId": "getCreateIssueMetaFields",
        "parameters": [
          {
            "name": "issueTypeId",
            "in": "path",
            "description": "Issue type id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIdOrKey",
            "in": "path",
            "description": "Project id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "How many results on the page should be included",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The page offset",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the metadata for issue types used for creating issues.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldMetaBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the user does not have permission to view the requested project or project doesn't exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/picker": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get suggested issues for auto-completion",
        "description": "Get issue picker resource",
        "operationId": "getIssuePickerResource",
        "parameters": [
          {
            "name": "currentProjectId",
            "in": "query",
            "description": "the id of the project in context of which the request is executed",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "the query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "currentIssueKey",
            "in": "query",
            "description": "the key of the issue in context of which the request is executed",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "showSubTasks",
            "in": "query",
            "description": "if set to false, subtasks will not be included in the list",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "currentJQL",
            "in": "query",
            "description": "the JQL in context of which the request is executed",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "showSubTaskParent",
            "in": "query",
            "description": "if set to false and request is executed in context of a subtask, the parent issue will not be included in the auto-completion result, even if it matches the query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a response containing issue picker resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuePickerResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get issue for key",
        "description": "Returns a full representation of the issue for the given issue key.\nAn issue JSON consists of the issue key, a collection of fields,\na link to the workflow transition sub-resource, and (optionally) the HTML rendered values of any fields that support it\n(e.g. if wiki syntax is enabled for the description or comments).\nThe fields param (which can be specified multiple times) gives a comma-separated list of fields\nto include in the response. This can be used to retrieve a subset of fields.\nA particular field can be excluded by prefixing it with a minus.\nBy default, all (*all) fields are returned in this get-issue resource. Note: the default is different\nwhen doing a jql search -- the default there is just navigable fields (*navigable).\n- *all - include all fields\n- *navigable - include just navigable fields\n- summary,comment - include just the summary and comments\n- -comment - include everything except comments (the default is *all for get-issue)\n- *all,-comment - include everything except comments\n\nThe {@code properties} param is similar to {@code fields} and specifies a comma-separated list of issue\nproperties to include. Unlike {@code fields}, properties are not included by default. To include them all\nsend {@code ?properties=*all}. You can also include only specified properties or exclude some properties\nwith a minus (-) sign.\n\n- {@code *all} - include all properties\n- {@code *all, -prop1} - include all properties except {@code prop1}\n- {@code prop1, prop1} - include {@code prop1} and {@code prop2} properties\n\nJira will attempt to identify the issue by the issueIdOrKey path parameter. This can be an issue id,\nor an issue key. If the issue cannot be found via an exact match, Jira will also look for the issue in a case-insensitive way,\nby looking to see if the issue was moved. In either of these cases, the request will proceed as normal (a 302 or other redirect\nwill not be returned). The issue key contained in the response will indicate the current value of issue's key.\n\nThe expand param is used to include, hidden by default, parts of response. This can be used to include:\n\n- renderedFields - field values in HTML format\n- names - display name of each field\n- schema - schema for each field which describes a type of the field\n- transitions - all possible transitions for the given issue\n- operations - all possibles operations which may be applied on issue\n- editmeta - information about how each field may be edited. It contains field's schema as well.\n- changelog - history of all changes of the given issue\n- versionedRepresentations -\nREST representations of all fields. Some field may contain more recent versions. RESET representations are numbered.\nThe greatest number always represents the most recent version. It is recommended that the most recent version is used.\nversion for these fields which provide a more recent REST representation.\nAfter including versionedRepresentations \"fields\" field become hidden.",
        "operationId": "getIssue",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "The expand param is used to include, hidden by default, parts of response. This can be used to include: renderedFields, names, schema, transitions, operations, editmeta, changelog, versionedRepresentations.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The list of fields to return for the issue. By default, all fields are returned.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "updateHistory",
            "in": "query",
            "description": "The updateHistory param adds the issues retrieved by this method to the current user's issue history",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "The list of properties to return for the issue. By default no properties are returned.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full representation of a Jira issue in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the requested issue is not found, or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Edit an issue from a JSON representation",
        "description": "Edits an issue from a JSON representation. The issue can either be updated by setting explicit the field value(s) or by using an operation to change the field value.",
        "operationId": "editIssue",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "notifyUsers",
            "in": "query",
            "description": "Send the email with notification that the issue was updated to users that watch it. Admin or project admin permissions are required to disable the notification.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Issue update bean",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueUpdateBean"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returned if it updated the issue successfully."
          },
          "400": {
            "description": "Returned if the requested issue update failed."
          },
          "403": {
            "description": "Returned if the user doesn't have permissions to disable users notification."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete an issue",
        "description": "Deletes an issue. If the issue has subtasks you must set the parameter deleteSubtasks=true to delete the issue. You cannot delete an issue without its subtasks also being deleted.",
        "operationId": "deleteIssue",
        "parameters": [
          {
            "name": "deleteSubtasks",
            "in": "query",
            "description": "A String of true or false indicating that any subtasks should also be deleted. If the issue has no subtasks this parameter is ignored. If the issue has subtasks and this parameter is missing or false, then the issue will not be deleted and an error will be returned.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the issue was removed successfully."
          },
          "400": {
            "description": "Returned if an error occurs."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to delete the issue."
          },
          "404": {
            "description": "Returned if the issue does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/archive": {
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Archive an issue",
        "description": "Archives an issue.",
        "operationId": "archiveIssue",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "notifyUsers",
            "in": "query",
            "description": "Send the email with notification that the issue was updated to users that watch it. Admin or project admin permissions are required to disable the notification.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns a response indicating the result of the archive operation."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to archive the issue or doesn't have DC license or issue is already archived."
          },
          "404": {
            "description": "Returned if the issue does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/assignee": {
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Assign an issue to a user",
        "description": "Assign an issue to a user.",
        "operationId": "assign",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "UserBean containing the username",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBean"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns a response indicating the result of the assign operation."
          },
          "400": {
            "description": "Returned if there is a problem with the received user representation."
          },
          "401": {
            "description": "Returned if the calling user does not have permission to assign the issue."
          },
          "404": {
            "description": "Returned if either the issue or the user does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/attachments": {
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add one or more attachments to an issue",
        "description": "Add one or more attachments to an issue.\nThis resource expects a multipart post. The media-type multipart/form-data is defined in RFC 1867. Most client libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components library provides a MultiPartEntity that makes it simple to submit a multipart POST.\nIn order to protect against XSRF attacks, because this method accepts multipart/form-data, it has XSRF protection\non it. This means you must submit a header of X-Atlassian-Token: no-check with the request, otherwise it will be blocked.\nThe name of the multipart/form-data parameter that contains attachments must be file.\nA simple example to upload a file called \"myfile.txt\" to issue TEST-123:\ncurl -D- -u admin:admin -X POST -H \"X-Atlassian-Token: no-check\" -F \"file=@myfile.txt\" http://myhost/rest/api/2/issue/TEST-123/attachments",
        "operationId": "addAttachment",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Attachments to be added",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary",
                "example": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a JSON representation of the attachments added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentJsonBean"
                }
              }
            }
          },
          "403": {
            "description": "Returned if attachments is disabled or if you don't have permission to add attachments to this issue."
          },
          "404": {
            "description": "Returned if the requested issue is not found, the user does not have permission to view it, or if the attachments exceeds the maximum configured attachment size."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/comment": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get comments for an issue",
        "description": "Returns all comments for an issue. Results can be ordered by the 'created' field which means the date a comment was added.",
        "operationId": "getComments",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "Optional flags: renderedBody (provides body rendered in HTML)",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "How many results on the page should be included. Defaults to 50.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering of the results",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The page offset, if not specified then defaults to 0",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of comments associated with the issue, with count and pagination information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsWithPaginationJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the issue with the given id/key does not exist or if the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add a comment",
        "description": "Adds a new comment to an issue.",
        "operationId": "addComment",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "Optional flags: renderedBody (provides body rendered in HTML)",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Comment create request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentJsonBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returned if add was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentJsonBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/comment/{id}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a comment by id",
        "description": "Returns a single comment.",
        "operationId": "getComment",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "Optional flags: renderedBody (provides body rendered in HTML)",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Comment id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full representation of a Jira comment in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the requested comment is not found, or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Update a comment",
        "description": "Updates an existing comment using its JSON representation.",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "Optional flags: renderedBody (provides body rendered in HTML)",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Comment id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Comment update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentJsonBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentJsonBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete a comment",
        "description": "Deletes an existing comment.",
        "operationId": "deleteComment",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Comment id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if delete was successful."
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/comment/{id}/pin": {
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Pin a comment",
        "description": "Pins a comment to the top of the comment list.",
        "operationId": "setPinComment",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Comment id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "'true' must be included as raw data",
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean",
                "example": null
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Returned if the comment was pinned successfully."
          },
          "404": {
            "description": "Returned if the comment with the given id does not exist or if the currently authenticated user does not have permission to pin it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/editmeta": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get metadata for issue types used for editing issues",
        "description": "Returns the meta data for editing an issue. The fields in the editmeta correspond to the fields in the edit screen for the issue. Fields not in the screen will not be in the editmeta.",
        "operationId": "getEditIssueMeta",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a response containing a Map of FieldBeans for fields editable by the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditMetaBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the requested issue is not found or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/notify": {
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Send notification to recipients",
        "description": "Sends a notification (email) to the list or recipients defined in the request.",
        "operationId": "notify",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Notification request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationJsonBean"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returned if adding to the mail queue was successful."
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          },
          "403": {
            "description": "Returned is outgoing emails are disabled OR no SMTP server is defined."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/pinned-comments": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get pinned comments for an issue",
        "description": "Returns all pinned to the issue comments.",
        "operationId": "getPinnedComments",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of pinned comments associated with the issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinnedCommentJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the issue with the given id/key does not exist or if the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/properties": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get keys of all properties for an issue",
        "description": "Returns the keys of all properties for the issue identified by the key or by the id.",
        "operationId": "getPropertiesKeys_2",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a response containing EntityPropertiesKeysBean.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the issue key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the issue."
          },
          "404": {
            "description": "Returned if the issue with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/issue/{issueIdOrKey}/properties/{propertyKey}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get the value of a specific property from an issue",
        "description": "Returns the value of the property with a given key from the issue identified by the key or by the id.",
        "operationId": "getProperty_3",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the property to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the issue property was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertyBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the issue key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the issue."
          },
          "404": {
            "description": "Returned if the issue with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Update the value of a specific issue's property",
        "description": "Sets the value of the specified issue's property.",
        "operationId": "setProperty_2",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the issue's property",
            "required": true,
            "schema": {
              "maxLength": 255,
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The value of the issue's property",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "json",
                "example": null
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the issue property is successfully updated."
          },
          "201": {
            "description": "Returned if the issue property is successfully created."
          },
          "400": {
            "description": "Returned if the issue key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to edit the issue."
          },
          "404": {
            "description": "Returned if the issue with given key or id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete a property from an issue",
        "description": "Removes the property from the issue identified by the key or by the id.",
        "operationId": "deleteProperty_3",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the property to remove",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the issue property was removed successfully."
          },
          "400": {
            "description": "Returned if the issue key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to edit the issue."
          },
          "404": {
            "description": "Returned if the issue with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/issue/{issueIdOrKey}/remotelink": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get remote issue links for an issue",
        "description": "Get remote issue links for an issue.",
        "operationId": "getRemoteIssueLinks",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "globalId",
            "in": "query",
            "description": "Global id of the remote issue link",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a response containing remote issue links for the issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteIssueLinkBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the linkId is not a valid number, or if the remote issue link with the given id does not belong to the given issue."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the remote issue link, or if issue linking is disabled."
          },
          "404": {
            "description": "Returned if the issue or remote issue link do not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Create or update remote issue link",
        "description": "Creates or updates a remote issue link from a JSON representation. If a globalId is provided and a remote issue link exists with that globalId, the remote issue link is updated. Otherwise, the remote issue link is created.",
        "operationId": "createOrUpdateRemoteIssueLink",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Remote issue link create or update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteIssueLinkCreateOrUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a link to the created/updated remote issue link.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteIssueLinkBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to create/update the remote issue link, or if issue linking is disabled."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete remote issue link",
        "description": "Delete the remote issue link with the given global id on the issue.",
        "operationId": "deleteRemoteIssueLinkByGlobalId",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "globalId",
            "in": "query",
            "description": "Global id of the remote issue link",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the remote issue link was removed successfully."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to delete the remote issue link, or if issue linking is disabled."
          },
          "404": {
            "description": "Returned if the issue or remote issue link do not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/remotelink/{linkId}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a remote issue link by its id",
        "description": "Get a remote issue link by its id.",
        "operationId": "getRemoteIssueLinkById",
        "parameters": [
          {
            "name": "linkId",
            "in": "path",
            "description": "Id of the remote issue link",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a response containing a remote issue link.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteIssueLinkBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the linkId is not a valid number, or if the remote issue link with the given id does not belong to the given issue."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the remote issue link, or if issue linking is disabled."
          },
          "404": {
            "description": "Returned if the issue or remote issue link do not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Update remote issue link",
        "description": "Updates a remote issue link from a JSON representation. Any fields not provided are set to null.",
        "operationId": "updateRemoteIssueLink",
        "parameters": [
          {
            "name": "linkId",
            "in": "path",
            "description": "Id of the remote issue link",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Remote issue link create or update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteIssueLinkCreateOrUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns a response indicating the result of the update operation."
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to update the remote issue link, or if issue linking is disabled."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete remote issue link by id",
        "description": "Delete the remote issue link with the given id on the issue.",
        "operationId": "deleteRemoteIssueLinkById",
        "parameters": [
          {
            "name": "linkId",
            "in": "path",
            "description": "Id of the remote issue link",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the remote issue link was removed successfully."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to delete the remote issue link, or if issue linking is disabled."
          },
          "404": {
            "description": "Returned if the issue or remote issue link do not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/restore": {
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Restore an archived issue",
        "description": "Restores an archived issue.",
        "operationId": "restoreIssue",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "notifyUsers",
            "in": "query",
            "description": "Send the email with notification that the issue was updated to users that watch it. Admin or project admin permissions are required to disable the notification.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns a response indicating the result of the restore operation."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to restore the issue or doesn't have DC license or issue is not archived."
          },
          "404": {
            "description": "Returned if the issue does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/subtask": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get an issue's subtask list",
        "description": "Returns an issue's subtask list",
        "operationId": "getSubTasks",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "The parent issue's key or id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueRefJsonBean"
                }
              }
            }
          },
          "403": {
            "description": "Returned if the user is not allowed to edit the issue"
          },
          "404": {
            "description": "Returned if the issue doesn't exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/subtask/move": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Check if a subtask can be moved",
        "description": "Checks if a subtask can be moved",
        "operationId": "canMoveSubTask",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "The parent issue's key or id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": null
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Reorder an issue's subtasks",
        "description": "Reorders an issue's subtasks by moving the subtask at index 'from' to index 'to'.",
        "operationId": "moveSubTasks",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "The parent issue's key or id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The description of previous and current position of subtask in the sequence.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueSubTaskMovePositionBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Returned if the request was successful"
          },
          "400": {
            "description": "Returned if the from or to parameters are out of bounds"
          },
          "403": {
            "description": "Returned if the user is not allowed to edit the issue"
          },
          "404": {
            "description": "Returned if the parent issue doesn't exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/transitions": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get list of transitions possible for an issue",
        "description": "Get a list of the transitions possible for this issue by the current user, along with fields that are required and their types.\nFields will only be returned if `expand=transitions.fields`.\nThe fields in the metadata correspond to the fields in the transition screen for that transition.\nFields not in the screen will not be in the metadata.",
        "operationId": "getTransitions",
        "parameters": [
          {
            "name": "transitionId",
            "in": "query",
            "description": "Transition id",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a response containing a Map of TransitionFieldBeans for each transition possible by the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransitionsMetaBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the issue does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Perform a transition on an issue",
        "description": "Perform a transition on an issue.\nWhen performing the transition you can update or set other issue fields.\nThe fields that can be set on transition, in either the fields parameter or the update parameter can be determined using the /rest/api/2/issue/{issueIdOrKey}/transitions?expand=transitions.fields resource.\nIf a field is not configured to appear on the transition screen, then it will not be in the transition metadata, and a field validation error will occur if it is submitted.\nThe updateHistory param adds the issues retrieved by this method to the current user's issue history, if set to true (by default, the issue history does not include issues retrieved via the REST API).\nYou can view the issue history in the Jira application, via the Issues dropdown or by using the lastViewed JQL field in an issue search.",
        "operationId": "doTransition",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Issue update bean",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueUpdateBean"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns a response indicating the result of the transition operation."
          },
          "400": {
            "description": "Returned if the transition is not valid for the issue, or the user does not have permission to transition the issue."
          },
          "404": {
            "description": "Returned if the issue does not exist."
          },
          "500": {
            "description": "If transition ID is incorrect."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/votes": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get votes for issue",
        "description": "A REST sub-resource representing the voters on the issue.",
        "operationId": "getVotes",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a response containing information about voting on the current issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoteBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the user cannot view the issue in question or voting is disabled."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add vote to issue",
        "description": "Adds voter (currently logged user) to particular ticket. You need to be logged in to use this method.",
        "operationId": "addVote",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the vote count for particular ticket."
          },
          "404": {
            "description": "Returned if the user cannot vote for any reason. (The user is the reporter, the user does not have permission to vote, voting is disabled in the instance, the issue does not exist, etc.)"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Remove vote from issue",
        "description": "Remove your vote from an issue.",
        "operationId": "removeVote",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns a response indicating the result of the remove vote operation."
          },
          "404": {
            "description": "Returned if the user cannot remove a vote for any reason. (The user did not vote on the issue, the user is the reporter, voting is disabled, the issue does not exist, etc.)"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/watchers": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get list of watchers of issue",
        "description": "Returns the list of watchers for the issue with the given key.",
        "operationId": "getIssueWatchers",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of watchers for an issue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchersBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the requested issue is not found, or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add a user as watcher",
        "description": "Adds a user to an issue's watcher list.",
        "operationId": "addWatcher_1",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "The name of the user to add to the watcher list. If no name is specified, the current user is added.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": null
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returned if the watcher was added successfully."
          },
          "400": {
            "description": "Returned if a user name query parameter is not supplied."
          },
          "401": {
            "description": "Returned if the calling user does not have permission to add the watcher to the issue's list of watchers."
          },
          "404": {
            "description": "Returned if either the issue does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete watcher from issue",
        "description": "Removes a user from an issue's watcher list.",
        "operationId": "removeWatcher_1",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "The name of the user to remove from the watcher list.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the watcher was removed successfully."
          },
          "400": {
            "description": "Returned if a user name query parameter is not supplied."
          },
          "401": {
            "description": "Returned if the calling user does not have permission to remove the watcher from the issue's list of watchers."
          },
          "404": {
            "description": "Returned if either the issue does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/worklog": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get worklogs for an issue",
        "description": "Returns all work logs for an issue. Work logs won't be returned if the Log work field is hidden for the project.",
        "operationId": "getIssueWorklog",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of worklogs associated with the issue, with count and pagination information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorklogWithPaginationBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the issue with the given id/key does not exist or if the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Add a worklog entry",
        "description": "Adds a new worklog entry to an issue.",
        "operationId": "addWorklog",
        "parameters": [
          {
            "name": "newEstimate",
            "in": "query",
            "description": "Required when 'new' is selected for adjustEstimate. e.g. \"2d\"",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "adjustEstimate",
            "in": "query",
            "description": "Allows you to provide specific instructions to update the remaining time estimate of the issue. Valid values are: new, leave, manual, auto",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "reduceBy",
            "in": "query",
            "description": "Required when 'manual' is selected for adjustEstimate. e.g. \"2d\"",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "a string containing the issue id or key the worklog will be added to",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Worklog create request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/worklog"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returned if add was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/worklog"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to add the worklog."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issue/{issueIdOrKey}/worklog/{id}": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "Get a worklog by id",
        "description": "Returns a specific worklog. The work log won't be returned if the Log work field is hidden for the project.",
        "operationId": "getWorklog",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "Issue id or key",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Worklog id",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a response containing a worklog.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/worklog"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the work log with the given id does not exist or if the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issue"
        ],
        "summary": "Update a worklog entry",
        "description": "Updates an existing worklog entry. Note that:\n- Fields possible for editing are: comment, visibility, started, timeSpent and timeSpentSeconds.\n- Either timeSpent or timeSpentSeconds can be set.\n- Fields which are not set will not be updated.\n- For a request to be valid, it has to have at least one field change.",
        "operationId": "updateWorklog",
        "parameters": [
          {
            "name": "newEstimate",
            "in": "query",
            "description": "required when 'new' is selected for adjustEstimate",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "adjustEstimate",
            "in": "query",
            "description": "allows you to provide specific instructions to update the remaining time estimate of the issue. Valid values are: new, leave, auto",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "a string containing the issue id or key the worklog belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the worklog to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Worklog update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/worklog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/worklog"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to update the worklog."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete a worklog entry",
        "description": "Deletes an existing worklog entry.",
        "operationId": "deleteWorklog",
        "parameters": [
          {
            "name": "newEstimate",
            "in": "query",
            "description": "Required when 'new' is selected for adjustEstimate. e.g. \"2d\"",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "adjustEstimate",
            "in": "query",
            "description": "Allows you to provide specific instructions to update the remaining time estimate of the issue. Valid values are: new, leave, manual, auto",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "a string containing the issue id or key the worklog belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the worklog to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "increaseBy",
            "in": "query",
            "description": "Required when 'manual' is selected for adjustEstimate. e.g. \"2d\"",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if delete was successful."
          },
          "400": {
            "description": "Returned if the input is invalid (e.g. missing required fields, invalid values, and so forth)."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to delete the worklog."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issueLink": {
      "post": {
        "tags": [
          "issueLink"
        ],
        "summary": "Create an issue link between two issues",
        "description": "Creates an issue link between two issues.",
        "operationId": "linkIssues",
        "requestBody": {
          "description": "All information about the link relationship. Which issues to link, which issue link type to use and an optional comment that will be added to the first issue.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkIssueRequestJsonBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the issue link was created successfully."
          },
          "400": {
            "description": "Returned if it can't create the supplied comment."
          },
          "401": {
            "description": "Returned if the user does not have the link issue permission for the issue, which will be linked to another issue."
          },
          "404": {
            "description": "Returned if issue linking is disabled or it failed to find one of the issues (issue might exist, but it is not visible for this user) or it failed to find the specified issue link type."
          },
          "500": {
            "description": "Returned if an error occurred when creating the issue link or the comment."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issueLink/{linkId}": {
      "get": {
        "tags": [
          "issueLink"
        ],
        "summary": "Get an issue link with the specified id",
        "description": "Returns an issue link with the specified id.",
        "operationId": "getIssueLink",
        "parameters": [
          {
            "name": "linkId",
            "in": "path",
            "description": "The issue link id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issueLinks"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the specified issue link id is invalid."
          },
          "401": {
            "description": "Returned if the user does not have the link issue permission for the issue, which will be linked to another issue."
          },
          "404": {
            "description": "Returned if issue linking is disabled or it failed to find an issue link with the specified id. Either because none exists with this id, or the user doesn't have the permission to see one of the linked issues."
          },
          "500": {
            "description": "Returned if an error occurred when creating the issue link or the comment."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issueLink"
        ],
        "summary": "Delete an issue link with the specified id",
        "description": "Deletes an issue link with the specified id.",
        "operationId": "deleteIssueLink",
        "parameters": [
          {
            "name": "linkId",
            "in": "path",
            "description": "The issue link id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if it successfully deleted the issue link."
          },
          "400": {
            "description": "Returned if the specified issue link id is invalid."
          },
          "401": {
            "description": "Returned if the user does not have the link issue permission for the source or destination issue of the issue link."
          },
          "404": {
            "description": "Returned if issue linking is disabled or it failed to find an issue link with the specified id. Either because none exists with this id, or the user doesn't have the permission to see one of the linked issues."
          },
          "500": {
            "description": "Returned if an error occurred when deleting the issue link or the comment."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issueLinkType": {
      "get": {
        "tags": [
          "issueLinkType"
        ],
        "summary": "Get list of available issue link types",
        "description": "Returns a list of available issue link types, if issue linking is enabled.",
        "operationId": "getIssueLinkTypes",
        "responses": {
          "200": {
            "description": "Returns a list of all available issue link types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueLinkTypesBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged-in."
          },
          "404": {
            "description": "Returned if issue linking is disabled."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issueLinkType"
        ],
        "summary": "Create a new issue link type",
        "description": "Create a new issue link type.",
        "operationId": "createIssueLinkType",
        "requestBody": {
          "description": "All information about the link relationship.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueLinkTypeJsonBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The new issue link type has been created."
          },
          "404": {
            "description": "Returned if issue linking is disabled or you do not have permission to create issue link types."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issueLinkType/order": {
      "put": {
        "tags": [
          "issueLinkType"
        ],
        "summary": "Reset the order of issue link types alphabetically.",
        "description": "Resets the order of issue link types alphabetically.",
        "operationId": "resetOrder",
        "requestBody": {
          "description": "The sort direction for ordering the list alphabetically. Acceptable values are 'asc' or 'desc' (case-insensitive).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueLinkTypeResetOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns all issue link types in reset order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueLinkTypesBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the direction is invalid."
          },
          "403": {
            "description": "Returned if the user does not have permission to do the operation."
          },
          "404": {
            "description": "Returned if issue linking is disabled."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issueLinkType/{issueLinkTypeId}": {
      "get": {
        "tags": [
          "issueLinkType"
        ],
        "summary": "Get information about an issue link type",
        "description": "Returns for a given issue link type id all information about this issue link type.",
        "operationId": "getIssueLinkType",
        "parameters": [
          {
            "name": "issueLinkTypeId",
            "in": "path",
            "description": "The issue link type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the issue link type with the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueLinkTypeJsonBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the supplied id is invalid."
          },
          "401": {
            "description": "Returned if user is not logged-in."
          },
          "404": {
            "description": "Returned if issue linking is disabled or no issue link type with the given id exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issueLinkType"
        ],
        "summary": "Update the specified issue link type",
        "description": "Update the specified issue link type.",
        "operationId": "updateIssueLinkType",
        "parameters": [
          {
            "name": "issueLinkTypeId",
            "in": "path",
            "description": "The issue link type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "All information about the link relationship.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueLinkTypeJsonBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the issue link type was updated successfully."
          },
          "400": {
            "description": "Returned if the supplied id is invalid."
          },
          "404": {
            "description": "Returned if issue linking is disabled or no issue link type with the given id exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issueLinkType"
        ],
        "summary": "Delete the specified issue link type",
        "description": "Delete the specified issue link type.",
        "operationId": "deleteIssueLinkType",
        "parameters": [
          {
            "name": "issueLinkTypeId",
            "in": "path",
            "description": "The issue link type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns NO_CONTENT if successful."
          },
          "400": {
            "description": "Returned if the supplied id is not a number."
          },
          "404": {
            "description": "Returned if issue linking is disabled or no issue link type with the given id exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issueLinkType/{issueLinkTypeId}/order": {
      "put": {
        "tags": [
          "issueLinkType"
        ],
        "summary": "Update the order of the issue link type.",
        "description": "Moves the issue link type to a new position within the list.",
        "operationId": "moveIssueLinkType",
        "parameters": [
          {
            "name": "issueLinkTypeId",
            "in": "path",
            "description": "Id of the issue link type to move.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The new position to move the issue link type",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueLinkTypeOrderUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the updated issue link type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueLinkTypeJsonBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the position is invalid."
          },
          "403": {
            "description": "Returned if the user does not have permission to do the operation."
          },
          "404": {
            "description": "Returned if issue linking is disabled or no issue link type with the given id exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuesecurityschemes": {
      "get": {
        "tags": [
          "issuesecurityschemes"
        ],
        "summary": "Get all issue security schemes",
        "description": "Returns all issue security schemes that are defined.",
        "operationId": "getIssueSecuritySchemes",
        "responses": {
          "200": {
            "description": "Returns a list of all available issue security schemes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecuritySchemesJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not have the administrator permission."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuesecurityschemes/{id}": {
      "get": {
        "tags": [
          "issuesecurityschemes"
        ],
        "summary": "Get specific issue security scheme by id",
        "description": "Returns the issue security scheme along with that are defined.",
        "operationId": "getIssueSecurityScheme",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The issue security scheme id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the issue security scheme with the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecuritySchemeJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetype": {
      "get": {
        "tags": [
          "issuetype"
        ],
        "summary": "Get list of all issue types visible to user",
        "description": "Returns a list of all issue types visible to the user",
        "operationId": "getIssueAllTypes",
        "responses": {
          "200": {
            "description": "Returns a list of issue types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not have the administrator permission."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issuetype"
        ],
        "summary": "Create an issue type from JSON representation",
        "description": "Creates an issue type from a JSON representation and adds the issue newly created issue type to the default issue type scheme.",
        "operationId": "createIssueType",
        "requestBody": {
          "description": "All information about the issue type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueTypeCreateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The new issue type has been created."
          },
          "400": {
            "description": "Returned if the request is invalid. This happens when the name is invalid or issue type is subtask on instance which has subtasks disabled."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "409": {
            "description": "Returned if there already exists an issue type with the specified name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetype/page": {
      "get": {
        "tags": [
          "issuetype"
        ],
        "summary": "Get paginated list of filtered issue types",
        "description": "Returns paginated list of filtered issue types",
        "operationId": "getPaginatedIssueTypes",
        "parameters": [
          {
            "name": "X-Requested-With",
            "in": "header",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null,
              "default": 100
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null,
              "default": ""
            }
          },
          {
            "name": "projectIds",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "example": null,
              "items": {
                "type": "integer",
                "format": "int64",
                "example": null
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated list of issue types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeJsonBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/issuetype/{id}": {
      "get": {
        "tags": [
          "issuetype"
        ],
        "summary": "Get full representation of issue type by id",
        "description": "Returns a full representation of the issue type that has the given id.",
        "operationId": "getIssueType_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The issue type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the issue type with the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the issue type does not exist, or is not visible to the calling user."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issuetype"
        ],
        "summary": "Update specified issue type from JSON representation",
        "description": "Updates the specified issue type from a JSON representation.",
        "operationId": "updateIssueType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The issue type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "All information about the issue type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueTypeUpdateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the issue type was updated successfully."
          },
          "400": {
            "description": "Returned if the request is invalid. This happens when the name is invalid or if the avatar with given id does not exist."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the issue type to update does not exist."
          },
          "409": {
            "description": "Returned if there already exists an issue type with the specified name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issuetype"
        ],
        "summary": "Delete specified issue type and migrate associated issues",
        "description": "Deletes the specified issue type. If the issue type has any associated issues, these issues will be migrated to the alternative issue type specified in the parameter.",
        "operationId": "deleteIssueType_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The issue type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "alternativeIssueTypeId",
            "in": "path",
            "description": "The id of an issue type to which issues associated with the removed issue type will be migrated.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns NO_CONTENT if successful."
          },
          "400": {
            "description": "Returned if the request is invalid. It happens when there are associated issues with the issue type which is being removed, but it is impossible to migrate these issues to the alternative issue type."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the issue type to update does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetype/{id}/alternatives": {
      "get": {
        "tags": [
          "issuetype"
        ],
        "summary": "Get list of alternative issue types for given id",
        "description": "Returns a list of all alternative issue types for the given issue type id.",
        "operationId": "getAlternativeIssueTypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The issue type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of issue types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the issue type does not exist, or is not visible to the calling user."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetype/{id}/avatar": {
      "post": {
        "tags": [
          "issuetype"
        ],
        "summary": "Convert temporary avatar into a real avatar",
        "description": "Converts temporary avatar into a real avatar",
        "operationId": "createAvatarFromTemporary_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The issue type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Cropping instructions.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarCroppingBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns created avatar.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the cropping coordinates are invalid."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to pick avatar."
          },
          "404": {
            "description": "Returned if the currently authenticated user does not have EDIT PROJECT permission."
          },
          "500": {
            "description": "Returned if an error occurs while converting temporary avatar to real avatar."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetype/{id}/avatar/temporary": {
      "post": {
        "tags": [
          "issuetype"
        ],
        "summary": "Create temporary avatar using multipart for issue type",
        "description": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because\nthe client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from\nwhich the client parses the JSON from.\nCreating a temporary avatar is part of a 3-step process in uploading a new\navatar for an issue type: upload, crop, confirm. This endpoint allows you to use a multipart upload\ninstead of sending the image directly as the request body.\nYou *must* use \"avatar\" as the name of the upload parameter:\ncurl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n  -F \"avatar=@mynewavatar.png;type=image/png\" \\\n  'http://localhost:8090/jira/rest/api/2/issuetype/1/avatar/temporary'",
        "operationId": "storeTemporaryAvatarUsingMultiPart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The issue type id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FilePart"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Temporary avatar cropping instructions embeded in HTML page. Error messages will also be embeded in the page.",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarCroppingBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the issue type to update does not exist or if the request does not contain valid XSRF token."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetype/{issueTypeId}/properties": {
      "get": {
        "tags": [
          "issuetype"
        ],
        "summary": "Get all properties keys for issue type",
        "description": "Returns the keys of all properties for the issue type identified by the id",
        "operationId": "getPropertyKeys",
        "parameters": [
          {
            "name": "issueTypeId",
            "in": "path",
            "description": "The issue type from which the keys will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns keys of all properties for the issue type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the issue type id is invalid."
          },
          "404": {
            "description": "Returned if the issue type with given id does not exist or if the user does not have permissions to view this issue type."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/issuetype/{issueTypeId}/properties/{propertyKey}": {
      "get": {
        "tags": [
          "issuetype"
        ],
        "summary": "Get value of specified issue type's property",
        "description": "Returns the value of the property with a given key from the issue type identified by the id",
        "operationId": "getProperty_4",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the property to return.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueTypeId",
            "in": "path",
            "description": "The issue type from which the property will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the value of the property with a given key from the issue type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertyBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the issue type id is invalid."
          },
          "404": {
            "description": "Returned if the issue type with given id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "put": {
        "tags": [
          "issuetype"
        ],
        "summary": "Update specified issue type's property",
        "description": "Sets the value of the specified issue type's property",
        "operationId": "setProperty_3",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the issue type's property. The maximum length of the key is 255 bytes",
            "required": true,
            "schema": {
              "maxLength": 255,
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueTypeId",
            "in": "path",
            "description": "The issue type on which the property will be set.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The value of the issue type's property. The value has to be a valid, non-empty JSON conforming to http://tools.ietf.org/html/rfc4627. The maximum length of the property value is 32768 bytes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the issue type property is successfully updated."
          },
          "201": {
            "description": "Returned if the issue type property is successfully created."
          },
          "400": {
            "description": "Returned if the issue type id is invalid."
          },
          "404": {
            "description": "Returned if the issue type with given id does not exist or if the user does not have permissions to edit this issue type."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "delete": {
        "tags": [
          "issuetype"
        ],
        "summary": "Delete specified issue type's property",
        "description": "Removes the property from the issue type identified by the id",
        "operationId": "deleteProperty_4",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "The key of the property to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueTypeId",
            "in": "path",
            "description": "The issue type from which the property will be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Removes the property from the issue type."
          },
          "400": {
            "description": "Returned if the issue type id is invalid."
          },
          "404": {
            "description": "Returned if the issue type with given id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/issuetypescheme": {
      "get": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Get list of all issue type schemes visible to user",
        "description": "Returns a list of all issue type schemes visible to the user. All issue types associated with the scheme will only be returned if an additional query parameter is provided: expand=schemes.issueTypes. Similarly, the default issue type associated with the scheme (if one exists) will only be returned if an additional query parameter is provided: expand=schemes.defaultIssueType. Note that both query parameters can be used together: expand=schemes.issueTypes,schemes.defaultIssueType.",
        "operationId": "getAllIssueTypeSchemes",
        "responses": {
          "200": {
            "description": "Returns a list of issue type schemes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeSchemeListBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Create an issue type scheme from JSON representation",
        "description": "Creates an issue type scheme from a JSON representation",
        "operationId": "createIssueTypeScheme",
        "requestBody": {
          "description": "Issue type scheme creation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueTypeSchemeCreateUpdateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns a JSON representation of the newly created IssueTypeScheme if successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeSchemeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetypescheme/{schemeId}": {
      "get": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Get full representation of issue type scheme by id",
        "description": "Returns a full representation of the issue type scheme that has the given id",
        "operationId": "getIssueTypeScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "description": "A String containing an issue type scheme's id.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full representation of the issue type scheme with the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the issue type scheme does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Update specified issue type scheme from JSON representation",
        "description": "Updates the specified issue type scheme from a JSON representation",
        "operationId": "updateIssueTypeScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "description": "The id of the issue type scheme to update.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Specifies the new set of attributes that the issue type scheme will take on.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueTypeSchemeCreateUpdateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns a JSON representation of the updated issue type scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeSchemeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid. This happens when the name or issue types are invalid. It also occurs when the default issue type isn't found in the associated issue types collection."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the issue type scheme to update does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Delete specified issue type scheme",
        "description": "Deletes the specified issue type scheme. Any projects associated with this IssueTypeScheme will be automatically associated with the global default IssueTypeScheme.",
        "operationId": "deleteIssueTypeScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "description": "The id of the issue type scheme to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the delete was successful."
          },
          "400": {
            "description": "Returned if the request is invalid. It happens when there are associated issues with the issue type which is being removed, but it is impossible to migrate these issues to the alternative issue type."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira or if an attempt is made to delete the default IssueTypeScheme."
          },
          "404": {
            "description": "Returned if the issue type scheme which is supposed to be removed does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetypescheme/{schemeId}/associations": {
      "get": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Get all of the associated projects for specified scheme",
        "description": "For the specified issue type scheme, returns all of the associated projects",
        "operationId": "getAssociatedProjects",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "schemeId",
            "in": "path",
            "description": "Id of the issue type scheme whose projects we're accessing",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of projects associated with this issue type scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the specified issue type scheme does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Set project associations for scheme",
        "description": "Associates the given projects with the specified issue type scheme",
        "operationId": "setProjectAssociationsForScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "description": "The id of the issue type scheme whose project associations we're replacing.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Collection of projects, specified by id or key, to associate with this issue type scheme",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociateProjectsBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Confirmation that the association was successful."
          },
          "400": {
            "description": "Returned if the request is invalid. This occurs when the supplied project ids/keys are invalid. It also happens if performing the association would require an issue type migration for any of the newly associated projects."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the issue type scheme to update does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Add project associations to scheme",
        "description": "Adds additional projects to those already associated with the specified issue type scheme",
        "operationId": "addProjectAssociationsToScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "description": "The id of the issue type scheme whose project associations we're adding to.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Collection of projects, specified by id or key, to associate with this issue type scheme",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociateProjectsBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Confirmation that the association was successful."
          },
          "400": {
            "description": "Returned if the request is invalid. This occurs when the supplied project ids/keys are invalid. It also happens if performing the association would require an issue type migration for any of the projects."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the issue type scheme to update does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Remove all project associations for specified scheme",
        "description": "Removes all project associations for the specified issue type scheme",
        "operationId": "removeAllProjectAssociations",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "description": "The id of the issue type scheme whose project associations we're removing",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the associations were removed."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira or if an attempt is made to remove associations for the default/global issue type scheme."
          },
          "404": {
            "description": "Returned if the specified issue type scheme does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/issuetypescheme/{schemeId}/associations/{projIdOrKey}": {
      "delete": {
        "tags": [
          "issuetypescheme"
        ],
        "summary": "Remove given project association for specified scheme",
        "description": "For the specified issue type scheme, removes the given project association",
        "operationId": "removeProjectAssociation",
        "parameters": [
          {
            "name": "projIdOrKey",
            "in": "path",
            "description": "The id or key of the project that is to be un-associated with the issue type scheme",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "schemeId",
            "in": "path",
            "description": "The id of the issue type scheme whose project association we're removing",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the association was removed."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer Jira or if an attempt is made to remove an association for the default/global issue type scheme."
          },
          "404": {
            "description": "Returned if the specified issue type scheme or project does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/jql/autocompletedata": {
      "get": {
        "tags": [
          "jql"
        ],
        "summary": "Get auto complete data for JQL searches",
        "description": "Returns the auto complete data required for JQL searches",
        "operationId": "getAutoComplete",
        "responses": {
          "200": {
            "description": "The auto complete data required for JQL searches.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoCompleteResponseBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "500": {
            "description": "Returned if an error occurs while generating the response."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/jql/autocompletedata/suggestions": {
      "get": {
        "tags": [
          "jql"
        ],
        "summary": "Get auto complete suggestions for JQL search",
        "description": "Returns auto complete suggestions for JQL search",
        "operationId": "getFieldAutoCompleteForQueryString",
        "parameters": [
          {
            "name": "predicateValue",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "predicateName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "fieldName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "fieldValue",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The autocompletion suggestions for JQL search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoCompleteResultWrapper"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/licenseValidator": {
      "post": {
        "tags": [
          "licenseValidator"
        ],
        "summary": "Validate a Jira license",
        "description": "Validates a Jira license",
        "operationId": "validate",
        "requestBody": {
          "description": "The license string to validate.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": null
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The validation results of the license.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseValidationResults"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/monitoring/app": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get App Monitoring status",
        "description": "Checks if App Monitoring is enabled",
        "operationId": "isAppMonitoringEnabled",
        "responses": {
          "200": {
            "description": "Returns the status of App Monitoring.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppMonitoringRestEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "monitoring"
        ],
        "summary": "Update App Monitoring status",
        "description": "Enables or disables App Monitoring",
        "operationId": "setAppMonitoringEnabled",
        "requestBody": {
          "description": "The status to set for App Monitoring.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppMonitoringRestEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Sets the status of App Monitoring."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/monitoring/ipd": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get if IPD Monitoring is enabled",
        "description": "Checks if IPD Monitoring is enabled",
        "operationId": "isIpdMonitoringEnabled",
        "responses": {
          "200": {
            "description": "Returns the status of IPD Monitoring.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpdMonitoringRestEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "monitoring"
        ],
        "summary": "Update IPD Monitoring status",
        "description": "Enables or disables IPD Monitoring",
        "operationId": "setAppMonitoringEnabled_1",
        "requestBody": {
          "description": "The status to set for IPD Monitoring.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpdMonitoringRestEntity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the status was set."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/monitoring/jmx/areMetricsExposed": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Check if JMX metrics are being exposed",
        "description": "Checks if JMX metrics are being exposed",
        "operationId": "areMetricsExposed",
        "responses": {
          "200": {
            "description": "Returns whether JMX metrics are being exposed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": null
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/monitoring/jmx/getAvailableMetrics": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get the available JMX metrics",
        "description": "Gets the available JMX metrics",
        "operationId": "getAvailableMetrics",
        "responses": {
          "200": {
            "description": "Returns the available JMX metrics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": null
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/monitoring/jmx/startExposing": {
      "post": {
        "tags": [
          "monitoring"
        ],
        "summary": "Start exposing JMX metrics",
        "description": "Starts exposing JMX metrics",
        "operationId": "start",
        "responses": {
          "200": {
            "description": "Confirmation that the JMX metrics are being exposed."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/monitoring/jmx/stopExposing": {
      "post": {
        "tags": [
          "monitoring"
        ],
        "summary": "Stop exposing JMX metrics",
        "description": "Stops exposing JMX metrics",
        "operationId": "stop",
        "responses": {
          "200": {
            "description": "Confirmation that the JMX metrics are no longer being exposed."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/mypermissions": {
      "get": {
        "tags": [
          "mypermissions"
        ],
        "summary": "Get permissions for the logged in user",
        "description": "Returns all permissions in the system and whether the currently logged in user has them. You can optionally provide a specific context to get permissions for (projectKey OR projectId OR issueKey OR issueId)",
        "operationId": "getPermissions",
        "parameters": [
          {
            "name": "issueId",
            "in": "query",
            "description": "id of the issue to scope returned permissions for.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectKey",
            "in": "query",
            "description": "key of project to scope returned permissions for.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueKey",
            "in": "query",
            "description": "key of the issue to scope returned permissions for.",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "id of project to scope returned permissions for.",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all permissions in Jira and whether the user has them.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsJsonBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the project or issue id is invalid."
          },
          "401": {
            "description": "Returned if request is on behalf of anonymous user."
          },
          "404": {
            "description": "Returned if the project or issue id or key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/mypreferences": {
      "get": {
        "tags": [
          "mypreferences"
        ],
        "summary": "Get user preference by key",
        "description": "Returns preference of the currently logged in user. Preference key must be provided as input parameter (key). The value is returned exactly as it is. If key parameter is not provided or wrong - status code 404. If value is found  - status code 200.",
        "operationId": "getPreference",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the value of one preference of currently logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": null
                }
              }
            }
          },
          "404": {
            "description": "Key not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "mypreferences"
        ],
        "summary": "Update user preference",
        "description": "Sets preference of the currently logged in user. Preference key must be provided as input parameters (key). Value must be provided as post body. If key or value parameter is not provided - status code 404. If preference is set - status code 204.",
        "operationId": "setPreference",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": null
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Confirmation that the preference was set."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "mypreferences"
        ],
        "summary": "Delete user preference",
        "description": "Removes preference of the currently logged in user. Preference key must be provided as input parameters (key). If key parameter is not provided or wrong - status code 404. If preference is unset - status code 204.",
        "operationId": "removePreference",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the preference was removed."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/myself": {
      "get": {
        "tags": [
          "myself"
        ],
        "summary": "Get currently logged user",
        "description": "Returns currently logged user. This resource cannot be accessed anonymously",
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "Returns a full representation of a Jira user in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "put": {
        "tags": [
          "myself"
        ],
        "summary": "Update currently logged user",
        "description": "Modify currently logged user. The 'value' fields present will override the existing value. Fields skipped in request will not be changed. Only email and display name can be change that way. Requires user password.",
        "operationId": "updateUser",
        "requestBody": {
          "description": "The new user details to be set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserWriteBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Confirmation that the user was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWriteBean"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid including incorrect password."
          },
          "401": {
            "description": "The user is not authenticated."
          },
          "403": {
            "description": "The directory is read-only."
          },
          "404": {
            "description": "The user could not be found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/myself/password": {
      "put": {
        "tags": [
          "myself"
        ],
        "summary": "Update caller password",
        "description": "Modify caller password.",
        "operationId": "changeMyPassword",
        "requestBody": {
          "description": "The new password to be set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the password was changed."
          },
          "400": {
            "description": "The request is invalid including incorrect password."
          },
          "401": {
            "description": "The user is not authenticated."
          },
          "403": {
            "description": "The directory is read-only."
          },
          "404": {
            "description": "The user could not be found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/notificationscheme": {
      "get": {
        "tags": [
          "notificationscheme"
        ],
        "summary": "Get paginated notification schemes",
        "description": "Returns a paginated list of notification schemes. In order to access notification scheme, the calling user is\nrequired to have permissions to administer at least one project associated with the requested notification scheme. Each scheme contains\na list of events and recipient configured to receive notifications for these events. Consumer should allow events without recipients to appear in response.\nThe list is ordered by the scheme's name.\nFollow the documentation of /notificationscheme/{id} resource for all details about returned value.\n",
        "operationId": "getNotificationSchemes",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of notification schemes to which the user has permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/notificationscheme/{id}": {
      "get": {
        "tags": [
          "notificationscheme"
        ],
        "summary": "Get full notification scheme details",
        "description": "Returns a full representation of the notification scheme for the given id. This resource will return a\nnotification scheme containing a list of events and recipient configured to receive notifications for these events. Consumer\nshould allow events without recipients to appear in response. User accessing\nthe data is required to have permissions to administer at least one project associated with the requested notification scheme.\nNotification recipients can be:\n- current assignee - the value of the notificationType is CurrentAssignee\n- issue reporter - the value of the notificationType is Reporter\n- current user - the value of the notificationType is CurrentUser\n- project lead - the value of the notificationType is ProjectLead\n- component lead - the value of the notificationType is ComponentLead\n- all watchers - the value of the notification type is AllWatchers\n<li>configured user - the value of the notification type is User. Parameter will contain key of the user. Information about the user will be provided\nif <b>user</b> expand parameter is used.\n- configured group - the value of the notification type is Group. Parameter will contain name of the group. Information about the group will be provided\nif <b>group</b> expand parameter is used.\n- configured email address - the value of the notification type is EmailAddress, additionally information about the email will be provided.\n- users or users in groups in the configured custom fields - the value of the notification type is UserCustomField or GroupCustomField. Parameter\nwill contain id of the custom field. Information about the field will be provided if <b>field</b> expand parameter is used.\n- configured project role - the value of the notification type is ProjectRole. Parameter will contain project role id. Information about the project role\nwill be provided if <b>projectRole</b> expand parameter is used.\nPlease see the example for reference.\nThe events can be Jira system events or events configured by administrator. In case of the system events, data about theirs\nids, names and descriptions is provided. In case of custom events, the template event is included as well.",
        "operationId": "getNotificationScheme",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full representation of the notification scheme with given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSchemeBean"
                }
              }
            }
          },
          "404": {
            "description": "The notification scheme does not exist, or is not visible to the calling user"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/password/policy": {
      "get": {
        "tags": [
          "password"
        ],
        "summary": "Get current password policy requirements",
        "description": "Returns the list of requirements for the current password policy. For example, \"The password must have at least 10 characters.\", \"The password must not be similar to the user's name or email address.\", etc.",
        "operationId": "getPasswordPolicy",
        "parameters": [
          {
            "name": "hasOldPassword",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a JSON array of the user-facing messages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": null
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/password/policy/createUser": {
      "post": {
        "tags": [
          "password"
        ],
        "summary": "Get reasons for password policy disallowance on user creation",
        "description": "Returns a list of statements explaining why the password policy would disallow a proposed password for a new user.\nYou can use this method to test the password policy validation. This could be done prior to an action\nwhere a new user and related password are created, using methods like the ones in\n<a href=\"https://docs.atlassian.com/jira/latest/com/atlassian/jira/bc/user/UserService.html\">UserService</a>.\nFor example, you could use this to validate a password in a create user form in the user interface, as the user enters it.\nThe username and new password must be not empty to perform the validation.\nNote, this method will help you validate against the policy only. It won't check any other validations that might be performed\nwhen creating a new user, e.g. checking whether a user with the same name already exists.\n",
        "operationId": "policyCheckCreateUser",
        "requestBody": {
          "description": "The intended parameters for the user that would be created.\nThe username and new password must be specified.  The old password should be specified for\nupdates where the user would be required to enter it and omitted for those like a password\nreset or forced change by the administrator where the old password would not be known.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordPolicyCreateUserBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns a JSON array of the user-facing messages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": null
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid, such as if the username or password is left unspecified."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/password/policy/updateUser": {
      "post": {
        "tags": [
          "password"
        ],
        "summary": "Get reasons for password policy disallowance on user password update",
        "description": "Returns a list of statements explaining why the password policy would disallow a proposed new password for a user with an existing password.\nYou can use this method to test the password policy validation. This could be done prior to an action where the password\nis actually updated, using methods like ChangePassword or ResetPassword.\nFor example, you could use this to validate a password in a change password form in the user interface, as the user enters it.\nThe user must exist and the username and new password must be not empty, to perform the validation.\nNote, this method will help you validate against the policy only. It won't check any other validations that might be performed\nwhen submitting a password change/reset request, e.g. verifying whether the old password is valid.\n",
        "operationId": "policyCheckUpdateUser",
        "requestBody": {
          "description": "The intended parameters for the update that would be performed.\nThe username and new password must be specified.  The old password should be specified for\nupdates where the user would be required to enter it and omitted for those like a password\nreset or forced change by the administrator where the old password would not be known.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordPolicyUpdateUserBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns a JSON array of the user-facing messages. If no policy is set, then his will be an empty list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": null
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid, such as if the username or new password is left unspecified."
          },
          "404": {
            "description": "Returned if the username does not correspond to any existing user."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/permissions": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "Get all permissions present in Jira instance",
        "description": "Returns all permissions that are present in the Jira instance - Global, Project and the global ones added by plugins",
        "operationId": "getAllPermissions",
        "responses": {
          "200": {
            "description": "Returns a list of all permissions in Jira.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned for unauthenticated requests"
          },
          "403": {
            "description": "Returned for users without administer permissions"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/permissionscheme": {
      "get": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Get all permission schemes",
        "description": "Returns a list of all permission schemes. By default only shortened beans are returned. If you want to include permissions of all the schemes, then specify the permissions expand parameter. Permissions will be included also if you specify any other expand parameter.",
        "operationId": "getPermissionSchemes",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all permission schemes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSchemesBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to view permission schemes."
          },
          "404": {
            "description": "Returned if the scheme doesn't exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Create a new permission scheme",
        "description": "Create a new permission scheme. This method can create schemes with a defined permission set, or without.",
        "operationId": "createPermissionScheme",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSchemeBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returned if the scheme is created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to create permission schemes."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/permissionscheme/{permissionSchemeId}/attribute/{attributeKey}": {
      "get": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Get scheme attribute by key",
        "description": "Returns the attribute for a permission scheme specified by permission scheme id and attribute key.",
        "operationId": "getSchemeAttribute",
        "parameters": [
          {
            "name": "permissionSchemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "attributeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission scheme attribute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSchemeAttributeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the user is not an admin."
          },
          "404": {
            "description": "Returned if there is no such attribute."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/permissionscheme/{permissionSchemeId}/attribute/{key}": {
      "put": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Update or insert a scheme attribute",
        "description": "Updates or inserts the attribute for a permission scheme specified by permission scheme id. The attribute consists of the key and the value. The value will be converted to Boolean using Boolean#valueOf.",
        "operationId": "setSchemeAttribute",
        "parameters": [
          {
            "name": "permissionSchemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "example": null
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returned if the attribute is updated successfully."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the user is not an admin."
          },
          "500": {
            "description": "Returned if there was an error related to attribute upsert."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/permissionscheme/{schemeId}": {
      "get": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Get a permission scheme by ID",
        "description": "Returns a permission scheme identified by the given id.",
        "operationId": "getPermissionScheme",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission scheme",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to view permission schemes."
          },
          "404": {
            "description": "Returned if the scheme doesn't exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Update a permission scheme",
        "description": "Updates a permission scheme. If the permissions list is present then it will be set in the permission scheme, which basically means it will overwrite any permission grants that existed in the permission scheme. Sending an empty list will remove all permission grants from the permission scheme. To update just the name and description, do not send permissions list at all. To add or remove a single permission grant instead of updating the whole list at once use the {schemeId}/permission/ resource.",
        "operationId": "updatePermissionScheme",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionSchemeBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if the scheme is updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to edit permission schemes."
          },
          "404": {
            "description": "Returned if the permission is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Delete a permission scheme by ID",
        "description": "Deletes a permission scheme identified by the given id.",
        "operationId": "deletePermissionScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the permission scheme is successfully deleted."
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to delete permission schemes."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/permissionscheme/{schemeId}/permission": {
      "get": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Get all permission grants of a scheme",
        "description": "Returns all permission grants of the given permission scheme.",
        "operationId": "getPermissionSchemeGrants",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission grants",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGrantsBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to view permission schemes."
          },
          "404": {
            "description": "Returned if the scheme doesn't exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Create a permission grant in a scheme",
        "description": "Creates a permission grant in a permission scheme.",
        "operationId": "createPermissionGrant",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionGrantBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returned if the scheme permission is created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGrantBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to edit permission schemes."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/permissionscheme/{schemeId}/permission/{permissionId}": {
      "get": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Get a permission grant by ID",
        "description": "Returns a permission grant identified by the given id.",
        "operationId": "getPermissionSchemeGrant",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission grant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGrantBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to view permission schemes."
          },
          "404": {
            "description": "Returned if the scheme doesn't exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "permissionscheme"
        ],
        "summary": "Delete a permission grant from a scheme",
        "description": "Deletes a permission grant from a permission scheme.",
        "operationId": "deletePermissionSchemeEntity",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the permission grant is deleted successfully."
          },
          "401": {
            "description": "Returned if user is not logged in."
          },
          "403": {
            "description": "Returned if user is not allowed to edit permission schemes."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/priority": {
      "get": {
        "tags": [
          "priority"
        ],
        "summary": "Get all issue priorities",
        "description": "Returns a list of all issue priorities",
        "operationId": "getPriorities",
        "responses": {
          "200": {
            "description": "List of priorities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriorityJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/priority/page": {
      "get": {
        "tags": [
          "priority"
        ],
        "summary": "Get paginated issue priorities",
        "description": "Returns a page with list of issue priorities whose names (or their translations) match query",
        "operationId": "getPriorities_1",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null,
              "default": 100
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null,
              "default": ""
            }
          },
          {
            "name": "projectIds",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "example": null,
              "items": {
                "type": "integer",
                "format": "int64",
                "example": null
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of priorities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriorityJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/priority/{id}": {
      "get": {
        "tags": [
          "priority"
        ],
        "summary": "Get an issue priority by ID",
        "description": "Returns an issue priority",
        "operationId": "getPriority",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the issue priority exists and is visible by the calling user. Contains a full representation of the issue priority in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriorityJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "404": {
            "description": "Returned if the issue priority does not exist or is not visible to the calling user"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/priorityschemes": {
      "get": {
        "tags": [
          "priorityschemes"
        ],
        "summary": "Get all priority schemes",
        "description": "Returns all priority schemes. All project keys associated with the priority scheme will only be returned if additional query parameter is provided <code>expand=schemes.projectKeys</code>",
        "operationId": "getPrioritySchemes",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Priority schemes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrioritySchemeListBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller user does not have permission to view priority schemes."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "post": {
        "tags": [
          "priorityschemes"
        ],
        "summary": "Create new priority scheme",
        "description": "Creates new priority scheme.",
        "operationId": "createPriorityScheme",
        "requestBody": {
          "description": "Data of priority scheme to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrioritySchemeUpdateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created priority scheme",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrioritySchemeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller user does not have permission to create priority scheme."
          },
          "500": {
            "description": "Returned if the priority scheme was not created because of other error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/priorityschemes/{schemeId}": {
      "get": {
        "tags": [
          "priorityschemes"
        ],
        "summary": "Get a priority scheme by ID",
        "description": "Gets a full representation of a priority scheme in JSON format.",
        "operationId": "getPriorityScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Priority scheme",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrioritySchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller user does not have permission to view priority scheme."
          },
          "404": {
            "description": "Returned if the priority scheme does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "put": {
        "tags": [
          "priorityschemes"
        ],
        "summary": "Update a priority scheme",
        "description": "Updates a priority scheme. Update will be rejected if issue migration would be needed as a result of scheme update. Priority scheme update with migration is possible from the UI.",
        "operationId": "updatePriorityScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "New scheme data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrioritySchemeUpdateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated priority scheme",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrioritySchemeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller user does not have permission to update priority scheme."
          },
          "404": {
            "description": "Returned if the priority scheme does not exist."
          },
          "500": {
            "description": "Returned if the priority scheme was not updated because of other error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "delete": {
        "tags": [
          "priorityschemes"
        ],
        "summary": "Delete a priority scheme",
        "description": "Deletes a priority scheme. All projects using deleted scheme will use default priority scheme afterwards.",
        "operationId": "deletePriorityScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the priority scheme is successfully deleted."
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to delete priority scheme."
          },
          "404": {
            "description": "Returned if the priority scheme does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/project": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get all visible projects",
        "description": "Returns all projects which are visible for the currently logged in user. If no user is logged in, it returns the list of projects that are visible when using anonymous access.",
        "operationId": "getAllProjects",
        "parameters": [
          {
            "name": "includeArchived",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "recent",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "browseArchive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "403": {
            "description": "Returned if the user does not have rights to view projects"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Create a new project",
        "description": "Creates a new project",
        "operationId": "createProject",
        "requestBody": {
          "description": "Project data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectInputBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created project data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectIdentity"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is not valid and the project could not be created"
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "403": {
            "description": "Returned if the user does not have rights to create projects"
          },
          "409": {
            "description": "Returned if requested workflowScheme could not be assigned to created project"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/type": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get all project types",
        "description": "Returns all the project types defined on the Jira instance, not taking into account whether the license to use those project types is valid or not. In case of anonymous checks if they can access at least one project.",
        "operationId": "getAllProjectTypes",
        "responses": {
          "200": {
            "description": "Returns a list with all the project types defined on the Jira instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTypeBean"
                }
              }
            }
          },
          "401": {
            "description": "A response status of 401 indicates that there is not a logged in user and therefore this operation can't be performed"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/type/{projectTypeKey}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get project type by key",
        "description": "Returns the project type with the given key. In case of anonymous checks if they can access at least one project.",
        "operationId": "getProjectTypeByKey",
        "parameters": [
          {
            "name": "projectTypeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a representation of the project type with the given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTypeBean"
                }
              }
            }
          },
          "401": {
            "description": "A response status of 401 indicates that there is not a logged in user and therefore this operation can't be performed"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/type/{projectTypeKey}/accessible": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get project type by key",
        "description": "Returns the project type with the given key, if it is accessible to the logged in user. This takes into account whether the user is licensed on the Application that defines the project type.",
        "operationId": "getAccessibleProjectTypeByKey",
        "parameters": [
          {
            "name": "projectTypeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a representation of the project type with the given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTypeBean"
                }
              }
            }
          },
          "401": {
            "description": "A response status of 401 indicates that there is not a logged in user and therefore this operation can't be performed"
          },
          "404": {
            "description": "A response status of 404 indicates that the project type is not accessible for the logged in user"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get a project by ID or key",
        "description": "Returns a full representation of a project in JSON format. All project keys associated with the project will only be returned if <code>expand=projectKeys</code>.",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project is not found, or the calling user does not have permission to view it"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Update a project",
        "description": "Updates a project. Only non null values sent in JSON will be updated in the project. Values available for the assigneeType field are: \"PROJECT_LEAD\" and \"UNASSIGNED\".",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Project update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated project data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is not valid and the project could not be updated"
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "403": {
            "description": "Returned if the user does not have rights to update projects"
          },
          "404": {
            "description": "Returned if the project does not exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Delete a project",
        "description": "Deletes a project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the project is successfully deleted"
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to delete the project"
          },
          "404": {
            "description": "Returned if the project does not exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/archive": {
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Archive a project",
        "description": "Archives a project",
        "operationId": "archiveProject",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the project is successfully archived"
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to archive the project or doesn't have DC license or project is already archived"
          },
          "404": {
            "description": "Returned if the project does not exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/avatar": {
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Update project avatar",
        "description": "Updates an avatar for a project. This is step 3/3 of changing an avatar for a project.",
        "operationId": "updateProjectAvatar",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Avatar data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Returned if the avatar was updated successfully"
          },
          "400": {
            "description": "Returned if the avatar does not exist"
          },
          "401": {
            "description": "Returned if the user is not logged in"
          },
          "404": {
            "description": "Returned if the project does not exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Create avatar from temporary",
        "description": "Converts the temporary avatar into the final one. This is step 2/3 of changing an avatar for a project:\n- Upload (store temporary avatar)\n- Crop (create avatar from temporary)\n- Update (update project avatar)",
        "operationId": "createAvatarFromTemporary_2",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Cropping instructions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarCroppingBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Avatar data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the cropping coordinates are invalid"
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to pick avatar"
          },
          "404": {
            "description": "Returned if the currently authenticated user does not have EDIT PROJECT permission"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/avatar/temporary": {
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Store temporary avatar using multipart",
        "description": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because\nthe client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from\nwhich the client parses the JSON.\n",
        "operationId": "storeTemporaryAvatarUsingMultiPart_1",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FilePart"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Temporary avatar cropping instructions embeded in HTML page. Error messages will also be embeded in the page.",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarCroppingBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the currently authenticated user does not have EDIT PROJECT permission"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/avatar/{id}": {
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Delete an avatar",
        "description": "Deletes avatar",
        "operationId": "deleteAvatar",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the avatar is successfully deleted"
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to delete the avatar"
          },
          "404": {
            "description": "Returned if the avatar or project does not exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/avatars": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get all avatars for a project",
        "description": "Returns all avatars which are visible for the currently logged in user. The avatars are grouped into system and custom.",
        "operationId": "getAllAvatars",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Avatars",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project is not found, or the calling user does not have permission to view it"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/components": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get project components",
        "description": "Contains a full representation of the specified project's components.",
        "operationId": "getProjectComponents",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project components",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project is not found, or the calling user does not have permission to view it"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/properties": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get keys of all properties for project",
        "description": "Returns the keys of all properties for the project identified by the key or by the id.",
        "operationId": "getPropertiesKeys_3",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the project was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertiesKeysBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the project key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to browse the project."
          },
          "404": {
            "description": "Returned if the project with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/project/{projectIdOrKey}/properties/{propertyKey}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get value of property from project",
        "description": "Returns the value of the property with a given key from the project identified by the key or by the id.",
        "operationId": "getProperty_5",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the project property was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPropertyBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the project key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to browse the project."
          },
          "404": {
            "description": "Returned if the project with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Set value of specified project's property",
        "description": "Sets the value of the specified project's property. You can use this resource to store a custom data against the project identified by the key or by the id. The user who stores the data is required to have permissions to administer the project.",
        "operationId": "setProperty_4",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The request containing value of the project's property. The value has to be a valid, non-empty JSON conforming to http://tools.ietf.org/html/rfc4627. The maximum length of the property value is 32768 bytes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the project property is successfully updated."
          },
          "201": {
            "description": "Returned if the project property is successfully created."
          },
          "400": {
            "description": "Returned if the project key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer the project."
          },
          "404": {
            "description": "Returned if the project with given key or id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Delete property from project",
        "description": "Removes the property from the project identified by the key or by the id.",
        "operationId": "deleteProperty_5",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the project property was removed successfully."
          },
          "400": {
            "description": "Returned if the project key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to edit the project."
          },
          "404": {
            "description": "Returned if the project with given key or id does not exist or if the property with given key is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/project/{projectIdOrKey}/restore": {
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Restore an archived project",
        "description": "Restores an archived project. In case of success restored project should be re-indexed.",
        "operationId": "restoreProject",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Returned if the project is successfully restored"
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to restore the project or doesn't have DC license or project is already restored"
          },
          "404": {
            "description": "Returned if the project does not exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/role": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get all roles in project",
        "description": "Returns all roles in the given project Id or key, with links to full details on each role.",
        "operationId": "getProjectRoles",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of roles and URIs to full details"
          },
          "404": {
            "description": "Returned if the project is not found, or the calling user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/role/{id}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get details for a project role",
        "description": "Returns the details for a given project role in a project.",
        "operationId": "getProjectRole",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role details and its actors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project or role is not found, or the calling user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Update project role with actors",
        "description": "Updates a project role to include the specified actors (users or groups). Can be also used to clear roles to not include any users or groups. For user actors, their usernames should be used.",
        "operationId": "setActors",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The actors to set for the role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRoleActorsUpdateBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role details and its actors after modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the actor could not be added to the project role"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Add actor to project role",
        "description": "Adds an actor (user or group) to a project role. For user actors, their usernames should be used.",
        "operationId": "addActorUsers",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The actors to add to the role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorsMap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role details and its actors after modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project or role is not found, the calling user does not have permission to view it or does not have permission to modify the actors in the project role."
          },
          "410": {
            "description": "Returned if none of the specified groups and users exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Delete actors from project role",
        "description": "Deletes actors (users or groups) from a project role.",
        "operationId": "deleteActor",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content on success"
          },
          "404": {
            "description": "Returned if the project or role is not found, the calling user does not have permission to view it or does not have permission to modify the actors in the project role."
          },
          "410": {
            "description": "Returned if none of the specified groups and users exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/statuses": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get all issue types with statuses for a project",
        "description": "Get all issue types with valid status values for a project",
        "operationId": "getAllStatuses",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Issue types with status values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeWithStatusJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project is not found, or the calling user does not have permission to view it"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/type/{newProjectTypeKey}": {
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Update project type",
        "description": "Updates the type of a project",
        "operationId": "updateProjectType",
        "parameters": [
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "newProjectTypeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated project data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is not valid and the project type could not be updated"
          },
          "401": {
            "description": "Returned if the user is not authenticated"
          },
          "403": {
            "description": "Returned if the user does not have rights to update projects"
          },
          "404": {
            "description": "Returned if the project does not exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/version": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get paginated project versions",
        "description": "Returns all versions for the specified project. Results are paginated. Results can be ordered by the following fields: sequence, name, startDate, releaseDate.",
        "operationId": "getProjectVersionsPaginated",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project versions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project is not found, or the calling user does not have permission to view it"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectIdOrKey}/versions": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get project versions",
        "description": "Contains a full representation of a the specified project's versions.",
        "operationId": "getProjectVersions",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project versions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project is not found, or the calling user does not have permission to view it"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectKeyOrId}/issuesecuritylevelscheme": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get issue security scheme for project",
        "description": "Returns the issue security scheme for project.",
        "operationId": "getIssueSecurityScheme_1",
        "parameters": [
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Issue security scheme",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecuritySchemeJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the project is visible for calling user, but the user doesn't have administrative permissions"
          },
          "404": {
            "description": "Returned if the project does not exist, or is not visible to the calling user"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectKeyOrId}/notificationscheme": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get notification scheme associated with the project",
        "description": "Gets a notification scheme associated with the project. Follow the documentation of /notificationscheme/{id} resource for all details about returned value.",
        "operationId": "getNotificationScheme_1",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full representation of the notification scheme with given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in"
          },
          "403": {
            "description": "The user is allowed to access the project, but is not an administrator of the project or Jira and therefore can't see the notification scheme of the project"
          },
          "404": {
            "description": "The notification scheme does not exist, or is not visible to the calling user"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectKeyOrId}/permissionscheme": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get assigned permission scheme",
        "description": "Gets a permission scheme assigned with a project",
        "operationId": "getAssignedPermissionScheme",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The associated permission scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not have permissions to view the project's configuration. In practice the user needs to be a Jira administrator."
          },
          "404": {
            "description": "Returned if the project is not found (or the user does not have permissions to view the project)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Assign permission scheme to project",
        "description": "Assigns a permission scheme with a project",
        "operationId": "assignPermissionScheme",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Object that contains an id of the scheme",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Shortened details of the newly associated permission scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the user does not have permissions to edit project's permission schemes. In practice the user needs to be a Jira administrator."
          },
          "404": {
            "description": "Returned if the project or permission scheme is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectKeyOrId}/priorityscheme": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get assigned priority scheme",
        "description": "Gets a full representation of a priority scheme in JSON format used by specified project. User must be global administrator or project administrator. All project keys associated with the priority scheme will only be returned if additional query parameter is provided expand=projectKeys.",
        "operationId": "getAssignedPriorityScheme",
        "parameters": [
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the priority scheme exists and the user has permission to view it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrioritySchemeBean"
                }
              }
            }
          },
          "403": {
            "description": "Returned if the user does not have rights to view priority scheme."
          },
          "404": {
            "description": "Returned if project or priority scheme is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Assign project with priority scheme",
        "description": "Assigns project with priority scheme. Priority scheme assign with migration is possible from the UI. Operation will fail if migration is needed as a result of operation eg. there are issues with priorities invalid in the destination scheme. All project keys associated with the priority scheme will only be returned if additional query parameter is provided expand=projectKeys.",
        "operationId": "assignPriorityScheme",
        "parameters": [
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Object that contains an id of the scheme",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Affected priority scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrioritySchemeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is not valid and the priority scheme could not be updated. Eg. migration is needed as a result of operation."
          },
          "403": {
            "description": "Returned if the user does not have rights to assign priority schemes."
          },
          "404": {
            "description": "Returned if project or priority scheme is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/project/{projectKeyOrId}/priorityscheme/{schemeId}": {
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Unassign project from priority scheme",
        "description": "Unassigns project from priority scheme. Operation will fail for defualt priority scheme, project is not found or project is not associated with provided priority scheme. All project keys associated with the priority scheme will only be returned if additional query parameter is provided expand=projectKeys.",
        "operationId": "unassignPriorityScheme",
        "parameters": [
          {
            "name": "schemeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Affected priority scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrioritySchemeBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is not valid and the priority scheme could not be updated. Eg. provided scheme is default priority scheme or project is not associated with scheme."
          },
          "403": {
            "description": "Returned if the user does not have rights to assign priority schemes."
          },
          "404": {
            "description": "Returned if project or priority scheme is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/project/{projectKeyOrId}/securitylevel": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get all security levels for project",
        "description": "Returns all security levels for the project that the current logged in user has access to. If the user does not have the Set Issue Security permission, the list will be empty.",
        "operationId": "getSecurityLevelsForProject",
        "parameters": [
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all security levels in a project for which the current user has access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityListLevelJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project is not found or the user does not have permissions to browse it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/project/{projectKeyOrId}/workflowscheme": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get workflow scheme for project",
        "description": "Returns the workflow scheme that is associated with requested project.",
        "operationId": "getWorkflowSchemeForProject",
        "parameters": [
          {
            "name": "projectKeyOrId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if requested project exist and has associated workflow scheme, and the user has permission to see it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the requested user is not authenticated."
          },
          "403": {
            "description": "Returned if the requested user does not have permission to administer Jira."
          },
          "404": {
            "description": "Returned if the requested project does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/projectCategory": {
      "get": {
        "tags": [
          "projectCategory"
        ],
        "summary": "Get all project categories",
        "description": "Returns all project categories",
        "operationId": "getAllProjectCategories",
        "responses": {
          "200": {
            "description": "Returns a list of all project categories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCategoryJsonBean"
                }
              }
            }
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the list of projects."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "projectCategory"
        ],
        "summary": "Create project category",
        "description": "Create a project category.",
        "operationId": "createProjectCategory",
        "requestBody": {
          "description": "The project category to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCategoryBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the project category is created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCategoryJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the caller is not logged in so does not have permission to create project categories."
          },
          "403": {
            "description": "Returned if the caller is authenticated and does not have permission to create project categories (is not global admin)."
          },
          "409": {
            "description": "Returned if a project category with the given name already exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/projectCategory/{id}": {
      "get": {
        "tags": [
          "projectCategory"
        ],
        "summary": "Get project category by ID",
        "description": "Returns a full representation of the project category that has the given id.",
        "operationId": "getProjectCategoryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the project category exists and is visible by the calling user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCategoryJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the project category does not exist, or is not visible to the calling user."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "projectCategory"
        ],
        "summary": "Update project category",
        "description": "Modify a project category.",
        "operationId": "updateProjectCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The project category to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCategoryBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the project category exists and the currently authenticated user has permission to edit it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCategoryJsonBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the caller is not logged in so does not have permission to change project categories."
          },
          "403": {
            "description": "Returned if the caller is authenticated and does not have permission to change project categories (is not global admin)."
          },
          "404": {
            "description": "Returned if the project category does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "projectCategory"
        ],
        "summary": "Delete project category",
        "description": "Delete a project category.",
        "operationId": "removeProjectCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the project category is successfully deleted."
          },
          "401": {
            "description": "Returned if the caller is not logged in so does not have permission to delete project categories."
          },
          "403": {
            "description": "Returned if the caller is authenticated and does not have permission to delete project categories (is not global admin)."
          },
          "404": {
            "description": "Returned if the project category does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/projects/picker": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get projects matching query",
        "description": "Returns a list of projects visible to the user where project name and/or key is matching the given query.\nPassing an empty (or whitespace only) query will match no projects. The project matches will\ncontain a field with the query highlighted.\nThe number of projects returned can be controlled by passing a value for 'maxResults', but a hard limit of no\nmore than 100 projects is enforced. The projects are wrapped in a single response object that contains\na header for use in the picker, specifically 'Showing X of Y matching projects' and the total number\nof matches for the query.",
        "operationId": "searchForProjects",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null,
              "default": 0
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null,
              "default": ""
            }
          },
          {
            "name": "allowEmptyQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned even when no projects match the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPickerResultWrapper"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/projectvalidate/key": {
      "get": {
        "tags": [
          "projectvalidate"
        ],
        "summary": "Get project key validation",
        "description": "Validates a project key.",
        "operationId": "getProject_1",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an ErrorCollection containing any validation errors for the project key. If the project key is valid, the ErrorCollection will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCollection"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/reindex": {
      "get": {
        "tags": [
          "reindex"
        ],
        "summary": "Get reindex information",
        "description": "Returns information on the system reindexes. If a reindex is currently taking place then information about this reindex is returned. If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404 indicating that no reindex has taken place.",
        "operationId": "getReindexInfo",
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a representation of the progress of the re-index operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReindexBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if there is no re-indexing task found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "reindex"
        ],
        "summary": "Start a reindex operation",
        "description": "Kicks off a reindex. Need Admin permissions to perform this reindex.",
        "operationId": "reindex",
        "parameters": [
          {
            "name": "indexChangeHistory",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "indexWorklogs",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          },
          {
            "name": "indexComments",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Returns a representation of the progress of the re-index operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReindexBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/reindex/issue": {
      "post": {
        "tags": [
          "reindex"
        ],
        "summary": "Reindex individual issues",
        "description": "Reindexes one or more individual issues. Indexing is performed synchronously - the call returns when indexing of the issues has completed or a failure occurs.",
        "operationId": "reindexIssues",
        "parameters": [
          {
            "name": "issueId",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "type": "string",
                "example": null
              }
            }
          },
          {
            "name": "indexChangeHistory",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          },
          {
            "name": "indexWorklogs",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          },
          {
            "name": "indexComments",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns response indicating reindex time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReindexBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/reindex/progress": {
      "get": {
        "tags": [
          "reindex"
        ],
        "summary": "Get reindex progress",
        "description": "Returns information on the system reindexes. If a reindex is currently taking place then information about this reindex is returned. If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404 indicating that no reindex has taken place.",
        "operationId": "getReindexProgress",
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a representation of the progress of the re-index operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReindexBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if there is no re-indexing task found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/reindex/request": {
      "post": {
        "tags": [
          "reindex"
        ],
        "summary": "Execute pending reindex requests",
        "description": "Executes any pending reindex requests. Execution is asynchronous - progress of the returned tasks can be monitored through other REST calls.",
        "operationId": "processRequests",
        "responses": {
          "200": {
            "description": "Returns an array containing the reindex request IDs being processed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64",
                  "example": null
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authorized to process reindex requests."
          },
          "500": {
            "description": "Returned if there is an error processing reindex requests."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/reindex/request/bulk": {
      "get": {
        "tags": [
          "reindex"
        ],
        "summary": "Get progress of multiple reindex requests",
        "description": "Retrieves the progress of multiple reindex requests. Only reindex requests that actually exist will be returned in the results.",
        "operationId": "getProgressBulk",
        "parameters": [
          {
            "name": "requestId",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "example": null,
              "items": {
                "type": "integer",
                "format": "int64",
                "example": null
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of results describing the progress of each of the found requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReindexRequestBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/reindex/request/{requestId}": {
      "get": {
        "tags": [
          "reindex"
        ],
        "summary": "Get progress of a single reindex request",
        "description": "Retrieves the progress of a single reindex request.",
        "operationId": "getProgress",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details and status of the reindex request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReindexRequestBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if no such reindex request exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/resolution": {
      "get": {
        "tags": [
          "resolution"
        ],
        "summary": "Get all resolutions",
        "description": "Returns a list of all resolutions.",
        "operationId": "getResolutions",
        "responses": {
          "200": {
            "description": "Returns a list of Jira issue resolutions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolutionJsonBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/resolution/page": {
      "get": {
        "tags": [
          "resolution"
        ],
        "summary": "Get paginated filtered resolutions",
        "description": "Returns paginated list of filtered resolutions.",
        "operationId": "getPaginatedResolutions",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null,
              "default": 100
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null,
              "default": ""
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated list of resolutions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolutionBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/resolution/{id}": {
      "get": {
        "tags": [
          "resolution"
        ],
        "summary": "Get a resolution by ID",
        "description": "Returns a resolution.",
        "operationId": "getResolution",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a Jira issue resolution.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolutionJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the resolution does not exist or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/role": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get all project roles",
        "description": "Get all the ProjectRoles available in Jira. Currently this list is global.",
        "operationId": "getProjectRoles_1",
        "responses": {
          "200": {
            "description": "Returns full details of the roles available in Jira.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not logged in."
          },
          "403": {
            "description": "Returned if the requesting user is not an admin or a sysadmin."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "role"
        ],
        "summary": "Create a new project role",
        "description": "Creates a new ProjectRole to be available in Jira. The created role does not have any default actors assigned.",
        "operationId": "createProjectRole",
        "requestBody": {
          "description": "The role to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateRoleRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns full details of the created role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request json does not have a name field or the name field is invalid (empty or starts or ends with whitespace)"
          },
          "401": {
            "description": "Returned if you are not logged in."
          },
          "403": {
            "description": "Returned if you do not have permissions to create a role."
          },
          "409": {
            "description": "Returned if a role with given name already exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/role/{id}": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get a specific project role",
        "description": "Get a specific ProjectRole available in Jira.",
        "operationId": "getProjectRolesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns full details of the role available in Jira.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the requesting user is not logged in."
          },
          "403": {
            "description": "Returned if the requesting user is not an admin or a sysadmin."
          },
          "404": {
            "description": "Returned if the role with the given id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "role"
        ],
        "summary": "Fully updates a role's name and description",
        "description": "Fully updates a roles. Both name and description must be given.",
        "operationId": "fullyUpdateProjectRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateRoleRequestBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned when name or description is not given or the name field is invalid (empty or starts or ends with whitespace)."
          },
          "401": {
            "description": "Returned if the requesting user is not logged in."
          },
          "403": {
            "description": "Returned if the requesting user is not an admin or a sysadmin."
          },
          "404": {
            "description": "Returned if the role with the given id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "role"
        ],
        "summary": "Partially updates a role's name or description",
        "description": "Partially updates a roles name or description.",
        "operationId": "partialUpdateProjectRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateRoleRequestBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned when both name and description are not given or name field is invalid (empty or starts or ends with whitespace)."
          },
          "401": {
            "description": "Returned if the requesting user is not logged in."
          },
          "403": {
            "description": "Returned if the requesting user is not an admin or a sysadmin."
          },
          "404": {
            "description": "Returned if the role with the given id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "role"
        ],
        "summary": "Deletes a role",
        "description": "Deletes a role. May return 403 in the future",
        "operationId": "deleteProjectRole",
        "parameters": [
          {
            "name": "swap",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the delete was successful."
          },
          "400": {
            "description": "Returned if given role with given swap id does not exist."
          },
          "401": {
            "description": "Returned if the requesting user is not logged in."
          },
          "403": {
            "description": "Returned if the requesting user is not an admin or a sysadmin."
          },
          "404": {
            "description": "Returned if the role with the given id does not exist."
          },
          "409": {
            "description": "Returned if the project role is used in schemes and roleToSwap query parameter is not given."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/role/{id}/actors": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get default actors for a role",
        "description": "Gets default actors for the given role.",
        "operationId": "getProjectRoleActorsForRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns actor list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleActorsBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the requesting user is not logged in."
          },
          "403": {
            "description": "Returned if the requesting user is not an admin or a sysadmin."
          },
          "404": {
            "description": "Returned if the role with the given id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "role"
        ],
        "summary": "Adds default actors to a role",
        "description": "Adds default actors to the given role. The request data should contain a list of usernames or a list of groups to add.",
        "operationId": "addProjectRoleActorsToRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorInputBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns actor list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleActorsBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request json does not have a user or group field or both user and group fields are given."
          },
          "401": {
            "description": "Returned if the requesting user is not logged in."
          },
          "403": {
            "description": "Returned if the requesting user is not an admin or a sysadmin."
          },
          "404": {
            "description": "Returned if the role with the given id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "role"
        ],
        "summary": "Removes default actor from a role",
        "description": "Removes default actor from the given role.",
        "operationId": "deleteProjectRoleActorsFromRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated actors list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRoleActorsBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if user and group are not given, both user and group are given or provided group or user does not exist."
          },
          "401": {
            "description": "Returned if the requesting user is not logged in."
          },
          "403": {
            "description": "Returned if the requesting user is not an admin or a sysadmin."
          },
          "404": {
            "description": "Returned if the role with the given id does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens": {
      "get": {
        "tags": [
          "screens"
        ],
        "summary": "Get available field screens",
        "description": "Adds field or custom field to the default tab.",
        "operationId": "getAllScreens",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns response indicating successful addition of field to default screen / default tab."
          },
          "400": {
            "description": "Returned if screen, tab or field does not exist or field is already present on a selected tab."
          },
          "401": {
            "description": "Returned if the user does not have administrator permissions."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/addToDefault/{fieldId}": {
      "post": {
        "tags": [
          "screens"
        ],
        "summary": "Add field to default screen",
        "description": "Moves field on the given tab.",
        "operationId": "addFieldToDefaultScreen",
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns response indicating field movement."
          },
          "400": {
            "description": "Returned if the screen, tab or field does not exist."
          },
          "401": {
            "description": "Returned if the user is not authorized to move a field."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/{screenId}/availableFields": {
      "get": {
        "tags": [
          "screens"
        ],
        "summary": "Get available fields for screen",
        "description": "Gets available fields for screen. i.e ones that haven't already been added.",
        "operationId": "getFieldsToAdd",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of available fields for the screen.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenableFieldBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the screen does not exist."
          },
          "401": {
            "description": "Returned if the user is not authorized to view the available fields."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/{screenId}/tabs": {
      "get": {
        "tags": [
          "screens"
        ],
        "summary": "Get all tabs for a screen",
        "description": "Returns a list of all tabs for the given screen.",
        "operationId": "getAllTabs",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "projectKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Jira issue tabs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenableTabBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the screen does not exist."
          },
          "401": {
            "description": "Returned if the user is not authorized to view the tabs."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "screens"
        ],
        "summary": "Create tab for a screen",
        "description": "Creates tab for given screen.",
        "operationId": "addTab",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScreenableTabBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created tab.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenableTabBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the screen does not exist or the user is not authorized to create a tab."
          },
          "401": {
            "description": "Returned if the user is not authorized to create a tab."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/{screenId}/tabs/{tabId}": {
      "put": {
        "tags": [
          "screens"
        ],
        "summary": "Rename a tab on a screen",
        "description": "Renames tab on given screen.",
        "operationId": "renameTab",
        "parameters": [
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScreenableTabBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns renamed tab.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenableTabBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the screen does not exist or the user is not authorized to rename a tab."
          },
          "401": {
            "description": "Returned if the user is not authorized to rename a tab."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "screens"
        ],
        "summary": "Delete a tab from a screen",
        "description": "Deletes tab from given screen.",
        "operationId": "deleteTab",
        "parameters": [
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns response indicating tab deletion."
          },
          "400": {
            "description": "Returned if the screen does not exist or the user is not authorized to delete a tab."
          },
          "401": {
            "description": "Returned if the user is not authorized to delete a tab."
          },
          "412": {
            "description": "Returned if tab can not be deleted due to a pre-condition (there has to be at least one tab left)."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/{screenId}/tabs/{tabId}/fields": {
      "get": {
        "tags": [
          "screens"
        ],
        "summary": "Get all fields for a tab",
        "description": "Gets all fields for a given tab.",
        "operationId": "getAllFields",
        "parameters": [
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "projectKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all fields for the given tab.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenableFieldBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the screen or tab does not exist."
          },
          "401": {
            "description": "Returned if the user is not authorized to view the fields."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "screens"
        ],
        "summary": "Add field to a tab",
        "description": "Adds field to the given tab.",
        "operationId": "addField",
        "parameters": [
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFieldBean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly added field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenableFieldBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the screen, tab or field does not exist."
          },
          "401": {
            "description": "Returned if the user is not authorized to add a field."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/{screenId}/tabs/{tabId}/fields/{id}": {
      "delete": {
        "tags": [
          "screens"
        ],
        "summary": "Remove field from tab",
        "description": "Removes field from given tab.",
        "operationId": "removeField",
        "parameters": [
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns response indicating field removal."
          },
          "400": {
            "description": "Returned if the screen or tab does not exist."
          },
          "401": {
            "description": "Returned if the user is not authorized to remove a field."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/{screenId}/tabs/{tabId}/fields/{id}/move": {
      "post": {
        "tags": [
          "screens"
        ],
        "summary": "Move field on a tab",
        "description": "Moves field on the given tab.",
        "operationId": "moveField",
        "parameters": [
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveFieldBean"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns response indicating field movement."
          },
          "400": {
            "description": "Returned if the screen, tab or field does not exist."
          },
          "401": {
            "description": "Returned if the user is not authorized to move a field."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/{screenId}/tabs/{tabId}/fields/{id}/updateShowWhenEmptyIndicator/{newValue}": {
      "put": {
        "tags": [
          "screens"
        ],
        "summary": "Update 'showWhenEmptyIndicator' for a field",
        "description": "Update 'showWhenEmptyIndicator' for given field on screen.",
        "operationId": "updateShowWhenEmptyIndicator",
        "parameters": [
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "newValue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns response indicating the update of 'showWhenEmptyIndicator'."
          },
          "400": {
            "description": "Returned if the screen, tab or field does not exist."
          },
          "401": {
            "description": "Returned if the user is not authorized to update 'showWhenEmptyIndicator'."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/screens/{screenId}/tabs/{tabId}/move/{pos}": {
      "post": {
        "tags": [
          "screens"
        ],
        "summary": "Move tab position",
        "description": "Moves tab position.",
        "operationId": "moveTab",
        "parameters": [
          {
            "name": "tabId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "screenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "pos",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns response indicating tab movement."
          },
          "400": {
            "description": "Returned if the screen does not exist or the user is not authorized to move a tab."
          },
          "401": {
            "description": "Returned if the user is not authorized to move a tab."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/search": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Get issues using JQL",
        "description": "Searches for issues using JQL.\nSorting\nthe jql parameter is a full <a href=\"http://confluence.atlassian.com/display/JIRA/Advanced+Searching\">JQL</a>\nexpression, and includes an ORDER BY clause.\nThe fields param (which can be specified multiple times) gives a comma-separated list of fields\nto include in the response. This can be used to retrieve a subset of fields.\nA particular field can be excluded by prefixing it with a minus.\nBy default, only navigable (*navigable) fields are returned in this search resource. Note: the default is different\nin the get-issue resource -- the default there all fields (*all).\n*all - include all fields\n*navigable - include just navigable fields\nsummary,comment - include just the summary and comments\n-description - include navigable fields except the description (the default is *navigable for search)\n*all,-comment - include everything except comments\nGET vs POST:\nIf the JQL query is too large to be encoded as a query param you should instead\nPOST to this resource.\nExpanding Issues in the Search Result:\nIt is possible to expand the issues returned by directly specifying the expansion on the expand parameter passed\nin to this resources.\nFor instance, to expand the changelog for all the issues on the search result, it is necessary to\nspecify changelog as one of the values to expand.",
        "operationId": "search_1",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StringList"
            }
          },
          {
            "name": "jql",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "validateQuery",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": true
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "$ref": "#/components/schemas/StringList"
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a JSON representation of the search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if there is a problem with the JQL query."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Perform search with JQL",
        "description": "Performs a search using JQL.",
        "operationId": "searchUsingSearchRequest",
        "requestBody": {
          "description": "a JSON object containing the search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns a JSON representation of the search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if there is a problem with the JQL query."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/securitylevel/{id}": {
      "get": {
        "tags": [
          "securitylevel"
        ],
        "summary": "Get a security level by ID",
        "description": "Returns a full representation of the security level that has the given id.",
        "operationId": "getIssuesecuritylevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the issue type exists and is visible by the calling user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityLevelJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the issue type does not exist, or is not visible to the calling user."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/serverInfo": {
      "get": {
        "tags": [
          "serverInfo"
        ],
        "summary": "Get general information about the current Jira server",
        "description": "Returns general information about the current Jira server.",
        "operationId": "getServerInfo",
        "responses": {
          "200": {
            "description": "Returns a full representation of the server info in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerInfoBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/settings/baseUrl": {
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Update base URL for Jira instance",
        "description": "Sets the base URL that is configured for this Jira instance.",
        "operationId": "setBaseURL",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when the base url is saved successfully."
          },
          "400": {
            "description": "Returned if the specified base URL is not valid."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/settings/columns": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get default system columns for issue navigator",
        "description": "Returns the default system columns for issue navigator. Admin permission will be required.",
        "operationId": "getIssueNavigatorDefaultColumns",
        "responses": {
          "200": {
            "description": "Returns a list of columns for configured for the given user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnOptions"
                }
              }
            }
          },
          "403": {
            "description": "Returned if the user does not have admin permission."
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the column configuration."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Set default system columns for issue navigator using form",
        "description": "Sets the default system columns for issue navigator. Admin permission will be required.",
        "operationId": "setIssueNavigatorDefaultColumnsForm",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "columns": {
                    "type": "array",
                    "example": null,
                    "items": {
                      "type": "string",
                      "example": null
                    }
                  }
                },
                "example": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when the columns is saved successfully."
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the column configuration."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/status": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get all statuses",
        "description": "Returns a list of all statuses",
        "operationId": "getStatuses",
        "responses": {
          "200": {
            "description": "Returns a list of all Jira issue statuses in JSON format, that are visible to the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the requested issue status is not found, or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/status/page": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get paginated filtered statuses",
        "description": "Returns paginated list of filtered statuses",
        "operationId": "getPaginatedStatuses",
        "parameters": [
          {
            "name": "issueTypeIds",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "example": null,
              "items": {
                "type": "string",
                "example": null
              }
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null,
              "default": 100
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null,
              "default": ""
            }
          },
          {
            "name": "projectIds",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "example": null,
              "items": {
                "type": "integer",
                "format": "int64",
                "example": null
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated list of statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusJsonBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/status/{idOrName}": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get status by ID or name",
        "description": "Returns a full representation of the Status having the given id or name.",
        "operationId": "getStatus",
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full representation of a Jira issue status in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the requested issue status is not found, or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/statuscategory": {
      "get": {
        "tags": [
          "statuscategory"
        ],
        "summary": "Get all status categories",
        "description": "Returns a list of all status categories",
        "operationId": "getStatusCategories",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "description": "a Request",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "uriInfo",
            "in": "query",
            "description": "a UriInfo",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all Jira issue status categories in JSON format, that are visible to the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCategoryJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if no status categories are found, or the user does not have permission to view them."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/statuscategory/{idOrKey}": {
      "get": {
        "tags": [
          "statuscategory"
        ],
        "summary": "Get status category by ID or key",
        "description": "Returns a full representation of the StatusCategory having the given id or key",
        "operationId": "getStatusCategory",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full representation of a Jira issue status category in JSON format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCategoryJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the requested issue status category is not found, or the user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/terminology/entries": {
      "get": {
        "tags": [
          "terminology"
        ],
        "summary": "Get all defined names for 'epic' and 'sprint'",
        "description": "Returns a list of all defined names for the default words 'epic' and 'sprint'",
        "operationId": "getAllTerminologyEntries",
        "responses": {
          "200": {
            "description": "Returns a list of all defined names for the default words 'epic' and 'sprint'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerminologyResponseBean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "post": {
        "tags": [
          "terminology"
        ],
        "summary": "Update epic/sprint names from original to new",
        "description": "Change epic/sprint names from {originalName} to {newName}. The {newName} will be displayed in Jira instead of {originalName}\n{\"originalName\"} must be equal to \"epic\" or \"sprint\".\nThere can be only one entry per unique {\"originalName\"}.\n{\"newName\"} can only consist of alphanumeric characters and spaces e.g. {\"newName\": \"iteration number 2\"}.\n{\"newName\"} must be between 1 to 100 characters.\nIt can't use the already defined {\"newName\"} values or restricted JQL words.\nTo reset {\"newName\"} to the default value, enter the {\"originalName\"} value as the value for {\"newName\"}. For example, if you want to return to {\"originalName\": \"sprint\"}, enter {\"newName\": \"sprint\"}.",
        "operationId": "setTerminologyEntries",
        "requestBody": {
          "description": "Collection of TerminologyRequestBean",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminologyRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Returned if the provided data isn't valid."
          },
          "403": {
            "description": "Returned if the user doesn't have admin permissions."
          },
          "404": {
            "description": "Returned if the feature is turned off via a feature flag."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/terminology/entries/{originalName}": {
      "get": {
        "tags": [
          "terminology"
        ],
        "summary": "Get epic or sprint name by original name",
        "description": "Returns epic or sprint name as specified in the {originalName} path param",
        "operationId": "getTerminologyEntry",
        "parameters": [
          {
            "name": "originalName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns epic or sprint name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerminologyResponseBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if there is no epic or sprint name defined in the {originalName}."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/universal_avatar/type/{type}/owner/{owningObjectId}": {
      "get": {
        "tags": [
          "universal_avatar"
        ],
        "summary": "Get all avatars for a type and owner",
        "description": "Returns a list of all avatars",
        "operationId": "getAvatars",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "owningObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all Jira avatars in JSON format, that are visible to the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if no avatars are found, or the user does not have permission to view them."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/universal_avatar/type/{type}/owner/{owningObjectId}/avatar": {
      "post": {
        "tags": [
          "universal_avatar"
        ],
        "summary": "Create avatar from temporary",
        "description": "Creates avatar from temporary",
        "operationId": "createAvatarFromTemporary_3",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "owningObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarCroppingBean"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created avatar.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the provided data isn't valid."
          },
          "403": {
            "description": "Returned if the user doesn't have admin permissions."
          },
          "404": {
            "description": "Returned if the feature is turned off via a feature flag."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}": {
      "delete": {
        "tags": [
          "universal_avatar"
        ],
        "summary": "Delete avatar by ID",
        "description": "Deletes avatar",
        "operationId": "deleteAvatar_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "owningObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the status of the deletion."
          },
          "400": {
            "description": "Returned if the provided data isn't valid."
          },
          "403": {
            "description": "Returned if the user doesn't have admin permissions."
          },
          "404": {
            "description": "Returned if the feature is turned off via a feature flag."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/universal_avatar/type/{type}/owner/{owningObjectId}/temp": {
      "post": {
        "tags": [
          "universal_avatar"
        ],
        "summary": "Create temporary avatar using multipart upload",
        "description": "Creates temporary avatar",
        "operationId": "storeTemporaryAvatarUsingMultiPart_2",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "owningObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FilePart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns temporary avatar cropping instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarCroppingBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the provided data isn't valid."
          },
          "403": {
            "description": "Returned if the user doesn't have admin permissions."
          },
          "404": {
            "description": "Returned if the feature is turned off via a feature flag."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/upgrade": {
      "get": {
        "tags": [
          "upgrade"
        ],
        "summary": "Get result of the last upgrade task",
        "description": "Returns the result of the last upgrade task.",
        "operationId": "getUpgradeResult",
        "responses": {
          "200": {
            "description": "Returns the result of the last upgrade.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeResultBean"
                }
              }
            }
          },
          "303": {
            "description": "Returned if the upgrade task is still running."
          },
          "404": {
            "description": "Returned if no prior upgrade task exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "upgrade"
        ],
        "summary": "Run pending upgrade tasks",
        "description": "Runs any pending delayed upgrade tasks. Need Admin permissions to do this.",
        "operationId": "runUpgradesNow",
        "responses": {
          "200": {
            "description": "OK response if successful, array of error messages if schedule fails."
          },
          "403": {
            "description": "Returned if the user does not have admin permissions."
          },
          "409": {
            "description": "Returned if ZDU cluster upgrade in progress."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by username or key",
        "description": "Returns a user.",
        "operationId": "getUser_1",
        "parameters": [
          {
            "name": "includeDeleted",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          },
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller does not have permission to perform operation."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user details",
        "description": "Modify user. The 'value' fields present will override the existing value. Fields skipped in request will not be changed.",
        "operationId": "updateUser_1",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "User details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserWriteBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the user exists and the caller has permission to edit it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWriteBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller user does not have permission to edit the user."
          },
          "404": {
            "description": "Returned if the caller does have permission to edit the user but the user does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create new user",
        "description": "Create user. By default created user will not be notified with email. If password field is not set then password will be randomly generated.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserWriteBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the user was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWriteBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller user does not have permission to create the user."
          },
          "500": {
            "description": "Returned if the user was not created because of other error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "Removes user and its references (like project roles associations, watches, history). Note: user references will not be removed if multiple User Directories are used and there is a user with the same name existing in another directory (shadowing user).",
        "operationId": "removeUser",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the user was deleted successfully."
          },
          "400": {
            "description": "Returned if the request is invalid or some other server error occurred."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller does not have permission to remove the user."
          },
          "404": {
            "description": "Returned if the caller does have permission to remove user but the user does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/user/a11y/personal-settings": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get available accessibility personal settings",
        "description": "Returns available accessibility personal settings along with `enabled` property that indicates the currently logged-in user preference.",
        "operationId": "getA11yPersonalSettings",
        "responses": {
          "200": {
            "description": "Returned when validation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/A11yPersonalSettingBean"
                }
              }
            }
          }
        }
      }
    },
    "/api/2/user/anonymization": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get validation for user anonymization",
        "description": "Validates user anonymization process.",
        "operationId": "validateUserAnonymization",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "userKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when validation succeeded."
          },
          "400": {
            "description": "Returned if a mandatory parameter was not provided or validation failed."
          },
          "403": {
            "description": "Returned if the logged-in user cannot anonymize users."
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Schedule user anonymization",
        "description": "Schedules a user anonymization process. Requires system admin permission.",
        "operationId": "scheduleUserAnonymization",
        "requestBody": {
          "description": "JSON containing parameters to schedule the anonymization process with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAnonymizationRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returned if the process was scheduled. Note that it can still fail the extended validation once its execution starts."
          },
          "400": {
            "description": "Returned if a mandatory parameter was not provided."
          },
          "403": {
            "description": "Returned if the logged-in user cannot anonymize users."
          },
          "409": {
            "description": "Returned if another user anonymization process is already in progress."
          }
        }
      }
    },
    "/api/2/user/anonymization/progress": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user anonymization progress",
        "description": "Returns information about a user anonymization operation progress.",
        "operationId": "getProgress_1",
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a representation of the progress of the user anonymization operation."
          },
          "403": {
            "description": "Returned if the logged-in user cannot anonymize users."
          },
          "404": {
            "description": "Returned if there is no user anonymization task found."
          }
        }
      }
    },
    "/api/2/user/anonymization/rerun": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get validation for user anonymization rerun",
        "description": "Validates user anonymization re-run process.",
        "operationId": "validateUserAnonymizationRerun",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "oldUserKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "oldUserName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "userKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when validation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAnonymizationValidationBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if a mandatory parameter was not provided or validation failed."
          },
          "403": {
            "description": "Returned if the logged-in user cannot anonymize users."
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Schedule user anonymization rerun",
        "description": "Schedules a user anonymization process. Requires system admin permission.",
        "operationId": "scheduleUserAnonymizationRerun",
        "requestBody": {
          "description": "JSON containing parameters to schedule the anonymization process with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAnonymizationRerunRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returned if the process was scheduled. Note that it can still fail the extended validation once its execution starts."
          },
          "400": {
            "description": "Returned if a mandatory parameter was not provided."
          },
          "403": {
            "description": "Returned if the logged-in user cannot anonymize users."
          },
          "409": {
            "description": "Returned if another user anonymization process is already in progress."
          }
        }
      }
    },
    "/api/2/user/anonymization/unlock": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete stale user anonymization task",
        "description": "Removes stale user anonymization task, for scenarios when the node that was executing it is no longer alive. Use it only after making sure that the parent node of the task is actually down, and not just having connectivity issues.",
        "operationId": "unlockAnonymization",
        "responses": {
          "204": {
            "description": "Returned when anonymization task has been successfully removed."
          },
          "400": {
            "description": "Returned if called when Jira is running in a non-clustered mode."
          },
          "403": {
            "description": "Returned if the logged-in user cannot remove anonymization tasks."
          },
          "404": {
            "description": "Returned if there is no user anonymization task found."
          },
          "409": {
            "description": "Returned if the node executing the anonymization is still running."
          }
        }
      }
    },
    "/api/2/user/application": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add user to application",
        "description": "Add user to given application. Admin permission will be required to perform this operation.",
        "operationId": "addUserToApplication_1",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the user exists, the caller has permission to add user to application and user was successfully added to application."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller user does not have permission to add user to application."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Remove user from application",
        "description": "Remove user from given application. Admin permission will be required to perform this operation.",
        "operationId": "removeUserFromApplication_1",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the user exists, the caller has permission to remove user from application and the user was successfully removed from application."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller user does not have permission to remove user from application."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/user/assignable/multiProjectSearch": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find bulk assignable users",
        "description": "Returns a list of users that match the search string and can be assigned issues for all the given projects.",
        "operationId": "findBulkAssignableUsers",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null,
              "default": 50
            }
          },
          {
            "name": "projectKeys",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users that match the search string.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user has no permission to browse project."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/assignable/search": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find assignable users by username",
        "description": "Returns a list of users that match the search string. This resource cannot be accessed anonymously. Please note that this resource should be called with an issue key when a list of assignable users is retrieved. For create only a project key should be supplied. The list of assignable users may be incorrect if it's called with the project key for editing.",
        "operationId": "findAssignableUsers_1",
        "parameters": [
          {
            "name": "issueKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null,
              "default": 50
            }
          },
          {
            "name": "project",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "actionDescriptorId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users that match the search string.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/avatar": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user avatar",
        "description": "Updates the avatar for the user.",
        "operationId": "updateUserAvatar_1",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "New avatar details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns updated avatar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the avatar details are invalid"
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to update avatar"
          },
          "404": {
            "description": "Returned if user from parameter does not exist"
          },
          "500": {
            "description": "Returned if an error occurs while updating the avatar"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create avatar from temporary",
        "description": "Converts temporary avatar into a real avatar",
        "operationId": "createAvatarFromTemporary_4",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Cropping instructions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarCroppingBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns created avatar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the cropping coordinates are invalid"
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to pick avatar"
          },
          "404": {
            "description": "Returned if user from parameter does not exist"
          },
          "500": {
            "description": "Returned if an error occurs while converting temporary avatar to real avatar"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/avatar/temporary": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Store temporary avatar using multipart",
        "description": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from which the client parses the JSON from.\nCreating a temporary avatar is part of a 3-step process in uploading a new avatar for a user: upload, crop, confirm. This endpoint allows you to use a multipart upload instead of sending the image directly as the request body.\nYou *must* use \"avatar\" as the name of the upload parameter:\ncurl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n  -F \"avatar=@mynewavatar.png;type=image/png\" \\\n  'http://localhost:8090/jira/rest/api/2/user/avatar/temporary?username=admin'",
        "operationId": "storeTemporaryAvatarUsingMultiPart_3",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The file data",
          "content": {
            "multipart/form-data": {}
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns temporary avatar cropping instructions embeded in HTML page. Error messages will also be embeded in the page.",
            "content": {
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarCroppingBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to store the avatar or XSRF token is invalid."
          },
          "404": {
            "description": "Returned if user does NOT exist"
          },
          "500": {
            "description": "Returned if an error occurs while converting temporary avatar to real avatar"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/avatar/{id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete avatar",
        "description": "Deletes avatar",
        "operationId": "deleteAvatar_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the avatar is successfully deleted."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to delete the avatar."
          },
          "404": {
            "description": "Returned if the avatar does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/avatars": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all avatars for user",
        "description": "Returns all avatars which are visible for the currently logged in user.",
        "operationId": "getAllAvatars_1",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a map containing a list of avatars for both custom an system avatars",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the list of avatars."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/columns": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get default columns for user",
        "description": "Returns the default columns for the given user. Admin permission will be required to get columns for a user other than the currently logged in user.",
        "operationId": "defaultColumns",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of columns for configured for the given user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnOptions"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not permitted to request the columns for the given user."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the column configuration."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Set default columns for user",
        "description": "Sets the default columns for the given user. Admin permission will be required to get columns for a user other than the currently logged in user.",
        "operationId": "setColumnsUrlEncoded",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": null
                  },
                  "columns": {
                    "type": "array",
                    "example": null,
                    "items": {
                      "type": "string",
                      "example": null
                    }
                  }
                },
                "example": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned when the columns is saved successfully"
          },
          "500": {
            "description": "Returned if an error occurs while retrieving the column configuration."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Reset default columns to system default",
        "description": "Reset the default columns for the given user to the system default. Admin permission will be required to get columns for a user other than the currently logged in user.",
        "operationId": "resetColumns",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned when the columns are reset successfully"
          },
          "401": {
            "description": "Returned if the current user is not permitted to request the columns for the given user."
          },
          "500": {
            "description": "Returned if an error occurs while resetting the column configuration."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/duplicated/count": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get duplicated users count",
        "description": "Returns a list of users that match the search string. This resource cannot be accessed anonymously.\nDuplicated means that the user has an account in more than one directory\nand either more than one account is active or the only active account does not belong to the directory\nwith the highest priority.\nThe data returned by this endpoint is cached for 10 minutes and the cache is flushed when any User Directory\nis added, removed, enabled, disabled, or synchronized.\nA System Administrator can also flush the cache manually.\nRelated JAC ticket: https://jira.atlassian.com/browse/JRASERVER-68797",
        "operationId": "getDuplicatedUsersCount",
        "parameters": [
          {
            "name": "flush",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users that match the search string.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/user/duplicated/list": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get duplicated users mapping",
        "description": "Returns duplicated users mapped to their directories with an indication if their accounts are active or not.\nDuplicated means that the user has an account in more than one directory and either more than one account is active\nor the only active account does not belong to the directory with the highest priority.\nThe data returned by this endpoint is cached for 10 minutes and the cache is flushed when any User Directory\nis added, removed, enabled, disabled, or synchronized.\nA System Administrator can also flush the cache manually.\nRelated JAC ticket: https://jira.atlassian.com/browse/JRASERVER-68797",
        "operationId": "getDuplicatedUsersMapping",
        "parameters": [
          {
            "name": "flush",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all avatars which are visible for the currently logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if user is not an admin."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/user/password": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user password",
        "description": "Modify user password.",
        "operationId": "changeUserPassword",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "Password details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Returned if the user exists and the caller has permission to edit it."
          },
          "400": {
            "description": "Returned if the request is invalid."
          },
          "401": {
            "description": "Returned if the user is not authenticated."
          },
          "403": {
            "description": "Returned if the caller does not have permission to change the user password."
          },
          "404": {
            "description": "Returned if the caller does have permission to change user password but the user does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      }
    },
    "/api/2/user/permission/search": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find users with all specified permissions",
        "description": "Returns a list of active users that match the search string and have all specified permissions for the project or issue. This resource can be accessed by users with ADMINISTER_PROJECT permission for the project or global ADMIN or SYSADMIN rights. This endpoint can cause serious performance issues and will be removed in Jira 9.0.",
        "operationId": "findUsersWithAllPermissions",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users that match the search string.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if no project or issue key was provided or when permissions list is empty or contains an invalid entry"
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "403": {
            "description": "Returned if the current user does not have admin rights for the project."
          },
          "404": {
            "description": "Returned if the requested issue or project is not found."
          }
        },
        "deprecated": true,
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/picker": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find users for picker by query",
        "description": "Returns a list of users matching query with highlighting.",
        "operationId": "findUsersForPicker",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "schema": {
              "type": "array",
              "example": null,
              "items": {
                "type": "string",
                "example": null
              }
            }
          },
          {
            "name": "showAvatar",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users matching query with highlighting.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPickerResultsBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/properties": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get keys of all properties for a user",
        "description": "Returns the keys of all properties for the user identified by the key or by the id.",
        "operationId": "getPropertiesKeys_4",
        "parameters": [
          {
            "name": "userKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the user was found."
          },
          "400": {
            "description": "Returned if the user key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to browse the user."
          },
          "404": {
            "description": "Returned if the user with given key or id does not exist or if the property with given key is not found."
          }
        }
      }
    },
    "/api/2/user/properties/{propertyKey}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the value of a specified user's property",
        "description": "Returns the value of the property with a given key from the user identified by the key or by the id.",
        "operationId": "getProperty_6",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "userKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the user property was found."
          },
          "400": {
            "description": "Returned if the user key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to browse the user."
          },
          "404": {
            "description": "Returned if the user with given key or id does not exist or if the property with given key is not found."
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Set the value of a specified user's property",
        "description": "Sets the value of the specified user's property.\nYou can use this resource to store a custom data against the user identified by the key or by the id. The user\nwho stores the data is required to have permissions to administer the user.",
        "operationId": "setProperty_5",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "userKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The request containing value of the user's property. The value has to be a valid, non-empty JSON conforming to http://tools.ietf.org/html/rfc4627. The maximum length of the property value is 32768 bytes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if the user property is successfully updated."
          },
          "201": {
            "description": "Returned if the user property is successfully created."
          },
          "400": {
            "description": "Returned if the user key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to administer the user."
          },
          "404": {
            "description": "Returned if the user with given key or id does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a specified user's property",
        "description": "Removes the property from the user identified by the key or by the id. The user who removes the property is required to have permissions to administer the user.",
        "operationId": "deleteProperty_6",
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "userKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the user property was removed successfully."
          },
          "400": {
            "description": "Returned if the user key or id is invalid."
          },
          "401": {
            "description": "Returned if the calling user is not authenticated."
          },
          "403": {
            "description": "Returned if the calling user does not have permission to edit the user."
          },
          "404": {
            "description": "Returned if the user with given key or id does not exist or if the property with given key is not found."
          }
        }
      }
    },
    "/api/2/user/search": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find users by username",
        "description": "Finds users.",
        "operationId": "findUsers",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "includeActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid parameter value was provided with more details in the response body."
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "404": {
            "description": "Returned if the requested user is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/session/{username}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user session",
        "description": "Invalidates session of given user.",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "a String containing username.",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the session is invalidated successfully."
          },
          "401": {
            "description": "Returned if the user is not logged."
          },
          "403": {
            "description": "Returned if the user does not have admin permission."
          },
          "404": {
            "description": "Returned if the username does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/user/viewissue/search": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find users with browse permission",
        "description": "Returns a list of active users that match the search string. This resource cannot be accessed anonymously and requires the Browse Users global permission. Given an issue key this resource will provide a list of users that match the search string and have the browse issue permission for the issue provided.",
        "operationId": "findUsersWithBrowsePermission",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "issueKey",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users that match the search string.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if no project or issue key was provided"
          },
          "401": {
            "description": "Returned if the current user is not authenticated."
          },
          "404": {
            "description": "Returned if the requested issue or project is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get paginated versions",
        "description": "Retrieve paginated collection of versions matching given query optionally filtered by given project IDs.",
        "operationId": "getPaginatedVersions",
        "parameters": [
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": null,
              "default": 100
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null,
              "default": ""
            }
          },
          {
            "name": "projectIds",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "example": null,
              "items": {
                "type": "integer",
                "format": "int64",
                "example": null
              }
            }
          },
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the versions are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionBean"
                }
              }
            }
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to view the versions."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-experimental": true
      },
      "post": {
        "tags": [
          "version"
        ],
        "summary": "Create new version",
        "description": "Creates a version.",
        "operationId": "createVersion",
        "requestBody": {
          "description": "JSON containing parameters to create the version with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the version is successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionBean"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the version could not be created."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to edit the version."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/remotelink": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get remote version links by global ID",
        "description": "Returns the remote version links for a given global ID.",
        "operationId": "getRemoteVersionLinks",
        "parameters": [
          {
            "name": "globalId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the remote version links are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteEntityLinksJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the remote version links could not be retrieved."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/{id}": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get version details",
        "description": "Returns a version.",
        "operationId": "getVersion",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the version was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the version does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": [
          "version"
        ],
        "summary": "Update version details",
        "description": "Updates a version.",
        "operationId": "updateVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "JSON containing parameters to update the version with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the version is successfully updated."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to edit the version."
          },
          "404": {
            "description": "Returned if the version does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/{id}/mergeto/{moveIssuesTo}": {
      "put": {
        "tags": [
          "version"
        ],
        "summary": "Merge versions",
        "description": "Merge versions",
        "operationId": "merge",
        "parameters": [
          {
            "name": "moveIssuesTo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the version is successfully deleted."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to delete the version."
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/{id}/move": {
      "post": {
        "tags": [
          "version"
        ],
        "summary": "Modify version's sequence",
        "description": "Modify a version's sequence within a project.\nThe move version bean has 2 alternative field value pairs:\n- position: An absolute position, which may have a value of 'First', 'Last', 'Earlier' or 'Later'\n- after: A version to place this version after.  The value should be the self link of another version",
        "operationId": "moveVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "JSON containing parameters to move the version with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionMoveBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the version is successfully moved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionBean"
                }
              }
            }
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to move the version."
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/{id}/relatedIssueCounts": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get version related issues count",
        "description": "Returns a bean containing the number of fixed in and affected issues for the given version.",
        "operationId": "getVersionRelatedIssues",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the version exists and the currently authenticated user has permission to view it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionIssueCountsBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/{id}/removeAndSwap": {
      "post": {
        "tags": [
          "version"
        ],
        "summary": "Delete version and replace values",
        "description": "Delete a project version, removed values will be replaced with ones specified by the parameters.",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "JSON containing parameters to replace the deleted version with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAndReplaceVersionBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Returned if the version is successfully deleted."
          },
          "400": {
            "description": "Returned if the replacement didn't succeed"
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/{id}/unresolvedIssueCount": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get version unresolved issues count",
        "description": "Returns the number of unresolved issues for the given version",
        "operationId": "getVersionUnresolvedIssues",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the version exists and the currently authenticated user has permission to view it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionUnresolvedIssueCountsBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/{versionId}/remotelink": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get remote version links by version ID",
        "description": "Returns the remote version links associated with the given version ID.",
        "operationId": "getRemoteVersionLinksByVersionId",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the version exists and the currently authenticated user has permission to view it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteEntityLinksJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "version"
        ],
        "summary": "Create or update remote version link without global ID",
        "description": "Create a remote version link via POST. The link's global ID will be taken from the JSON payload if provided; otherwise, it will be generated.",
        "operationId": "createOrUpdateRemoteVersionLink",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "JSON containing parameters to create the remote version link with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteEntityLinkJsonBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the remote version link is created or updated successfully."
          },
          "400": {
            "description": "Returned if the JSON payload is empty or malformed"
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to edit the version."
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "version"
        ],
        "summary": "Delete all remote version links for version",
        "description": "Delete all remote version links for a given version ID.",
        "operationId": "deleteRemoteVersionLinksByVersionId",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the remote version links are successfully deleted."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to delete the remote version links."
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/version/{versionId}/remotelink/{globalId}": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get specific remote version link",
        "description": "Returns the remote version link associated with the given version ID and global ID.",
        "operationId": "getRemoteVersionLink",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "globalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the version exists and the currently authenticated user has permission to view it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteEntityLinkJsonBean"
                }
              }
            }
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "version"
        ],
        "summary": "Create or update remote version link with global ID",
        "description": "Create a remote version link via POST using the provided global ID.",
        "operationId": "createOrUpdateRemoteVersionLink_1",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "globalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "JSON containing parameters to create the remote version link with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteEntityLinkJsonBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the remote version link is created or updated successfully."
          },
          "400": {
            "description": "Returned if the JSON payload is empty or malformed"
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to edit the version."
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "version"
        ],
        "summary": "Delete specific remote version link",
        "description": "Delete a specific remote version link with the given version ID and global ID.",
        "operationId": "deleteRemoteVersionLink",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "globalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the remote version link is successfully deleted."
          },
          "403": {
            "description": "Returned if the currently authenticated user does not have permission to delete the remote version link."
          },
          "404": {
            "description": "Returned if the version does not exist or the currently authenticated user does not have permission to view it."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/workflow": {
      "get": {
        "tags": [
          "workflow"
        ],
        "summary": "Get all workflows",
        "description": "Returns all workflows. The “lastModifiedDate” is returned in Jira Complete Date/Time Format (dd/MMM/yy h:mm by default), but can also be returned as a relative date.",
        "operationId": "getAllWorkflows",
        "parameters": [
          {
            "name": "workflowName",
            "in": "query",
            "description": "an optional String containing workflow name. If not passed then all workflows are returned",
            "schema": {
              "type": "string",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the currently authenticated user has administration permission. Contains a full representation of every workflow."
          },
          "401": {
            "description": "Returned if the currently authenticated user does not have administration permission."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/2/workflowscheme": {
      "post": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Create a new workflow scheme",
        "description": "Create a new workflow scheme. The body contains a representation of the new scheme. Values not passed are assumed to be set to their defaults.",
        "operationId": "createScheme",
        "requestBody": {
          "description": "The body contains a representation of the new scheme. Values not passed are assumed to be set to their defaults.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowSchemeBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created scheme."
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}": {
      "get": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Get requested workflow scheme by ID",
        "description": "Returns the requested workflow scheme to the caller.",
        "operationId": "getById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "returnDraftIfExists",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the scheme exists and the caller has permission to see it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested scheme does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Update a specified workflow scheme",
        "description": "Update the passed workflow scheme. The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.\nThe passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft\nshould be created and/or updated when the actual scheme cannot be edited (e.g. when the scheme is being used by\na project). Values not appearing the body will not be touched.",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowSchemeBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested scheme does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Delete the specified workflow scheme",
        "description": "Delete the passed workflow scheme.",
        "operationId": "deleteScheme",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If the scheme was deleted."
          },
          "400": {
            "description": "Returned if the requested scheme is active (i.e. being used by Jira)."
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested scheme does not exist."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}/createdraft": {
      "post": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Create a draft for a workflow scheme",
        "description": "Create a draft for the passed scheme. The draft will be a copy of the state of the parent.",
        "operationId": "createDraftForParent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The newly created scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested scheme does not exist."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}/default": {
      "get": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Get default workflow for a scheme",
        "description": "Return the default workflow from the passed workflow scheme.",
        "operationId": "getDefault",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "returnDraftIfExists",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the workflow scheme does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Update default workflow for a scheme",
        "description": "Set the default workflow for the passed workflow scheme. The passed representation can have its\nupdateDraftIfNeeded flag set to true to indicate that the draft should be created/updated when the actual scheme\ncannot be edited.",
        "operationId": "updateDefault",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The new default.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the scheme does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Remove default workflow from a scheme",
        "description": "Remove the default workflow from the passed workflow scheme.",
        "operationId": "deleteDefault",
        "parameters": [
          {
            "name": "updateDraftIfNeeded",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the scheme does not exist."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}/draft": {
      "get": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Get requested draft workflow scheme by ID",
        "description": "Returns the requested draft workflow scheme to the caller.",
        "operationId": "getDraftById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the scheme exists and the caller has permission to see it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested draft scheme does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Update a draft workflow scheme",
        "description": "Update a draft workflow scheme. The draft will created if necessary. The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.",
        "operationId": "updateDraft",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowSchemeBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated/created scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested scheme does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Delete the specified draft workflow scheme",
        "description": "Delete the passed draft workflow scheme.",
        "operationId": "deleteDraftById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If the scheme was deleted."
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested draft scheme or parent scheme does not exist."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}/draft/default": {
      "get": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Get default workflow for a draft scheme",
        "description": "Return the default workflow from the passed draft workflow scheme to the caller.",
        "operationId": "getDraftDefault",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the workflow scheme does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Update default workflow for a draft scheme",
        "description": "Set the default workflow for the passed draft workflow scheme.",
        "operationId": "updateDraftDefault",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The new default.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the scheme does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Remove default workflow from a draft scheme",
        "description": "Remove the default workflow from the passed draft workflow scheme.",
        "operationId": "deleteDraftDefault",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the scheme does not exist."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}/draft/issuetype/{issueType}": {
      "get": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Get issue type mapping for a draft scheme",
        "description": "Returns the issue type mapping for the passed draft workflow scheme.",
        "operationId": "getDraftIssueType",
        "parameters": [
          {
            "name": "issueType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeMappingBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if either the requested scheme or issue type does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Set an issue type mapping for a draft scheme",
        "description": "Set the issue type mapping for the passed draft scheme. The passed representation can have its updateDraftIfNeeded flag set to true to indicate that\nthe draft should be created/updated when the actual scheme cannot be edited.",
        "operationId": "setDraftIssueType",
        "parameters": [
          {
            "name": "issueType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The new mapping for the issue type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueTypeMappingBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if either the requested scheme or issue type does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Delete an issue type mapping from a draft scheme",
        "description": "Remove the specified issue type mapping from the draft scheme.",
        "operationId": "deleteDraftIssueType",
        "parameters": [
          {
            "name": "issueType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if either the requested scheme or issue type does not exist."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}/draft/workflow": {
      "get": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Get draft workflow mappings",
        "description": "Returns the draft workflow mappings or requested mapping to the caller.",
        "operationId": "getDraftWorkflow",
        "parameters": [
          {
            "name": "workflowName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if either the requested scheme or workflow does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Update a workflow mapping in a draft scheme",
        "description": "Update the draft scheme to include the passed mapping. The body is a representation of the workflow mapping. Values not passed are assumed to indicate no change for that field.",
        "operationId": "updateDraftWorkflowMapping",
        "parameters": [
          {
            "name": "workflowName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The body is a representation of the workflow mapping. Values not passed are assumed to indicate no change for that field.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowMappingBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          }
        }
      },
      "delete": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Delete a workflow mapping from a draft scheme",
        "description": "Delete the passed workflow from the draft workflow scheme.",
        "operationId": "deleteDraftWorkflowMapping",
        "parameters": [
          {
            "name": "workflowName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The scheme with the workflow deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested scheme or workflow does not exist."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}/issuetype/{issueType}": {
      "get": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Get issue type mapping for a scheme",
        "description": "Returns the issue type mapping for the passed workflow scheme.",
        "operationId": "getIssueType",
        "parameters": [
          {
            "name": "issueType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "returnDraftIfExists",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueTypeMappingBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if either the requested scheme or issue type does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Set an issue type mapping for a scheme",
        "description": "Set the issue type mapping for the passed scheme. The passed representation can have its updateDraftIfNeeded flag set to true to indicate that\nthe draft should be created/updated when the actual scheme cannot be edited.",
        "operationId": "setIssueType",
        "parameters": [
          {
            "name": "issueType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The new mapping for the issue type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueTypeMappingBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if either the requested scheme or issue type does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Delete an issue type mapping from a scheme",
        "description": "Remove the specified issue type mapping from the scheme.",
        "operationId": "deleteIssueType",
        "parameters": [
          {
            "name": "issueType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "updateDraftIfNeeded",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if either the requested scheme or issue type does not exist."
          }
        }
      }
    },
    "/api/2/workflowscheme/{id}/workflow": {
      "get": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Get workflow mappings for a scheme",
        "description": "Returns the workflow mappings or requested mapping to the caller for the passed scheme.",
        "operationId": "getWorkflow",
        "parameters": [
          {
            "name": "workflowName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          },
          {
            "name": "returnDraftIfExists",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if either the requested scheme or workflow does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Update a workflow mapping in a scheme",
        "description": "Update the scheme to include the passed mapping. The body is a representation of the workflow mapping. Values not passed are assumed to indicate no change for that field.\nThe passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft\nshould be created/updated when the actual scheme cannot be edited.",
        "operationId": "updateWorkflowMapping",
        "parameters": [
          {
            "name": "workflowName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The body is a representation of the workflow mapping. Values not passed are assumed to indicate no change for that field.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowMappingBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated scheme.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          }
        }
      },
      "delete": {
        "tags": [
          "workflowscheme"
        ],
        "summary": "Delete a workflow mapping from a scheme",
        "description": "Delete the passed workflow from the workflow scheme.",
        "operationId": "deleteWorkflowMapping",
        "parameters": [
          {
            "name": "updateDraftIfNeeded",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": null
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "schema": {
              "type": "string",
              "example": null
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The scheme with the workflow deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSchemeBean"
                }
              }
            }
          },
          "401": {
            "description": "Returned if there is no user or if the user has not entered a websudo session."
          },
          "404": {
            "description": "Returned if the requested scheme or workflow does not exist."
          }
        }
      }
    },
    "/api/2/worklog/deleted": {
      "get": {
        "tags": [
          "worklog"
        ],
        "summary": "Returns worklogs deleted since given time.",
        "description": "Returns worklogs id and delete time of worklogs that was deleted since given time. The returns set of worklogs is limited to 1000 elements. This API will not return worklogs deleted during last minute.",
        "operationId": "getIdsOfWorklogsDeletedSince",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a JSON representation of the worklog changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorklogChangedSinceBean"
                }
              }
            }
          }
        }
      }
    },
    "/api/2/worklog/list": {
      "post": {
        "tags": [
          "worklog"
        ],
        "summary": "Returns worklogs for given ids.",
        "description": "Returns worklogs for given worklog ids. Only worklogs to which the calling user has permissions, will be included in the result. The returns set of worklogs is limited to 1000 elements.",
        "operationId": "getWorklogsForIds",
        "requestBody": {
          "description": "a JSON object containing ids of worklogs to return",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorklogIdsRequestBean"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns a JSON representation of the worklogs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/worklog"
                }
              }
            }
          },
          "400": {
            "description": "Returned if the request contains more than 1000 ids or is null"
          }
        }
      }
    },
    "/api/2/worklog/updated": {
      "get": {
        "tags": [
          "worklog"
        ],
        "summary": "Returns worklogs updated since given time.",
        "description": "Returns worklogs id and update time of worklogs that was updated since given time. The returns set of worklogs is limited to 1000 elements. This API will not return worklogs updated during last minute.",
        "operationId": "getIdsOfWorklogsModifiedSince",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": null,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a JSON representation of the worklog changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorklogChangedSinceBean"
                }
              }
            }
          }
        }
      }
    },
    "/auth/1/session": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "Get current user session information",
        "description": "Returns information about the currently authenticated user's session. If the caller is not authenticated they will get a 401 Unauthorized status code.",
        "operationId": "currentUser",
        "responses": {
          "200": {
            "description": "Returned if the currently authenticated user is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUser"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the currently authenticated user is not returned."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": [
          "session"
        ],
        "summary": "Create new user session",
        "description": "Creates a new session for a user in Jira. Once a session has been successfully created it can be used to access any of Jira's remote APIs and also the web UI by passing the appropriate HTTP Cookie header. Note that it is generally preferrable to use HTTP BASIC authentication with the REST API. However, this resource may be used to mimic the behaviour of Jira's log-in page (e.g. to display log-in errors to a user).",
        "operationId": "login",
        "requestBody": {
          "description": "the username and password to authenticate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the caller is authenticated. Contains information about the caller's session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSuccess"
                }
              }
            }
          },
          "401": {
            "description": "Returned if the login fails due to invalid credentials."
          },
          "403": {
            "description": "Returned if the login is denied due to a CAPTCHA requirement, throtting, or any other reason. In case of a 403 status code it is possible that the supplied credentials are valid but the user is not allowed to log in at this point in time."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": [
          "session"
        ],
        "summary": "Delete current user session",
        "description": "Logs the current user out of Jira, destroying the existing session, if any.",
        "operationId": "logout",
        "responses": {
          "204": {
            "description": "Returned if the user was successfully logged out."
          },
          "401": {
            "description": "Returned if the caller is not authenticated."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/auth/1/websudo": {
      "delete": {
        "tags": [
          "websudo"
        ],
        "summary": "Invalidate the current WebSudo session",
        "description": "This method invalidates the any current WebSudo session.",
        "operationId": "release",
        "requestBody": {
          "description": "No request body is needed",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": null
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returned if no error occurs"
          }
        }
      }
    }
  }
}