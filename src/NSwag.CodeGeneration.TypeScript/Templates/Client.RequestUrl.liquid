let url_ = this.baseUrl + "/{{ operation.Path }}{% if operation.HasQueryParameters %}?{% endif %}";
{% for parameter in operation.PathParameters -%}
{%    if parameter.IsRequired -%}
if ({{ parameter.VariableName }} === undefined || {{ parameter.VariableName }} === null)
    throw new Error("The parameter '{{ parameter.VariableName }}' must be defined.");
{%    else -%}
if ({{ parameter.VariableName }} !== null && {{ parameter.VariableName }} !== undefined)
{%    endif -%}
{%    if parameter.IsDateOrDateTimeArray -%}
url_ = url_.replace("{{ "{" }}{{ parameter.Name }}}", encodeURIComponent({{ parameter.VariableName }}.map(s_ => s_ ? s_.{{ parameter.GetDateTimeToString }} : "null").join()));
{%    elsif parameter.IsDateOrDateTime -%}
url_ = url_.replace("{{ "{" }}{{ parameter.Name }}}", encodeURIComponent({{ parameter.VariableName }} ? "" + {{ parameter.VariableName }}.{{ parameter.GetDateTimeToString }} : "null"));
{%    elsif parameter.IsArray -%}
url_ = url_.replace("{{ "{" }}{{ parameter.Name }}}", encodeURIComponent({{ parameter.VariableName }}.join()));
{%    else -%}
url_ = url_.replace("{{ "{" }}{{ parameter.Name }}}", encodeURIComponent("" + {{ parameter.VariableName }}));
{%    endif -%}
{%    if parameter.IsOptional -%}
else
    url_ = url_.replace("/{{ "{" }}{{ parameter.Name }}}", "");
{%    endif -%}
{% endfor -%}
{% for parameter in operation.QueryParameters -%}
{%    if parameter.IsRequired -%}
{%        if parameter.IsNullable -%}
if ({{ parameter.VariableName }} === undefined)
    throw new Error("The parameter '{{ parameter.VariableName }}' must be defined.");
else if({{ parameter.VariableName }} !== null)
{%        else -%}
if ({{ parameter.VariableName }} === undefined || {{ parameter.VariableName }} === null)
    throw new Error("The parameter '{{ parameter.VariableName }}' must be defined and cannot be null.");
else
{%        endif -%}
{%    else -%}
{%        if parameter.IsNullable -%}
if ({{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null)
{%        else -%}
if ({{ parameter.VariableName }} === null)
    throw new Error("The parameter '{{ parameter.VariableName }}' cannot be null.");
else if ({{ parameter.VariableName }} !== undefined)
{%        endif -%}
{%    endif -%}
{%    if parameter.IsArray -%}
{%      if parameter.IsForm or parameter.IsSimple -%}
    if ({{ parameter.VariableName }}.length)
    {
        url_ += "{{ parameter.Name }}=";
        {{ parameter.VariableName }}.forEach(item => { url_ += encodeURIComponent("" + item) + ","; });
        url_ = url_.replace(/,$/, "");
    }
{%      elsif parameter.IsLabel -%}
    if ({{ parameter.VariableName }}.length)
    {
        url_ += "{{ parameter.Name }}=";
        {{ parameter.VariableName }}.forEach(item => { url_ += "." encodeURIComponent("" + item); });
    }
{%      elsif parameter.IsMatrix -%}
{
    {{ parameter.VariableName }}.forEach(item => { url_ += "{{ parameter.Name }}=" + encodeURIComponent("" + item) + ";"; });
    url_ = url_.replace(/;$/, "");
}
{%      elsif parameter.IsSpaceDelimeted -%}
{
    {{ parameter.VariableName }}.forEach(item => { url_ += "{{ parameter.Name }}=" + encodeURIComponent("" + item) + " "; });
    url_ = url_.replace(/ $/, "");
}
{%      elsif parameter.IsPipeDelimited -%}
{
    {{ parameter.VariableName }}.forEach(item => { url_ += "{{ parameter.Name }}=" + encodeURIComponent("" + item) + "|"; });
    url_ = url_.replace(/|$/, "");
}
{%      elsif parameter.IsDeepObject -%}
{{ parameter.VariableName }}.forEach((item, index) => {
    for (let attr in item)
        if (item.hasOwnProperty(attr)) {
            url_ += "{{ parameter.Name }}[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        }
});
{%      else -%}
{{ parameter.VariableName }}.forEach(item => { url_ += "{{ parameter.Name }}=" + encodeURIComponent("" + item) + "&"; });
{%      endif -%}
{%    else -%}
{%      if parameter.IsDateOrDateTime -%}
    url_ += "{{ parameter.Name }}=" + encodeURIComponent({{ parameter.VariableName }} ? "" + {{ parameter.VariableName }}.{{ parameter.GetDateTimeToString }} : "{{ QueryNullValue }}") + "&";
{%      else -%}
    url_ += "{{ parameter.Name }}=" + encodeURIComponent("" + {{ parameter.VariableName }}) + "&";
{%      endif -%}
{%    endif -%}
{% endfor -%}
url_ = url_.replace(/[?&]$/, "");
