import http from "k6/http";
import type { Params, Response } from "k6/http";

{% if HasOperations -%}
{% if GenerateClientInterfaces -%}
{% if ExportTypes %}export {% endif %}interface I{{ Class }} {
{%    for operation in Operations %}

  {% template Client.Method.Documentation %}
  {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}, requestParameters?: Params): { response: Response; returnData: {{ operation.ResultType }} };
{%-    endfor %}}
{%- endif -%}

{% if UseAureliaHttpInjection -%}
@inject({% if HasConfigurationClass %}{{ ConfigurationClass }}, {% endif %}String, HttpClient)
{%- endif -%}
{% if ExportTypes %}export {% endif %}class {{ Class }} {% if HasBaseClass %}extends {{ BaseClass }} {% endif %}{% if GenerateClientInterfaces %}implements I{{ Class }} {% endif %}{
  private baseUrl: string;
  private commonRequestParameters: Params;
{{ '' }}
{%- if HasExtendedConstructor == false -%}
  constructor({% if HasConfigurationClass %}configuration: {{ ConfigurationClass }}, {% endif %}baseUrl: string,commonRequestParameters?: Params) {
{%-    if HasBaseClass -%}
      super({% if HasConfigurationClass %}configuration{% endif %});
{%-    endif -%}
{%-    if UseGetBaseUrlMethod -%}
      this.baseUrl = this.getBaseUrl("{{ BaseUrl }}", baseUrl.replace(/\/+$/, ""));
{%-    else -%}
      this.baseUrl = baseUrl.replace(/\/+$/, "") ?? "{{ BaseUrl }}";
{%-    endif -%}
      this.commonRequestParameters = commonRequestParameters || {};
    }
{%- endif -%}

{%- if HasExtensionCode -%}

    {{ ExtensionCode }}
{%- endif -%}
{% for operation in Operations %}
    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}{% if UseAbortSignal %}{% if operation.Parameters.size > 0 %}, {% endif %}signal?: AbortSignal{% endif %}, requestParameters?: Params): { response: Response; returnData: {{ operation.ResultType }} } {
      const combinedRequestParameters = this._combineRequestParameters(
        requestParameters || {},
        this.commonRequestParameters,
      );
        {% template Client.RequestUrl %}

{%     if operation.HasBody -%}
      {% template Client.RequestBody %}
{%     endif -%}

{%-   if operation.HasBody -%}
      const response = http.request(
        "{{ operation.HttpMethodUpper | upcase }}",
        url_.toString(),
        content_,
        {
          ...combinedRequestParameters,
          headers: {
            ...combinedRequestParameters?.headers,
{%-    if operation.HasContent or operation.ConsumesOnlyFormUrlEncoded -%}
            "Content-Type": "{{ operation.Consumes }}",
{%-    endif -%}
{%-    if operation.HasResultType and operation.HasAcceptHeaderParameterParameter == false -%}
            "Accept": "{{ operation.Produces }}"
{%-    endif -%}
          },
        }
      );
{%-   else -%}
      const response = http.request("{{ operation.HttpMethodUpper | upcase }}", url_.toString(), undefined, {
        ...combinedRequestParameters,
      });
{%-   endif -%}

      let returnData;
      try {
        returnData = response.json();
      } catch {
        returnData = response.body;
      }
      return {
        response,
        returnData,
      };
    }
{% endfor -%}

  /**
  * Combines the provided request parameters with default parameters for the client.
  *
  * @param {Params} requestParameters - The parameters provided specifically for the request
  * @param {Params} commonRequestParameters - Common parameters for all requests
  * @returns {Params} - The combined parameters
  */
  private _combineRequestParameters(
    requestParameters?: Params,
    commonRequestParameters?: Params,
  ): Params {
    return {
      ...commonRequestParameters, // Default to common parameters
      ...requestParameters, // Override with request-specific parameters
      headers: {
        ...(commonRequestParameters?.headers || {}), // Ensure headers are defined
        ...(requestParameters?.headers || {}),
      },
      cookies: {
        ...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
        ...(requestParameters?.cookies || {}),
      },
      tags: {
        ...(commonRequestParameters?.tags || {}), // Ensure tags are defined
        ...(requestParameters?.tags || {}),
      },
    };
  }
}
{%- endif -%}
