/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.0.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as ng from 'angular';

export class GeoClient {
    private baseUrl: string | undefined = undefined;
    private http: ng.IHttpService;
    private q: ng.IQService;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:13452";
    }

    fromBodyTest(location: GeoPoint | null | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Geo/FromBodyTest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(location);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http(options_).then((_response) => {
            return this.processFromBodyTest(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFromBodyTest(_response);
            throw _response;
        });
    }

    protected processFromBodyTest(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    fromUriTest(latitude: number | undefined, longitude: number | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Geo/FromUriTest?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&";
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [],
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processFromUriTest(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFromUriTest(_response);
            throw _response;
        });
    }

    protected processFromUriTest(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    addPolygon(points: GeoPoint[] | null | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Geo/AddPolygon";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(points);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http(options_).then((_response) => {
            return this.processAddPolygon(_response);
        }, (_response) => {
            if (_response.status)
                return this.processAddPolygon(_response);
            throw _response;
        });
    }

    protected processAddPolygon(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    filter(currentStates: string[] | null | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Geo/Filter?";
        if (currentStates !== undefined && currentStates !== null)
            currentStates && currentStates.forEach(item => { url_ += "currentStates=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [],
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processFilter(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFilter(_response);
            throw _response;
        });
    }

    protected processFilter(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    reverse(values: string[] | null | undefined): ng.IPromise<string[] | null> {
        let url_ = this.baseUrl + "/api/Geo/Reverse?";
        if (values !== undefined && values !== null)
            values && values.forEach(item => { url_ += "values=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processReverse(_response);
        }, (_response) => {
            if (_response.status)
                return this.processReverse(_response);
            throw _response;
        });
    }

    protected processReverse(response: any): ng.IPromise<string[] | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(item);
            }
            else {
                result200 = <any>null;
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<string[] | null>(<any>null);
    }

    refresh(): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Geo/Refresh";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [],
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processRefresh(_response);
        }, (_response) => {
            if (_response.status)
                return this.processRefresh(_response);
            throw _response;
        });
    }

    protected processRefresh(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    uploadFile(file: FileParameter | null | undefined): ng.IPromise<boolean> {
        let url_ = this.baseUrl + "/api/Geo/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processUploadFile(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUploadFile(_response);
            throw _response;
        });
    }

    protected processUploadFile(response: any): ng.IPromise<boolean> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<boolean>(<any>null);
    }

    uploadFiles(files: FileParameter[] | null | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Geo/UploadFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null && files !== undefined)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processUploadFiles(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUploadFiles(_response);
            throw _response;
        });
    }

    protected processUploadFiles(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    saveItems(request: GenericRequestOfAddressAndPerson | null | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Geo/SaveItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http(options_).then((_response) => {
            return this.processSaveItems(_response);
        }, (_response) => {
            if (_response.status)
                return this.processSaveItems(_response);
            throw _response;
        });
    }

    protected processSaveItems(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status === 450) {
            const _responseText = response.data;
            let result450: any = null;
            let resultData450 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result450 = Exception.fromJS(resultData450);
            return throwException(this.q, "A custom error occured.", status, _responseText, _headers, result450);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    getUploadedFile(id: number, override: boolean | undefined): ng.IPromise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Geo/GetUploadedFile/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (override === null)
            throw new Error("The parameter 'override' cannot be null.");
        else if (override !== undefined)
            url_ += "override=" + encodeURIComponent("" + override) + "&";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            responseType: "arraybuffer",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetUploadedFile(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetUploadedFile(_response);
            throw _response;
        });
    }

    protected processGetUploadedFile(response: any): ng.IPromise<FileResponse | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return this.q.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(new Blob([response.data]), this.q).then(_responseText => {
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return this.q.resolve<FileResponse | null>(<any>null);
    }

    postDouble(value: number | null | undefined): ng.IPromise<number | null> {
        let url_ = this.baseUrl + "/api/Geo/PostDouble?";
        if (value !== undefined && value !== null)
            url_ += "value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processPostDouble(_response);
        }, (_response) => {
            if (_response.status)
                return this.processPostDouble(_response);
            throw _response;
        });
    }

    protected processPostDouble(response: any): ng.IPromise<number | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<number | null>(<any>null);
    }
}

export class PersonsClient {
    private baseUrl: string | undefined = undefined;
    private http: ng.IHttpService;
    private q: ng.IQService;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:13452";
    }

    getAll(): ng.IPromise<Person[] | null> {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetAll(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetAll(_response);
            throw _response;
        });
    }

    protected processGetAll(response: any): ng.IPromise<Person[] | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Person[] | null>(<any>null);
    }

    add(person: Person | null | undefined): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Persons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http(options_).then((_response) => {
            return this.processAdd(_response);
        }, (_response) => {
            if (_response.status)
                return this.processAdd(_response);
            throw _response;
        });
    }

    protected processAdd(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    find(gender: Gender): ng.IPromise<Person[] | null> {
        let url_ = this.baseUrl + "/api/Persons/find/{gender}";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender));
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processFind(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFind(_response);
            throw _response;
        });
    }

    protected processFind(response: any): ng.IPromise<Person[] | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Person[] | null>(<any>null);
    }

    findOptional(gender: Gender | null): ng.IPromise<Person[] | null> {
        let url_ = this.baseUrl + "/api/Persons/find2?";
        if (gender === undefined)
            throw new Error("The parameter 'gender' must be defined.");
        else if(gender !== null)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processFindOptional(_response);
        }, (_response) => {
            if (_response.status)
                return this.processFindOptional(_response);
            throw _response;
        });
    }

    protected processFindOptional(response: any): ng.IPromise<Person[] | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(Person.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Person[] | null>(<any>null);
    }

    get(id: string): ng.IPromise<Person | null> {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGet(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGet(_response);
            throw _response;
        });
    }

    protected processGet(response: any): ng.IPromise<Person | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PersonNotFoundException.fromJS(resultData500);
            return throwException(this.q, "A server side error occurred.", status, _responseText, _headers, result500);
        } else if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Person | null>(<any>null);
    }

    delete(id: string): ng.IPromise<void> {
        let url_ = this.baseUrl + "/api/Persons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "DELETE",
            transformResponse: [],
            headers: {
            }
        };

        return this.http(options_).then((_response) => {
            return this.processDelete(_response);
        }, (_response) => {
            if (_response.status)
                return this.processDelete(_response);
            throw _response;
        });
    }

    protected processDelete(response: any): ng.IPromise<void> {
        const status = response.status;

        let _headers: any = {};
        if (status === 204) {
            const _responseText = response.data;
            return this.q.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<void>(<any>null);
    }

    transform(person: Person | null | undefined): ng.IPromise<Person | null> {
        let url_ = this.baseUrl + "/api/Persons/transform";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processTransform(_response);
        }, (_response) => {
            if (_response.status)
                return this.processTransform(_response);
            throw _response;
        });
    }

    protected processTransform(response: any): ng.IPromise<Person | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Person.fromJS(resultData200) : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Person | null>(<any>null);
    }

    throw(id: string): ng.IPromise<Person> {
        let url_ = this.baseUrl + "/api/Persons/Throw?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processThrow(_response);
        }, (_response) => {
            if (_response.status)
                return this.processThrow(_response);
            throw _response;
        });
    }

    protected processThrow(response: any): ng.IPromise<Person> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return this.q.resolve(result200);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PersonNotFoundException.fromJS(resultData500);
            return throwException(this.q, "A server side error occurred.", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<Person>(<any>null);
    }

    /**
     * Gets the name of a person.
     * @param id The person ID.
     * @return The person's name.
     */
    getName(id: string): ng.IPromise<string> {
        let url_ = this.baseUrl + "/api/Persons/{id}/Name";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [],
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetName(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetName(_response);
            throw _response;
        });
    }

    protected processGetName(response: any): ng.IPromise<string> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return this.q.resolve(result200);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = PersonNotFoundException.fromJS(resultData500);
            return throwException(this.q, "A server side error occurred.", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<string>(<any>null);
    }

    addXml(person: string | null | undefined): ng.IPromise<string | null> {
        let url_ = this.baseUrl + "/api/Persons/AddXml";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = person;

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/xml",
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processAddXml(_response);
        }, (_response) => {
            if (_response.status)
                return this.processAddXml(_response);
            throw _response;
        });
    }

    protected processAddXml(response: any): ng.IPromise<string | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<string | null>(<any>null);
    }

    upload(data: Blob | null | undefined): ng.IPromise<string | null> {
        let url_ = this.baseUrl + "/api/Persons/upload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = data;

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [],
            headers: {
                "Content-Type": "application/octet-stream",
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processUpload(_response);
        }, (_response) => {
            if (_response.status)
                return this.processUpload(_response);
            throw _response;
        });
    }

    protected processUpload(response: any): ng.IPromise<string | null> {
        const status = response.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText, _headers);
        }
        return this.q.resolve<string | null>(<any>null);
    }
}

export class GeoPoint implements IGeoPoint {
    latitude: number;
    longitude: number;

    constructor(data?: IGeoPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["Latitude"];
            this.longitude = _data["Longitude"];
        }
    }

    static fromJS(data: any): GeoPoint {
        data = typeof data === 'object' ? data : {};
        let result = new GeoPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Latitude"] = this.latitude;
        data["Longitude"] = this.longitude;
        return data; 
    }
}

export interface IGeoPoint {
    latitude: number;
    longitude: number;
}

export class Exception implements IException {
    message: string | undefined;
    innerException: Exception | undefined;
    stackTrace: string | undefined;
    source: string | undefined;

    constructor(data?: IException) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["Message"];
            this.innerException = _data["InnerException"] ? Exception.fromJS(_data["InnerException"]) : <any>undefined;
            this.stackTrace = _data["StackTrace"];
            this.source = _data["Source"];
        }
    }

    static fromJS(data: any): Exception {
        data = typeof data === 'object' ? data : {};
        let result = new Exception();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Message"] = this.message;
        data["InnerException"] = this.innerException ? this.innerException.toJSON() : <any>undefined;
        data["StackTrace"] = this.stackTrace;
        data["Source"] = this.source;
        return data; 
    }
}

export interface IException {
    message: string | undefined;
    innerException: Exception | undefined;
    stackTrace: string | undefined;
    source: string | undefined;
}

export class GenericRequestOfAddressAndPerson implements IGenericRequestOfAddressAndPerson {
    item1: Address | undefined;
    item2: Person | undefined;

    constructor(data?: IGenericRequestOfAddressAndPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["Item1"] ? Address.fromJS(_data["Item1"]) : <any>undefined;
            this.item2 = _data["Item2"] ? Person.fromJS(_data["Item2"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GenericRequestOfAddressAndPerson {
        data = typeof data === 'object' ? data : {};
        let result = new GenericRequestOfAddressAndPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["Item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGenericRequestOfAddressAndPerson {
    item1: Address | undefined;
    item2: Person | undefined;
}

export class Address implements IAddress {
    isPrimary: boolean;
    city: string | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isPrimary = _data["IsPrimary"];
            this.city = _data["City"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsPrimary"] = this.isPrimary;
        data["City"] = this.city;
        return data; 
    }
}

export interface IAddress {
    isPrimary: boolean;
    city: string | undefined;
}

export class Person implements IPerson {
    id: string;
    /** Gets or sets the first name. */
    firstName: string;
    /** Gets or sets the last name. */
    lastName: string;
    gender: Gender;
    dateOfBirth: Date;
    weight: number;
    height: number;
    age: number;
    averageSleepTime: string;
    address: Address;
    children: Person[];
    skills: { [key: string]: SkillLevel; } | undefined;

    protected _discriminator: string;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.address = new Address();
            this.children = [];
        }
        this._discriminator = "Person";
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.firstName = _data["FirstName"];
            this.lastName = _data["LastName"];
            this.gender = _data["Gender"];
            this.dateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : <any>undefined;
            this.weight = _data["Weight"];
            this.height = _data["Height"];
            this.age = _data["Age"];
            this.averageSleepTime = _data["AverageSleepTime"];
            this.address = _data["Address"] ? Address.fromJS(_data["Address"]) : new Address();
            if (Array.isArray(_data["Children"])) {
                this.children = [] as any;
                for (let item of _data["Children"])
                    this.children.push(Person.fromJS(item));
            }
            if (_data["Skills"]) {
                this.skills = {} as any;
                for (let key in _data["Skills"]) {
                    if (_data["Skills"].hasOwnProperty(key))
                        (<any>this.skills)[key] = _data["Skills"][key];
                }
            }
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "Teacher") {
            let result = new Teacher();
            result.init(data);
            return result;
        }
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator; 
        data["Id"] = this.id;
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Gender"] = this.gender;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["Weight"] = this.weight;
        data["Height"] = this.height;
        data["Age"] = this.age;
        data["AverageSleepTime"] = this.averageSleepTime;
        data["Address"] = this.address ? this.address.toJSON() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["Children"] = [];
            for (let item of this.children)
                data["Children"].push(item.toJSON());
        }
        if (this.skills) {
            data["Skills"] = {};
            for (let key in this.skills) {
                if (this.skills.hasOwnProperty(key))
                    (<any>data["Skills"])[key] = this.skills[key];
            }
        }
        return data; 
    }
}

export interface IPerson {
    id: string;
    /** Gets or sets the first name. */
    firstName: string;
    /** Gets or sets the last name. */
    lastName: string;
    gender: Gender;
    dateOfBirth: Date;
    weight: number;
    height: number;
    age: number;
    averageSleepTime: string;
    address: Address;
    children: Person[];
    skills: { [key: string]: SkillLevel; } | undefined;
}

export enum Gender {
    Male = <any>"Male",
    Female = <any>"Female",
}

export enum SkillLevel {
    Low = 0,
    Medium = 1,
    Height = 2,
}

export class Teacher extends Person implements ITeacher {
    course: string | undefined;
    skillLevel: SkillLevel;

    constructor(data?: ITeacher) {
        super(data);
        if (!data) {
            this.skillLevel = SkillLevel.Medium;
        }
        this._discriminator = "Teacher";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.course = _data["Course"];
            this.skillLevel = _data["SkillLevel"] !== undefined ? _data["SkillLevel"] : SkillLevel.Medium;
        }
    }

    static fromJS(data: any): Teacher {
        data = typeof data === 'object' ? data : {};
        let result = new Teacher();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Course"] = this.course;
        data["SkillLevel"] = this.skillLevel;
        super.toJSON(data);
        return data; 
    }
}

export interface ITeacher extends IPerson {
    course: string | undefined;
    skillLevel: SkillLevel;
}

export class PersonNotFoundException extends Exception implements IPersonNotFoundException {
    id: string;

    constructor(data?: IPersonNotFoundException) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PersonNotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new PersonNotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IPersonNotFoundException extends IException {
    id: string;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(q: ng.IQService, message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): ng.IPromise<any> {
    if (result !== null && result !== undefined)
        return q.reject(result);
    else
        return q.reject(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: Blob, q: ng.IQService): ng.IPromise<string> {
    return new q((resolve) => {
        let reader = new FileReader();
        reader.onload = event => resolve((<any>event.target).result);
        reader.readAsText(blob);
    });
}